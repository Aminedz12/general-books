%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 3 03 1.eps
%%Creator: Adobe Illustrator(R) 17.1
%%For: XyJIuraH
%%CreationDate: 1/3/2016
%%BoundingBox: 0 0 422 226
%%HiResBoundingBox: 0 0 422 226
%%CropBox: 0 0 422 226
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.1.0 x273 R agm 4.7709 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">3</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2016-01-03T21:18:15+02:00</xmp:CreateDate>
         <xmp:ModifyDate>2016-01-03T21:18:15+02:00</xmp:ModifyDate>
         <xmp:MetadataDate>2016-01-03T21:18:15+02:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>140</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAjAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYqk3mXzZpXl2O2a+E8kl5IYraC2ieeV2VS7UVAeiiuSjEnkwnMR5pJ/wArW0P/AKtmsf8AcPn/&#xA;AKZLwpNf5iHe035saCoq2nauo8Tp84H6sfCK/mId6z/lb3lv/lh1X/pAm/pj4ZT48UZpH5m+XNU1&#xA;S302OK9trm7LLbm6tZYUdlUuVDMKV4qTgMCExyxJoMsyDa7FUo1jXxZTCCKMSS0qxY7CvQbZfiw8&#xA;QsuFqdX4ZoCyu03zDa3XGOX9zOxoFNSp+RpjkwGPLknDrIz2OxTXKHMdiriQBU9MVUWvLZXRC4rJ&#xA;TiQCRuaCpGwqelclwFgckQatDvqZMQeKIluTgo5KGkY5HsdyOgyYx77tRz7WB3/Y6PUmeQ0i5RkO&#xA;Yyp+I+mVBqDQb8vHAcajNZ5bb/Yvj1KFgnMNHzi9Ylh8KqabcjSp+LtgOMshmG17bWiI54pFRkYE&#xA;SLzQdCVPeh3yJBDZGQPLqvwMnYq7FXYq7FXYqh9R1Gy02wnv76ZYLO2QyTzNWiqvU7VJ+QxAtBNM&#xA;aH5qeSSKi6uSD0P1C/8A+qGDij3j5hp/M4+9v/lankn/AJarn/pAv/8AqhjxR7x8wv5nH3qH/K4f&#xA;y8/6uUv/AEhXv/VHGx3j5hfzOPvC6P8AN78vZJEjGpuGdgql7S7RasaCrNCFA9ycIIPUfNI1GM9W&#xA;Y4tzsVdirsVYD+Zf/Hc8pf8AMXdf9Qj5dh5uLq/pWgV7gDqSegA3y+UhEEnkHWoK/uLQxPF9YjEl&#xA;RsSfn4Zgy7SwcuL72HjwB3KAigEpIiljcgVNG/qMYa7DI0JbtkM0JGgUNZf8pl5X/wCY2T/qFlzK&#xA;nyLlYPqey5jOxWXCyPBIsTcZGVgjeDEbHDE77sZgkGubDH0XVg55W7k13Ioa/TXNgM0e90Z0uS+S&#xA;0aNqoNRbOCOhw+LHvX8tk7mT6U91Bp9dQc+oGqOR5PxagUGlSSTmHkAMvS7XAZRh6+a+fU1CN6IJ&#xA;/dmRJCDxNDRhTbdRvTBHH3pnn7u5BSG7ujInJmqRCHjr6RU7OSKkfZYNv8smKi0S4p2Phty8/wBa&#xA;5oEjkf1pFilkILW0IMhIHFqgAAr8QJ6d8xM+vxYzwk3Lu5n5C3Jx6OcrPIfZ+LVpB6xf/QzR25ky&#xA;ycKniE/Y5kVUUzD/AJQyfww/0xA+7ick6XH1Py/AbSC65SMttbguCrkSONj1p8G1cMNTqZfww2/p&#xA;H/iUnBhHfv5D9bpBcKH5WzoTF6KvEyyBRvuFPBj1yz83lj9eM1/RIl+o/YxOngfplvVb/j9Km6wy&#xA;O7225CxxPGlVmCBvjqDxbcUGZGn1mPJsDuOh5j4Hdx82mlDettht3dd1WCS5g9ONqcI43mnQ7soJ&#xA;JROZant9GXyALCEpRoeVn9H48kTBfQy+mpISWRQwhYjkARUV96b5GUCG2GUGu89FdmVVLMQqjqTs&#xA;MgzJpgeveZPjeWeZorUciiKGICqKlmCg9AKknpmb+7xAcRAvbfv7nTTyZM0jw2QO7uQXlz8xdGlv&#xA;ltbPUY7xnBP1UMakAVJWo7ZOeOMveuLNPHufpZ7pmrW9+jGMFJE+3G3X5jxGYeTEYuzwaiOQbc0h&#xA;/Nb/AMl1r3/MKf8AiQwQ5hsyfSUhi/uk/wBUfqznnng2/wBhvkcBU8mJZq3UIDXP+OXN/sf+JjMz&#xA;Qf30fe5Gk/vY+9iOt+fvNEuu6k0/mLVbY/WpljhtZnSJUVyFCqJYwtKdAM7ERFcnpjM3zRnkvz15&#xA;lPnPQYk8wandx3F/b29xBeSu8TRTSCNwVaSQE0bbbbr1xlEVyTCZsbvqbMVzHYqwH8y/+O55S/5i&#xA;7r/qEfLsPNxdX9Km393J/qP/AMROS1X91L+qfudZLkfcxZmSOJYZwXcb7GhjH8tSD1O5Hb51ziTQ&#xA;FH+x0xIAo/2K9m3q3EDRDjHGfjiH7JpTn78vH6PDMjS75YV3huwG5xrlf4/H7FtnX/GPlim5+uyU&#xA;H/RrNnXy5O/wfU9NcT2bFEJVyBK/BaqzMxL7kH4URcAqTM3DYe/9fwAVF1W5UNzRHZEMrcSVAVVV&#xA;mXflVvjGDwwzGokOYHK/x80RJfT+q0SRBX9QRoznY1VmqaePGgyAgKtsOU3QHVQe7upkqARFLHHL&#xA;GsZPPgGHqio70btkhED8fJrOSUh5EA7fa2ljLMiyMzB3DRu71DcUasT8T3BUH6TiZgfj5qMRkL/H&#xA;kUVFapEgaZgzI7S8wOCgtWtBU0G/jlc8nXkG+GL4m0OJpLkcbasFoOkiijP/AKn8q++afJqZ5voP&#xA;DDv6y93cPPmene5scccfMXLu6BUjhihQiNOI6mnUnxJO5PzyOPHGIqIr8dUSmZc3W86Tx+olaVIo&#xA;eu2WzgYmiwBtVt5CZpEpsoBrlull6iFnHYFUnuI4FUvX4jxAG5qcyM2eOMAnqWMIGXJq4tIJwPUX&#xA;4l+w42Zfkw3GDNpoZPqG45HqPcVhklHkhZGaEeje/vbZ6KLjpTfZZKfr6eOY4zzwGshuHSfd/W/4&#xA;rl30zlijkHpG/d+r9SldWc6SCUMzIZC5ES/vByUita77fAPAHNrGYIp12TGQb8+nP8dEk16S7Dww&#xA;TMSETkV5cqMxJoT3KrQb5k4QNyHA1cpWAWDeeNPub7S1jt7dLlwXIR1dhUxsBx9ME8qnavw+OV6y&#xA;MpAcIP1Dlw/77p7t+5dHOMZGyBt1v9H9jDPy88ua9Y+ZYri802W1gEcgaVhEFqVoAaKp+7Log2jL&#xA;MGOxetQzzwPzhkaN+nJSQaeG2WGIPNxozMTYNIr8wLma5/KrWJpv7xrRqnpWjgV+nMAxAnQd1jmZ&#xA;YrPNLYv7pP8AVH6s5t0obf7DfI4Cp5MSzVuoQGuf8cub/Y/8TGZmg/vo+9yNJ/ex97yzWJPS8x3s&#xA;vEP6d5K3BuhpIc7DJDihV1b0UxdhG+Rn5+fdAfiqc9VtG4IKKOVyhoo8B2xEeGFc6CcYoh9lZjOw&#xA;diqSeZfK+ka8bT9JJMy2jO8D28ssTo7gLXlEVb7NRk4Spqywur5JZD+XvliGVJY5NT5oarW8vmFR&#xA;4hnIP05MzJ2NNXgw8/l+xzeVfJwYhlm5A0P971/4HMb8vj/mQ+QYflMX83/Y/sXr5P8AKpACC4Uy&#xA;qyqUaZGKkUahAB6Htk44IA2IxHyUafFE7Cj/AFf2ITTPInkrT9QttUsluWuLGUlZJri5lWNipViy&#xA;yMVGzEbjLzxcimPANweTNtiPEHKHMUWsbQqq+ioVCSqqKDfc7CnXJcZ72s4o9y57aB+XNA3OnKvf&#xA;j0+7AJEMjAHmHB7dHWAMquB8EYoDxHgPDGjzWwDTQeaRG4KYmrRGkANfegOGgEWSNtkDcRrd3Cxv&#xA;8cVtQSsf23pXjTpt1b7vHNTqspyyMB/dx+rzP833Dr8u9yscBACR+rp5efv7la4WYwsITxk/Z/ph&#xA;gRe/JiVlpdCdDUcZU2kTwOSyY+E+SgqMTR2kswkkVY3bki1qRXrsMnIGYFDdHJUhvrZJXkLNxYAV&#xA;4N/TJ6fEYyJKzlYAXCSO7vo2Rg0MQ5DcVLfLrkcmKU80SR6I/ezjMCB7y3qepG24QQL6t5KaRx+H&#xA;ucq1+v8ACqEBxZZch+kstPp+OzLaIRnH1IeMyg8lpInUbjcZngcUakBuNxzDjk0dkJbvNbXK2b/F&#xA;AwLW8pO4A6oa9advbMTATin4R5c4Hy6x+HTy9zbk9Q4h8f1/H7101nZ3cSkBZICxkYLQ82pTrmyE&#xA;jE+bhSxxmPLn70rFhbRPxa2jZ2ZS0bEkj1GosaU7hQSxy7jJ6uL4MQeQ/t6Ij0dBpU2tByYboRsh&#xA;AZiOoALAZG597Zw4f5rTWuihm9Oz9SRZDHw3FSE5kjkaUpjxT70HHi6Rs3+1B+ZY5NY8s6npdrAG&#xA;F3aTRWqBgCxVQOJBoF5V23yJjW7bHJxbAbdPg8WHk38zgKCHVaf8xM//AFUyPh4u6PyDT+XHckeu&#xA;S+YtDuls9Xvb+zuXjEqxS3c9ShJUNtIdqqcIw4z/AAx+QYnFEcwu0LSfMevRyyaOby9SAhZjFcTH&#xA;iWFRWrjrTInTYRzjH5BiNLA8oj5Jp/yrjz9dEW0tjfNHKQjCWeT06E/tcpKUxjixRNiMQfcGcdJE&#xA;GxEfJ5zr3/Hd1H/mKm/5ONmUOSy5o7yF/wApz5d/7adn/wBRCYJcimH1B9mZhue7FUPd3TRURFq5&#xA;FakEqB9HfCAxkT0Qr3t0yFaBailQrgj5YRTE2ev2IMwMSSSxJ6mjZPiHc1+Gf5xVoZJoV4rRqGq8&#xA;1Y8Tv08OuAkFIiR1v4KgiWZY7gyfVb5yUEiigenZlOzZLirbnFhwXRJ4Z/ev9S8hlElzbNKyinq2&#xA;7Egj/KjJH8caBGx+aeKQNyF+79TDfM2u6pHq0kdvdTwwgLxjNYyKip2275yna2qywzmIlQAHJ6zs&#xA;jTYp4BIxsknmmnlPV5LmxmTUJJrkpIPToHc0I3BK9fpzY9i5cmSEjI3R6ut7cx4sc4gCrHS2RfpB&#xA;iT6VlOzHuVCD72IzccHeQ6fxu6MvuU7m91RIWkFqkdKAc5ORJJoAAo61PjlGqyRxYzIbnp7+n2tm&#xA;HxJyAoAe/o3HBJHaiJH/AHtN5KVq53ZvpOavDAQAB3/T3n4ndypy4jbVvJd8zHOg2FRKvQ5dMRqw&#xA;WAtTLPcSMsB9OKtJJh1Yjsv9clQiN9z3LzV4baCIfAgB7sdyfpyuUyeaQEVD3+jMjS9WM1k9lbzb&#xA;svF+0i7MD8xmWwYprXmAaRq6aZZRJf8AmXUFH1RWY8Y4q8TPc0+xGvtux+EZh+BjjlOQD95J22k0&#xA;ssmMzyHh08OZ7z/Nj3yP2cy3p3mGVaWWiwS6xdGTnqGoyj0o2c0DtvQDYUVdgAABWmUfnjI8OKJn&#xA;3nkGeXSD68pGONemI3P47+882UahEz2zMn97D+9ip15JvT6emZOsxGcPT9cfVH3j9fL4urwzETvy&#xA;OxWwT293DztJgjMebcOJNaftg5k4snHET6SFhx5RFmIO4KsUP1lXMKNQUE23Ie1COn05O9ua16rr&#xA;4sY1TzLoNldNZStcLLDySbiinkJGDsCSR18cxMvacMcjE7l1efWYoS4TxWOfx3TOy1DStVtGvYGl&#xA;4NJxoFbmkiLToobqrZfptSMsbjycrHlx5Y8Qvn9v9i3W9T0/y7ZPfvZyyLGoRfRXmSxAVVAr34ip&#xA;pl1mXVu4YwOwYa35sy1/vYkPUobK6JX2r6i1p40Hyw+EVOYDqwzXIfLvmLUZNT1KWW6uJKgP9Vui&#xA;FWpYIvx7KvLYZIWNmB4Zbo/yne6X5WuJZdIlkiSegmhazu2jfjUKSvMbjkaYJWWUaHJ6n5S812/m&#xA;C1mZY3iuLVgk6tG8asGrwdOY6NxO1ajp4E1yjTdGVvlTzX5I89ReZdURNLuiguZSrJBJIpBckFWV&#xA;GBBrXrl9+bimPeEd+XPkzzt/jrQpJ9NuUggvreeaSSCSNFSGRZHYsyKNlU98BO3NMY7ig+u8x3Ld&#xA;irsVdirsVeWa/wDntZaQ0/8AuNScQ3Utp6AvEFyDE7oXeDgxRT6fj3HjkYT4shhUthd16enI/H72&#xA;M5VHi2917/JKbb/nJPTrm5hgfQJQssiISJ1cirAVClBUj55keEe9p8cHmHsoSQF3WQuGFURqcQfY&#xA;gVplVtwB52oT20UyB7mzimlG3E8X29mcLkJ4YSO4B94ZwzZIDax7j/YutbZLSOO3toAkA3O9ONTW&#xA;lKb4MWKMI1HYJy5pzlct1UfWCz14qv8AusipPzPTLNmvdC3ivW1hkfmWl5sQAuyKWG3+sBmv18gT&#xA;CPfL7gT99ORgBAkSen3lbPcTRPRYGkWleS/0yMIAjnSCVKa4eWFURWjkmbhRhQgftH7slGABs70g&#xA;lFRxrGioooqigGVE2bKV2BKrD3+jMrS9WE2D/mP+ZsPlwpo2kx/X/NN7RLSzX4liL7K8v6wvf2G+&#xA;WZcvDsPqd92N2GdSDmyng08Pql310H6/0oryL5Gk0rTri81mY3vmTVqS6nfPu3L9mNDtRE7D+G2S&#xA;x4+HnzLi9r9pDUSEcY4MENoR/SfMrtd/MTy35Tit7bVfVF3OZBFBbQs5kKEciCAEqeQPXGU4w2Xs&#xA;7sfUa2zjqo8yTVfpTHyh5uTzNaz3UemX2nRROEjF/F6LSAivJKFlI7bHJQnxdGrtLs06SQiZwmSP&#xA;4Dde9FW1pp0vKCRVW4ikkCFTwk48iVoRQ7Kcp7PlKMDEcoykPtsfYXW6rHCUwT9RAPmiPqd/F/cX&#xA;hZeyTqH/AOGHFszeKJ5j5NHhzHKXzYjrvkfWb/UZ75ZYC01DwBYbhQO49s0+q7N8SZlGXPvdRquz&#xA;MuSZlY3Tbyrper6RphtmgRnlkMzFpKcSyqONAG6cfHMzQ6YYsdSO535OXocOTDDhobm+acV1lui2&#xA;6fMu/wDBczPR5uZ+9/o/axl9A1USMPRqAT8fJQD77nMz8xADcur/ACeW+SfaBaSWVo8c7KGdywUM&#xA;DQUA/hmFmzwkdi7LSYJwjRHVNA6t0IPyOViQPIuUQW8KHYq7FXYq7FXYq7FXYq+bvO1/qi3F66a6&#xA;9qP0hcKNV9bV1jcCWQCBUSBrccKcfgJ+x88hiP74jjB2+j02OW/87597Vk+gbVv9W+/Pbu/sY7pO&#xA;qax+lLPl55AX146ky6kwpzH7LQBT8jtmaR5OOCe99XRj0mWBYyIgvwPWoFP2TXp7Zjnfdyo7bVsl&#xA;HmiQRrbExrJu44vWnbfYjOa9oZiIgSBLnz+Hudr2fG+LeuSSxavcQoyQosQbrwLjfx+1nP4+054w&#xA;RACN93F/xTny00ZGzv8AL9TNs9DeeQd7/vVabdS4Hz4E/wAM12t+uH+d9zfi+mXw+9TnvLeBgsjE&#xA;MRUAAnbBDEZcmJKjFOtxeoyqwCIxHIU3JAyyUOGHxRdlG5QydirzT80/zhtvLEUmk6MyXOvyijts&#xA;yWoI+043rJ/Kn0nwM4ZuAGub1PYPs3LVEZcvpwj/AGXu8u8/LyR/Jz8uLm0Lea/MPKfXLyrx+vVn&#xA;jD9Sxbfm37Xh08cycGKvUebH2k7bjmP5fBtgh3cpEf70dO/n3PWsyXkkiv8AX9A0W/kfVr2CxWcq&#xA;sElwyxqWK1YBm2HQZGUgOblabSZs9jFGU651umlhqmmajEZdPu4byIUrJbyJKu/TdCRhBB5NWbT5&#xA;MRqcTE+YI+91ju1ye3rtT6FUZiaTnP8Arn7gnN/D/VQmq3cenRosMX9+TXixShWh7dMp7S7Slp+E&#xA;1xXf2J02kjksXwqGnaxNeTx2+8VATzDK9afzVX9WY3Z/bJz5OAwAsd7bqNDwQsSOyccJfV5ep+77&#xA;x0H6+ubyxTg0b57LSGRJC8xApXlRRxH3frw/BHIGyleuuf0QrI7v8QpIwCk79wAv6s0vb5I05rb1&#xA;Bzezt5jrsWNOkVRzPBh/eKBXf29/Ef7WcXKMb3NHr+O/y/sd4CeibeXCRqZUbR+mxWnQio3+ebrs&#xA;PbUV/DwmvscLXf3fnbKM7J0zsVdirsVdirsVdirsVYxf/lp5Iv2kN3pglEkjTtGZZxH6jkszCNXC&#xA;KSWPQd8AAEuIAcXfW/zQRYo8kND+UP5bwypLHocQeNg6EvKwqpqNi5B+nLPELDwo9zMCAQQRUHYg&#xA;5BsUGtisSpAVUKagSAuKeAqRTCal9QthwmIqJpcUb1QBEnpU3avxV/1eNPxyHhxrl9jPilfk2DcE&#xA;PVUUj+7IYtX/AFhRaZPZj6kn8y61pujWVveatfQWgSZaM5Cc+XwMEUlmNFeppmJrMUpiJgLMZD5f&#xA;SfsJbcUxG+I8x+1KP+Vpfl5Wv6cta+NT/TK/y2TuY+NDvUJPzP8AIH1uKRdctitGVzU7dx2yY08+&#xA;EikeLG+av/ytP8vf+r7bfe39Mh+WydyfGj3sH/Mr88rG2sjp/lK4FzfTCkuoKp4Qqf8AffIfE58e&#xA;g+fSJ0+Tud/2Jh0Up8epyRjAfw3uff3D72BflXZ+Uzq51zzVqsMTxSF7eCdyztJWplfrvX7Ne+/h&#xA;W7BpJXcg732j9qMRx+BppDhI9RHd/NH6fLZ72n5qflwihV121CqKAAt0+7M3gPc+f+JHvXf8rW/L&#xA;r/q/Wv3t/THgPcviR70mv/OX5Q6y8w1m9069j5AQLcIJCoAoWQlSVr7ZGWG+YcnTdoZMBvFMwJ7j&#xA;S7y/5r/Jny7HcR6LqNnZR3TiSdUeQhmAoNm5U27DBHDw8gz1namXUkHLPiMdgyzy5eadqenRalY3&#xA;S3MU5dy8MnKPk7FipANOS1pmNo4ShjqQqRJkfibacxjKdg7Db5IyfTLa4BE/KUE1Xkfs18MlqNNj&#xA;zACcbpGKcsd8JO6yDR7GDeJSj9C4JDU+jK8Ggw4ZcUIgH4ssmac41IlFGFDKJSW5DoOTcf8Aga8e&#xA;/hmZe1NPCLt0cMMZZo0VGc1cqACT70xJJURA5Bbc2sVzF6cteNa7GhBGY+o08cseGXJtx5DA2Ev/&#xA;AMM6X/K//BZrP5A03cfm5X5/J5Imy0mzs35whuVCPiNaV6/qzL0vZuLAbhd+9qy6meQUUZme47sV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVYrrf5XeR9cv3v9WsJLy6frJJd3dAOvFFEoVF/yVAGSEyGB&#xA;xg80v/5Uf+V3/Vl/6erv/qth8SSPBj3O/wCVH/ld/wBWX/p6u/8Aqtj4kl8GPc7/AJUf+V3/AFZf&#xA;+nq7/wCq2PiSXwY9zv8AlR/5Xf8AVl/6erv/AKrY+JJfBj3O/wCVH/ld/wBWX/p6u/8Aqtj4kl8G&#xA;Pc7/AJUf+V3/AFZf+nq7/wCq2PiSXwY9zv8AlR/5Xf8AVl/6erv/AKrY+JJfBj3O/wCVH/ld/wBW&#xA;X/p6u/8Aqtj4kl8GPc7/AJUf+V3/AFZf+nq7/wCq2PiSXwY9yceW/wAv/Kflq4efRLSSzeQUkUXN&#xA;y8bf60ckjoSOxI2wGRPNMYAcmRZFm7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:OriginalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:388eae05-a4bb-2548-8757-6ea91ee49256</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:388eae05-a4bb-2548-8757-6ea91ee49256</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:c3135852-797b-dc47-a51b-06b0fa7d3a98</stRef:instanceID>
            <stRef:documentID>xmp.did:c3135852-797b-dc47-a51b-06b0fa7d3a98</stRef:documentID>
            <stRef:originalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:38618FC45437E511B4A6C70A2856C401</stEvt:instanceID>
                  <stEvt:when>2015-07-31T10:21:31+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F71D6B4FCD37E511A0AD9C8A0994105B</stEvt:instanceID>
                  <stEvt:when>2015-08-01T04:47:38+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0DFA99B6853BE511B52DF0C326083BD7</stEvt:instanceID>
                  <stEvt:when>2015-08-08T21:56:13+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8D0E244AFF3DE511B52DF0C326083BD7</stEvt:instanceID>
                  <stEvt:when>2015-08-09T13:54:51+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:636C6FDC933EE511B8808BB2FCCC0566</stEvt:instanceID>
                  <stEvt:when>2015-08-09T16:01:21+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:831526FFB23EE511B8808BB2FCCC0566</stEvt:instanceID>
                  <stEvt:when>2015-08-09T23:35:36+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:312302EED63EE511B8808BB2FCCC0566</stEvt:instanceID>
                  <stEvt:when>2015-08-10T00:54:49+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:c3135852-797b-dc47-a51b-06b0fa7d3a98</stEvt:instanceID>
                  <stEvt:when>2015-10-15T06:58:55+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:388eae05-a4bb-2548-8757-6ea91ee49256</stEvt:instanceID>
                  <stEvt:when>2016-01-03T21:18:15+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>422.000010</stDim:w>
            <stDim:h>226.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Белый</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Черный</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>HKS 1 N</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>235</xmpG:green>
                           <xmpG:blue>127</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=128 G=128 B=128</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>128</xmpG:red>
                           <xmpG:green>128</xmpG:green>
                           <xmpG:blue>128</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=153 G=153 B=153</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>153</xmpG:red>
                           <xmpG:green>153</xmpG:green>
                           <xmpG:blue>153</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=204 G=204 B=204</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>204</xmpG:red>
                           <xmpG:green>204</xmpG:green>
                           <xmpG:blue>204</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -226 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 226 li
422 226 li
422 0 li
cp
clp
422 226 mo
0 226 li
0 0 li
422 0 li
422 226 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
159.344 158.004 mo
159.582 158.975 li
161.195 158.579 162.813 158.186 164.438 157.801 cv
164.207 156.828 li
162.579 157.213 160.96 157.607 159.344 158.004 cv
cp
.615686 .862745 .929412 rgb
f
139.9 162.588 mo
140.102 163.566 li
141.738 163.23 143.369 162.873 144.997 162.504 cv
144.776 161.529 li
143.154 161.896 141.53 162.251 139.9 162.588 cv
cp
f
130.086 164.324 mo
130.229 165.314 li
131.819 165.085 133.485 164.816 135.179 164.515 cv
135.004 163.53 li
133.321 163.83 131.666 164.097 130.086 164.324 cv
cp
f
178.917 153.763 mo
179.086 154.749 li
180.766 154.461 182.422 154.205 184.01 153.986 cv
183.873 152.996 li
182.275 153.216 180.608 153.474 178.917 153.763 cv
cp
f
169.086 155.708 mo
169.302 156.685 li
170.919 156.327 172.546 155.982 174.184 155.657 cv
173.989 154.677 li
172.344 155.004 170.71 155.349 169.086 155.708 cv
cp
f
149.636 160.388 mo
149.87 161.36 li
151.49 160.971 153.108 160.572 154.73 160.172 cv
154.489 159.201 li
152.87 159.602 151.253 159.998 149.636 160.388 cv
cp
f
84.4937 151.83 mo
83.7437 152.492 li
84.8555 153.753 86.062 154.955 87.3306 156.065 cv
87.9897 155.314 li
86.7529 154.23 85.5771 153.059 84.4937 151.83 cv
cp
f
91.3447 159.148 mo
92.7334 160.079 94.2041 160.936 95.7153 161.693 cv
96.1636 160.799 li
94.6895 160.061 93.2559 159.226 91.9014 158.317 cv
91.3447 159.148 li
cp
f
121.753 165.24 mo
121.227 165.279 120.706 165.311 120.191 165.337 cv
120.24 166.335 li
120.763 166.31 121.292 166.277 121.827 166.238 cv
122.974 166.153 124.115 166.052 125.25 165.933 cv
125.145 164.939 li
124.021 165.056 122.89 165.157 121.753 165.24 cv
cp
f
188.855 152.401 mo
188.954 153.395 li
190.616 153.23 192.285 153.095 193.916 152.997 cv
193.856 151.999 li
192.212 152.098 190.529 152.232 188.855 152.401 cv
cp
f
100.365 163.677 mo
101.926 164.234 103.557 164.714 105.21 165.101 cv
105.438 164.126 li
103.821 163.748 102.227 163.28 100.701 162.735 cv
100.365 163.677 li
cp
f
110.176 165.987 mo
111.806 166.193 113.496 166.327 115.201 166.383 cv
115.233 165.383 li
113.56 165.328 111.9 165.198 110.302 164.995 cv
110.176 165.987 li
cp
f
78.1553 144.013 mo
78.1855 144.088 78.9165 145.892 80.6479 148.48 cv
81.479 147.923 li
79.811 145.43 79.0903 143.657 79.083 143.64 cv
78.1553 144.013 li
cp
f
238.364 157.976 mo
240.002 158.241 241.651 158.495 243.312 158.739 cv
243.456 157.749 li
241.802 157.507 240.156 157.253 238.524 156.989 cv
238.364 157.976 li
cp
f
228.507 156.216 mo
230.13 156.534 231.773 156.842 233.431 157.137 cv
233.606 156.152 li
231.954 155.857 230.317 155.552 228.698 155.235 cv
228.507 156.216 li
cp
f
268.2 161.439 mo
269.871 161.556 271.539 161.659 273.201 161.749 cv
273.256 160.751 li
271.598 160.661 269.936 160.558 268.271 160.44 cv
268.2 161.439 li
cp
f
278.208 161.979 mo
279.886 162.041 281.556 162.089 283.216 162.12 cv
283.235 161.12 li
281.581 161.089 279.917 161.041 278.245 160.979 cv
278.208 161.979 li
cp
f
258.218 160.583 mo
259.879 160.752 261.543 160.907 263.206 161.049 cv
263.291 160.053 li
261.633 159.911 259.975 159.756 258.319 159.589 cv
258.218 160.583 li
cp
f
337.029 153.411 mo
337.465 154.311 li
339.071 153.536 340.553 152.693 341.868 151.808 cv
341.31 150.978 li
340.033 151.837 338.594 152.656 337.029 153.411 cv
cp
f
318.031 158.98 mo
318.199 159.967 li
319.902 159.676 321.563 159.355 323.132 159.011 cv
322.917 158.034 li
321.363 158.374 319.72 158.693 318.031 158.98 cv
cp
f
218.71 154.285 mo
220.322 154.554 221.968 154.866 223.601 155.212 cv
223.808 154.233 li
222.161 153.885 220.501 153.57 218.874 153.299 cv
218.71 154.285 li
cp
f
248.272 159.429 mo
249.921 159.645 251.579 159.85 253.24 160.043 cv
253.356 159.049 li
251.699 158.857 250.046 158.652 248.4 158.436 cv
248.272 159.429 li
cp
f
298.203 160.965 mo
298.246 161.965 li
299.936 161.892 301.606 161.8 303.252 161.688 cv
303.184 160.689 li
301.546 160.802 299.886 160.894 298.203 160.965 cv
cp
f
288.318 161.171 mo
288.226 161.171 li
288.318 162.171 li
289.972 162.171 291.612 162.154 293.236 162.122 cv
293.217 161.122 li
291.599 161.154 289.966 161.171 288.318 161.171 cv
cp
f
327.742 156.836 mo
328.012 157.799 li
329.69 157.327 331.304 156.811 332.81 156.264 cv
332.468 155.324 li
330.985 155.863 329.396 156.371 327.742 156.836 cv
cp
f
198.872 151.808 mo
198.888 152.808 li
200.529 152.782 202.185 152.789 203.864 152.837 cv
203.892 151.837 li
202.197 151.788 200.525 151.781 198.872 151.808 cv
cp
f
208.833 153.093 mo
210.474 153.215 212.14 153.378 213.784 153.576 cv
213.903 152.584 li
212.245 152.383 210.564 152.219 208.907 152.095 cv
208.833 153.093 li
cp
f
308.152 160.279 mo
308.25 161.275 li
309.949 161.109 311.626 160.92 313.234 160.71 cv
313.105 159.718 li
311.508 159.927 309.842 160.115 308.152 160.279 cv
cp
f
301.203 130.227 mo
302.886 130.362 304.576 130.444 306.229 130.471 cv
306.244 129.471 li
304.613 129.444 302.944 129.363 301.283 129.23 cv
301.203 130.227 li
cp
f
151.417 108.428 mo
156.004 106.436 li
155.607 105.518 li
151.019 107.51 li
151.417 108.428 li
cp
f
160.208 103.547 mo
160.597 104.469 li
162.139 103.817 163.676 103.179 165.21 102.56 cv
164.835 101.632 li
163.297 102.253 161.755 102.894 160.208 103.547 cv
cp
f
146.823 110.412 mo
146.429 109.492 li
144.903 110.146 143.37 110.796 141.827 111.436 cv
142.21 112.359 li
143.756 111.718 145.294 111.066 146.823 110.412 cv
cp
f
103.629 122.871 mo
105.264 122.772 106.949 122.611 108.64 122.391 cv
108.511 121.398 li
106.843 121.616 105.18 121.775 103.569 121.873 cv
103.629 122.871 li
cp
f
118.513 120.509 mo
118.273 119.538 li
116.644 119.941 115.01 120.301 113.416 120.606 cv
113.605 121.589 li
115.216 121.279 116.867 120.916 118.513 120.509 cv
cp
f
123.362 119.191 mo
124.92 118.732 126.53 118.226 128.148 117.686 cv
127.832 116.736 li
126.225 117.273 124.626 117.776 123.079 118.232 cv
123.362 119.191 li
cp
f
316.279 129.895 mo
316.143 128.905 li
314.553 129.123 312.892 129.281 311.207 129.375 cv
311.262 130.373 li
312.974 130.278 314.662 130.118 316.279 129.895 cv
cp
f
132.881 116.025 mo
134.454 115.448 136.015 114.852 137.565 114.24 cv
137.199 113.311 li
135.655 113.918 134.102 114.513 132.537 115.086 cv
132.881 116.025 li
cp
f
281.495 126.447 mo
283.105 126.924 284.736 127.366 286.342 127.763 cv
286.582 126.792 li
284.99 126.399 283.374 125.96 281.778 125.488 cv
281.495 126.447 li
cp
f
263.58 117.418 mo
265.04 118.326 266.462 119.201 267.854 120.031 cv
268.365 119.172 li
266.98 118.346 265.564 117.473 264.107 116.568 cv
263.58 117.418 li
cp
f
233.142 100.205 mo
231.575 99.6172 229.981 99.0596 228.403 98.5469 cv
228.095 99.4981 li
229.657 100.006 231.237 100.559 232.79 101.141 cv
233.142 100.205 li
cp
f
213.809 94.8799 mo
212.175 94.584 210.508 94.3174 208.855 94.0899 cv
208.718 95.0801 li
210.358 95.3067 212.011 95.5703 213.631 95.8643 cv
213.809 94.8799 li
cp
f
218.505 96.8594 mo
220.12 97.2266 221.743 97.6338 223.329 98.0703 cv
223.595 97.1055 li
221.994 96.666 220.356 96.2549 218.727 95.8848 cv
218.505 96.8594 li
cp
f
246.396 107.271 mo
247.829 108.021 249.26 108.803 250.77 109.658 cv
251.262 108.788 li
249.743 107.927 248.303 107.142 246.86 106.385 cv
246.396 107.271 li
cp
f
291.247 128.848 mo
292.902 129.169 294.569 129.448 296.204 129.677 cv
296.343 128.686 li
294.726 128.46 293.075 128.185 291.439 127.865 cv
291.247 128.848 li
cp
f
237.407 102.992 mo
238.911 103.633 240.437 104.322 241.943 105.041 cv
242.373 104.139 li
240.855 103.414 239.316 102.719 237.8 102.072 cv
237.407 102.992 li
cp
f
255.077 112.172 mo
256.538 113.049 257.956 113.919 259.336 114.775 cv
259.863 113.926 li
258.48 113.067 257.058 112.193 255.591 111.314 cv
255.077 112.172 li
cp
f
199.463 94.3682 mo
200.918 94.374 202.365 94.418 203.782 94.5244 cv
203.857 93.5264 li
202.46 93.4219 201.026 93.3682 199.6 93.3682 cv
199.336 93.3672 199.077 93.3692 198.816 93.3731 cv
198.831 94.3731 li
199.042 94.3701 199.252 94.3682 199.463 94.3682 cv
cp
f
169.856 100.744 mo
171.511 100.122 173.045 99.5723 174.547 99.0645 cv
174.227 98.1172 li
172.714 98.6289 171.169 99.1817 169.504 99.8086 cv
169.856 100.744 li
cp
f
179.294 97.5645 mo
180.936 97.085 182.553 96.6572 184.101 96.292 cv
183.872 95.3194 li
182.307 95.6875 180.672 96.1201 179.014 96.6035 cv
179.294 97.5645 li
cp
f
272.216 122.517 mo
273.844 123.391 275.324 124.115 276.741 124.729 cv
277.14 123.812 li
275.748 123.209 274.292 122.497 272.689 121.636 cv
272.216 122.517 li
cp
f
188.968 95.3018 mo
190.625 95.0195 192.279 94.7988 193.883 94.6455 cv
193.789 93.6494 li
192.159 93.8057 190.481 94.0293 188.8 94.3154 cv
188.968 95.3018 li
cp
f
321.24 128.978 mo
323.68 128.398 325.325 127.793 326.088 127.484 cv
325.713 126.557 li
324.976 126.855 323.385 127.44 321.01 128.005 cv
321.24 128.978 li
cp
f
79.4907 117.683 mo
78.0078 116.959 76.5679 116.139 75.21 115.242 cv
74.6592 116.076 li
76.0527 116.996 77.5308 117.839 79.0522 118.581 cv
79.4907 117.683 li
cp
f
83.7261 120.504 mo
85.292 121.037 86.9287 121.49 88.5903 121.85 cv
88.8022 120.873 li
87.1777 120.521 85.5786 120.078 84.0483 119.557 cv
83.7261 120.504 li
cp
f
70.6299 113.017 mo
71.2852 112.261 li
70.0557 111.193 68.8755 110.026 67.7783 108.794 cv
67.0313 109.458 li
68.1572 110.724 69.3677 111.92 70.6299 113.017 cv
cp
f
60.0752 96.1963 mo
58.9741 93.4053 58.5781 91.5147 58.5742 91.4961 cv
57.5947 91.6973 li
57.6108 91.7774 58.0093 93.6836 59.145 96.5635 cv
60.0752 96.1963 li
cp
f
64.7271 104.91 mo
63.7983 103.567 62.9321 102.146 62.1533 100.688 cv
61.2715 101.158 li
62.0679 102.651 62.9541 104.105 63.9048 105.479 cv
64.7271 104.91 li
cp
f
93.5669 122.658 mo
95.1895 122.838 96.8804 122.945 98.5923 122.979 cv
98.6118 121.979 li
96.9302 121.946 95.2695 121.84 93.6763 121.664 cv
93.5669 122.658 li
cp
f
239.165 135.463 mo
240.802 135.916 242.401 136.368 243.97 136.818 cv
244.245 135.857 li
242.675 135.405 241.071 134.953 239.433 134.5 cv
239.165 135.463 li
cp
f
210.006 128.963 mo
211.69 129.144 213.347 129.367 214.933 129.629 cv
215.095 128.643 li
213.491 128.378 211.815 128.151 210.112 127.969 cv
210.006 128.963 li
cp
f
219.809 130.587 mo
221.466 130.961 223.086 131.337 224.67 131.716 cv
224.902 130.743 li
223.315 130.364 221.69 129.986 220.029 129.612 cv
219.809 130.587 li
cp
f
130.735 136.906 mo
130.911 137.891 li
132.532 137.601 134.174 137.297 135.835 136.985 cv
135.651 136.003 li
133.993 136.314 132.354 136.616 130.735 136.906 cv
cp
f
229.517 132.906 mo
231.164 133.322 232.773 133.739 234.348 134.157 cv
234.604 133.19 li
233.025 132.773 231.412 132.354 229.761 131.938 cv
229.517 132.906 li
cp
f
140.564 135.067 mo
140.752 136.05 li
145.665 135.103 li
145.474 134.12 li
140.564 135.067 li
cp
f
180.056 128.456 mo
180.166 129.45 li
181.825 129.268 183.482 129.105 185.135 128.964 cv
185.05 127.968 li
183.39 128.109 181.724 128.273 180.056 128.456 cv
cp
f
170.114 129.755 mo
170.261 130.743 li
171.909 130.498 173.558 130.266 175.207 130.05 cv
175.077 129.058 li
173.422 129.275 171.767 129.508 170.114 129.755 cv
cp
f
160.231 131.368 mo
160.404 132.353 li
162.04 132.065 163.682 131.785 165.327 131.516 cv
165.166 130.529 li
163.517 130.799 161.871 131.079 160.231 131.368 cv
cp
f
190.053 127.611 mo
190.11 128.609 li
191.798 128.514 193.474 128.446 195.09 128.408 cv
195.066 127.408 li
193.439 127.446 191.752 127.515 190.053 127.611 cv
cp
f
200.072 128.382 mo
201.765 128.405 203.439 128.465 205.047 128.558 cv
205.105 127.56 li
203.482 127.466 201.794 127.405 200.085 127.382 cv
200.072 128.382 li
cp
f
302.435 149.171 mo
300.789 149.067 299.12 148.932 297.475 148.768 cv
297.375 149.763 li
299.033 149.928 300.714 150.064 302.372 150.169 cv
302.435 149.171 li
cp
f
322.361 149.18 mo
320.784 149.245 319.123 149.302 317.375 149.35 cv
317.402 150.35 li
319.156 150.302 320.821 150.245 322.402 150.18 cv
322.361 149.18 li
cp
f
248.765 138.212 mo
250.391 138.69 251.984 139.164 253.553 139.632 cv
253.838 138.673 li
252.27 138.205 250.674 137.732 249.046 137.253 cv
248.765 138.212 li
cp
f
351.449 144.775 mo
351.054 145.107 349.957 145.773 347.05 146.508 cv
347.296 147.477 li
350.24 146.732 351.529 146.013 352.092 145.541 cv
351.449 144.775 li
cp
f
337.274 148.126 mo
337.384 149.12 li
339.166 148.923 340.84 148.701 342.357 148.461 cv
342.201 147.473 li
340.698 147.711 339.041 147.931 337.274 148.126 cv
cp
f
312.394 150.445 mo
312.388 149.445 li
311.454 149.448 li
310.08 149.448 308.731 149.43 307.406 149.394 cv
307.379 150.394 li
308.714 150.43 310.07 150.448 311.454 150.448 cv
312.394 150.445 li
cp
f
332.316 148.595 mo
330.78 148.718 329.126 148.832 327.343 148.936 cv
327.401 149.934 li
329.192 149.83 330.854 149.716 332.397 149.591 cv
332.316 148.595 li
cp
f
273.026 144.194 mo
271.428 143.775 269.826 143.34 268.213 142.889 cv
267.943 143.852 li
269.563 144.305 271.17 144.742 272.773 145.161 cv
273.026 144.194 li
cp
f
120.88 138.524 mo
121.023 139.515 li
122.646 139.278 124.297 139.02 125.976 138.742 cv
125.813 137.756 li
124.14 138.032 122.495 138.29 120.88 138.524 cv
cp
f
258.341 141.061 mo
259.961 141.542 261.557 142.015 263.136 142.476 cv
263.415 141.515 li
261.838 141.056 260.244 140.583 258.626 140.102 cv
258.341 141.061 li
cp
f
292.532 148.184 mo
290.917 147.962 289.263 147.705 287.615 147.419 cv
287.443 148.403 li
289.104 148.692 290.77 148.951 292.398 149.174 cv
292.532 148.184 li
cp
f
282.725 146.486 mo
281.165 146.162 279.529 145.798 277.862 145.403 cv
277.632 146.376 li
279.308 146.773 280.953 147.14 282.522 147.465 cv
282.725 146.486 li
cp
f
150.389 133.178 mo
150.575 134.16 li
152.204 133.851 153.843 133.542 155.489 133.239 cv
155.308 132.256 li
153.66 132.56 152.02 132.868 150.389 133.178 cv
cp
f
65.4731 123.65 mo
66.6738 124.848 67.915 126.001 69.1636 127.079 cv
69.8169 126.323 li
68.5869 125.26 67.3628 124.123 66.1792 122.942 cv
65.4731 123.65 li
cp
f
73.0967 130.23 mo
74.4629 131.239 75.8667 132.19 77.2686 133.059 cv
77.7949 132.209 li
76.416 131.355 75.0356 130.418 73.6914 129.425 cv
73.0967 130.23 li
cp
f
95.9717 140.338 mo
96.1348 139.352 li
95.6182 139.266 95.1108 139.17 94.6123 139.063 cv
93.5156 138.829 92.4082 138.553 91.3213 138.243 cv
91.0469 139.204 li
92.1553 139.52 93.2852 139.803 94.4033 140.041 cv
94.9165 140.15 95.4395 140.25 95.9717 140.338 cv
cp
f
53.2676 107.645 mo
53.3032 107.714 54.1675 109.381 55.8994 111.981 cv
56.7314 111.427 li
55.0337 108.878 54.165 107.202 54.1563 107.186 cv
53.2676 107.645 li
cp
f
101.049 139.87 mo
100.997 140.868 li
102.033 140.923 103.125 140.95 104.242 140.95 cv
104.832 140.95 105.429 140.942 106.034 140.928 cv
106.009 139.928 li
104.285 139.97 102.606 139.95 101.049 139.87 cv
cp
f
58.8345 116.08 mo
59.855 117.409 60.9302 118.72 62.0293 119.974 cv
62.7813 119.315 li
61.6963 118.077 60.6353 116.783 59.6274 115.471 cv
58.8345 116.08 li
cp
f
86.6348 136.657 mo
85.1133 136.059 83.5933 135.378 82.1157 134.634 cv
81.6655 135.526 li
83.1704 136.285 84.7192 136.979 86.2686 137.588 cv
86.6348 136.657 li
cp
f
110.976 139.667 mo
111.054 140.663 li
112.614 140.541 114.295 140.375 116.05 140.171 cv
115.934 139.177 li
114.191 139.381 112.523 139.545 110.976 139.667 cv
cp
f
79.3843 100.967 mo
84.6143 92.916 li
83.98 92.5039 li
83.5835 92.7383 83.0596 92.9063 82.4082 93.0069 cv
81.7568 93.1074 81.0718 93.1084 80.3535 93.0098 cv
79.7349 93.9619 li
80.1147 94.0479 80.5703 94.1026 81.1021 94.126 cv
81.6333 94.1504 82.0913 94.126 82.4751 94.0537 cv
78.3994 100.327 li
79.3843 100.967 li
cp
f
85.8052 99.1045 mo
86.4092 97.6563 87.0103 96.7402 87.6074 96.3584 cv
88.0801 96.0606 88.5654 96.0156 89.063 96.2236 cv
89.5688 96.4346 89.8916 96.8496 90.0317 97.4678 cv
90.1714 98.0869 89.9385 99.1231 89.3325 100.576 cv
88.73 102.021 88.1592 102.913 87.6191 103.253 cv
87.0791 103.594 86.5601 103.66 86.0625 103.452 cv
85.5649 103.245 85.2466 102.83 85.1074 102.209 cv
84.9683 101.589 85.2007 100.554 85.8052 99.1045 cv
cp
84.0679 102.592 mo
84.2993 103.404 84.8403 103.988 85.6909 104.343 cv
86.3374 104.612 86.9443 104.662 87.5127 104.491 cv
88.0806 104.321 88.6035 103.962 89.0815 103.414 cv
89.5596 102.867 90.0146 102.076 90.4463 101.04 cv
90.811 100.165 91.0347 99.4424 91.1177 98.8721 cv
91.2002 98.3008 91.1997 97.7871 91.1172 97.3311 cv
91.0342 96.875 90.8535 96.4766 90.5762 96.1367 cv
90.2983 95.7979 89.9229 95.5293 89.4492 95.3311 cv
88.8071 95.0635 88.2021 95.0147 87.6353 95.1826 cv
87.0674 95.3516 86.5439 95.709 86.064 96.2559 cv
85.584 96.8018 85.1265 97.5967 84.6914 98.6406 cv
84 100.298 83.7925 101.615 84.0679 102.592 cv
cp
f
92.8989 101.727 mo
93.2612 100.199 93.7065 99.1992 94.2344 98.7256 cv
94.6528 98.3555 95.1245 98.2334 95.6494 98.3574 cv
96.1821 98.4844 96.5679 98.8418 96.8057 99.4297 cv
97.0435 100.019 96.981 101.078 96.6172 102.609 cv
96.2559 104.133 95.8359 105.105 95.3579 105.528 cv
94.8799 105.951 94.3789 106.101 93.854 105.976 cv
93.3296 105.852 92.9487 105.494 92.7109 104.903 cv
92.4736 104.313 92.5361 103.254 92.8989 101.727 cv
cp
93.6313 106.915 mo
94.3125 107.076 94.9194 107.027 95.4526 106.768 cv
95.9858 106.508 96.4443 106.068 96.8276 105.451 cv
97.2109 104.834 97.5322 103.979 97.7915 102.889 cv
98.0103 101.966 98.1143 101.217 98.104 100.64 cv
98.0933 100.063 98.0103 99.5557 97.855 99.1192 cv
97.6992 98.6826 97.457 98.3184 97.1284 98.0283 cv
96.7993 97.7383 96.3853 97.5332 95.8862 97.4151 cv
95.2095 97.2549 94.6045 97.3027 94.0718 97.5606 cv
93.5391 97.8194 93.0801 98.2559 92.6948 98.8731 cv
92.3091 99.4902 91.9858 100.349 91.7246 101.448 cv
91.3101 103.195 91.3174 104.529 91.7471 105.449 cv
92.1064 106.213 92.7344 106.702 93.6313 106.915 cv
cp
f
100.296 103.208 mo
100.443 101.646 100.746 100.593 101.203 100.051 cv
101.566 99.626 102.016 99.4395 102.553 99.4902 cv
103.098 99.541 103.529 99.8418 103.847 100.392 cv
104.164 100.941 104.249 101.999 104.102 103.566 cv
103.955 105.125 103.674 106.146 103.26 106.632 cv
102.845 107.116 102.369 107.334 101.833 107.283 cv
101.296 107.233 100.869 106.932 100.552 106.38 cv
100.234 105.828 100.149 104.771 100.296 103.208 cv
cp
101.742 108.244 mo
102.439 108.311 103.034 108.177 103.525 107.846 cv
104.018 107.515 104.41 107.017 104.705 106.352 cv
104.999 105.688 105.198 104.796 105.303 103.68 cv
105.392 102.735 105.391 101.979 105.3 101.409 cv
105.21 100.84 105.057 100.349 104.843 99.9375 cv
104.628 99.5274 104.338 99.2002 103.972 98.959 cv
103.606 98.7168 103.168 98.5713 102.657 98.5235 cv
101.964 98.458 101.372 98.5908 100.88 98.9199 cv
100.388 99.249 99.9941 99.7461 99.6982 100.41 cv
99.4019 101.075 99.2012 101.97 99.0952 103.096 cv
98.9268 104.884 99.1196 106.203 99.6729 107.054 cv
100.134 107.762 100.824 108.158 101.742 108.244 cv
cp
f
108.674 101.703 mo
109.121 101.414 109.48 101.129 109.751 100.848 cv
110.07 108.322 li
111.243 108.271 li
110.833 98.6797 li
110.077 98.7119 li
109.891 99.1338 109.562 99.5742 109.089 100.034 cv
108.617 100.494 108.06 100.892 107.417 101.229 cv
107.465 102.362 li
107.824 102.212 108.228 101.992 108.674 101.703 cv
cp
f
115.4 99.8379 mo
115.641 99.334 116.027 99.0361 116.559 98.9463 cv
117.099 98.8545 117.593 99.0332 118.042 99.4824 cv
118.491 99.9307 118.847 100.932 119.11 102.483 cv
119.371 104.026 119.364 105.086 119.089 105.662 cv
118.815 106.238 118.411 106.571 117.879 106.661 cv
117.348 106.751 116.857 106.57 116.408 106.12 cv
115.96 105.669 115.604 104.67 115.341 103.122 cv
115.079 101.574 115.099 100.479 115.4 99.8379 cv
cp
115.734 106.998 mo
116.363 107.562 117.132 107.767 118.041 107.612 cv
118.731 107.496 119.271 107.214 119.66 106.766 cv
120.05 106.318 120.3 105.735 120.413 105.018 cv
120.524 104.3 120.487 103.388 120.299 102.281 cv
120.141 101.347 119.944 100.616 119.71 100.09 cv
119.475 99.5625 119.2 99.1279 118.887 98.7871 cv
118.573 98.4453 118.208 98.2051 117.792 98.0664 cv
117.376 97.9268 116.915 97.9004 116.409 97.9863 cv
115.723 98.1026 115.186 98.3828 114.796 98.8281 cv
114.406 99.2735 114.154 99.8555 114.04 100.574 cv
113.925 101.292 113.963 102.209 114.152 103.323 cv
114.452 105.094 114.979 106.319 115.734 106.998 cv
cp
f
123.12 99.5654 mo
123.496 99.1895 123.786 98.835 123.992 98.5029 cv
125.876 105.743 li
127.012 105.447 li
124.594 96.1553 li
123.862 96.3467 li
123.769 96.7979 123.539 97.2979 123.174 97.8457 cv
122.809 98.3945 122.348 98.9014 121.79 99.3652 cv
122.076 100.464 li
122.396 100.241 122.743 99.9424 123.12 99.5654 cv
cp
f
129.492 96.4385 mo
129.657 95.9053 129.996 95.5547 130.509 95.3887 cv
131.03 95.2188 131.545 95.3242 132.054 95.7022 cv
132.564 96.0811 133.062 97.0195 133.547 98.5166 cv
134.031 100.005 134.179 101.055 133.99 101.664 cv
133.802 102.273 133.451 102.662 132.939 102.828 cv
132.426 102.995 131.915 102.888 131.404 102.507 cv
130.895 102.127 130.397 101.189 129.912 99.6963 cv
129.428 98.2041 129.288 97.1182 129.492 96.4385 cv
cp
130.865 103.475 mo
131.569 103.94 132.36 104.031 133.237 103.746 cv
133.902 103.53 134.396 103.173 134.716 102.673 cv
135.036 102.174 135.199 101.561 135.206 100.834 cv
135.212 100.107 135.042 99.211 134.695 98.1436 cv
134.402 97.2422 134.102 96.5479 133.793 96.0606 cv
133.483 95.5733 133.149 95.1836 132.789 94.8916 cv
132.429 94.5996 132.033 94.4151 131.601 94.3379 cv
131.169 94.2608 130.709 94.3018 130.221 94.46 cv
129.56 94.6748 129.068 95.0313 128.748 95.5283 cv
128.427 96.0254 128.262 96.6377 128.253 97.3652 cv
128.245 98.0928 128.416 98.9942 128.765 100.069 cv
129.319 101.777 130.02 102.912 130.865 103.475 cv
cp
f
137.131 95.1729 mo
137.468 94.7617 137.723 94.3799 137.895 94.0293 cv
140.484 101.048 li
141.586 100.642 li
138.262 91.6348 li
137.553 91.8965 li
137.504 92.3545 137.325 92.875 137.016 93.457 cv
136.707 94.0391 136.298 94.5889 135.789 95.1055 cv
136.182 96.1699 li
136.478 95.917 136.794 95.585 137.131 95.1729 cv
cp
f
143.116 91.542 mo
143.247 90.999 143.563 90.6289 144.065 90.4297 cv
144.574 90.2276 145.094 90.2998 145.627 90.6455 cv
146.159 90.9912 146.715 91.8955 147.295 93.3584 cv
147.872 94.8135 148.086 95.8516 147.937 96.4717 cv
147.788 97.0928 147.462 97.502 146.961 97.7002 cv
146.46 97.8994 145.943 97.8252 145.41 97.4776 cv
144.877 97.1299 144.321 96.2266 143.742 94.7676 cv
143.164 93.3076 142.955 92.2334 143.116 91.542 cv
cp
144.933 98.4766 mo
145.665 98.8975 146.46 98.9375 147.317 98.5977 cv
147.968 98.3399 148.437 97.9512 148.725 97.4326 cv
149.013 96.9141 149.137 96.292 149.097 95.5664 cv
149.057 94.8408 148.831 93.9561 148.417 92.9141 cv
148.067 92.0322 147.723 91.3584 147.384 90.8926 cv
147.044 90.4258 146.686 90.0576 146.308 89.7891 cv
145.93 89.5205 145.523 89.3613 145.087 89.3115 cv
144.651 89.2627 144.195 89.332 143.718 89.5215 cv
143.071 89.7783 142.604 90.1651 142.315 90.6817 cv
142.026 91.1983 141.901 91.8194 141.939 92.5459 cv
141.977 93.2725 142.204 94.1611 142.621 95.2119 cv
143.283 96.8809 144.053 97.9697 144.933 98.4766 cv
cp
f
150.677 89.874 mo
151 89.4512 151.24 89.0606 151.399 88.7041 cv
154.237 95.626 li
155.323 95.1807 li
151.682 86.2979 li
150.981 86.584 li
150.949 87.044 150.789 87.5703 150.501 88.1631 cv
150.213 88.7559 149.824 89.3194 149.333 89.8545 cv
149.764 90.9043 li
150.05 90.6406 150.355 90.2979 150.677 89.874 cv
cp
f
156.764 85.9971 mo
156.889 85.4531 157.201 85.0781 157.7 84.874 cv
158.207 84.667 158.728 84.7324 159.264 85.0723 cv
159.8 85.4121 160.367 86.3106 160.962 87.7676 cv
161.556 89.2158 161.781 90.251 161.638 90.8731 cv
161.496 91.4951 161.175 91.9082 160.676 92.1133 cv
160.177 92.3174 159.659 92.2481 159.123 91.9063 cv
158.585 91.5645 158.02 90.668 157.425 89.2149 cv
156.831 87.7617 156.61 86.6895 156.764 85.9971 cv
cp
156.309 89.6719 mo
156.989 91.334 157.772 92.4141 158.656 92.9111 cv
159.394 93.3242 160.189 93.3555 161.042 93.0059 cv
161.69 92.7412 162.155 92.3477 162.437 91.8262 cv
162.719 91.3037 162.836 90.6807 162.788 89.9551 cv
162.741 89.2305 162.504 88.3486 162.079 87.3106 cv
161.72 86.4326 161.369 85.7627 161.024 85.2998 cv
160.68 84.8379 160.317 84.4736 159.937 84.209 cv
159.556 83.9444 159.147 83.7901 158.71 83.7451 cv
158.274 83.7012 157.818 83.7754 157.344 83.9697 cv
156.7 84.2334 156.236 84.625 155.954 85.1445 cv
155.67 85.6651 155.552 86.2881 155.598 87.0137 cv
155.644 87.7393 155.88 88.626 156.309 89.6719 cv
cp
f
163.714 83.1777 mo
163.846 82.6348 164.163 82.2647 164.665 82.0674 cv
165.174 81.8662 165.695 81.9395 166.227 82.2861 cv
166.758 82.6328 167.312 83.5391 167.889 85.0029 cv
168.462 86.46 168.674 87.4981 168.523 88.1182 cv
168.373 88.7383 168.046 89.1475 167.544 89.3447 cv
167.043 89.542 166.526 89.4668 165.994 89.1182 cv
165.461 88.7686 164.908 87.8643 164.333 86.4033 cv
163.757 84.9434 163.551 83.8682 163.714 83.1777 cv
cp
165.514 90.1162 mo
166.246 90.5381 167.041 90.5811 167.898 90.2432 cv
168.55 89.9863 169.02 89.5986 169.309 89.0811 cv
169.598 88.5635 169.723 87.9414 169.685 87.2158 cv
169.647 86.4902 169.423 85.6045 169.012 84.5615 cv
168.664 83.6787 168.321 83.0049 167.983 82.5371 cv
167.645 82.0703 167.287 81.7012 166.91 81.4317 cv
166.533 81.1621 166.127 81.002 165.69 80.9512 cv
165.255 80.9014 164.798 80.9697 164.321 81.1582 cv
163.673 81.4131 163.205 81.7988 162.915 82.3145 cv
162.626 82.8301 162.499 83.4522 162.535 84.1777 cv
162.57 84.9043 162.796 85.794 163.21 86.8457 cv
163.868 88.5166 164.636 89.6065 165.514 90.1162 cv
cp
f
170.821 80.4434 mo
170.969 79.9043 171.296 79.543 171.803 79.3594 cv
172.318 79.1738 172.836 79.2617 173.358 79.6231 cv
173.879 79.9844 174.408 80.9063 174.943 82.3858 cv
175.475 83.8584 175.657 84.9024 175.489 85.5176 cv
175.321 86.1328 174.983 86.5322 174.476 86.7158 cv
173.969 86.8994 173.454 86.8086 172.932 86.4453 cv
172.41 86.082 171.882 85.1611 171.349 83.6856 cv
170.815 82.209 170.639 81.1279 170.821 80.4434 cv
cp
172.425 87.4297 mo
173.144 87.8731 173.937 87.9375 174.804 87.624 cv
175.462 87.3858 175.943 87.0117 176.247 86.502 cv
176.551 85.9932 176.693 85.375 176.676 84.6485 cv
176.658 83.9219 176.459 83.0313 176.078 81.9756 cv
175.755 81.084 175.432 80.4004 175.107 79.9238 cv
174.782 79.4473 174.435 79.0684 174.065 78.7881 cv
173.696 78.5078 173.294 78.3369 172.86 78.2735 cv
172.426 78.211 171.967 78.2666 171.485 78.4414 cv
170.831 78.6777 170.352 79.0498 170.047 79.5576 cv
169.743 80.0654 169.598 80.6826 169.614 81.4102 cv
169.629 82.1367 169.83 83.0322 170.214 84.0957 cv
170.824 85.7842 171.561 86.8955 172.425 87.4297 cv
cp
f
178.09 77.9258 mo
178.263 77.3945 178.607 77.0498 179.122 76.8906 cv
179.646 76.7285 180.159 76.8408 180.663 77.2266 cv
181.167 77.6123 181.651 78.5567 182.116 80.0606 cv
182.578 81.5567 182.711 82.6074 182.514 83.2149 cv
182.317 83.8213 181.961 84.2051 181.446 84.3643 cv
180.931 84.5235 180.421 84.4092 179.917 84.0205 cv
179.412 83.6328 178.928 82.6895 178.464 81.1895 cv
178.001 79.6895 177.876 78.6016 178.09 77.9258 cv
cp
179.363 84.9805 mo
180.061 85.457 180.85 85.5586 181.731 85.2861 cv
182.399 85.0791 182.898 84.7285 183.225 84.2344 cv
183.552 83.7393 183.724 83.1289 183.741 82.4024 cv
183.757 81.6758 183.6 80.7764 183.269 79.7041 cv
182.989 78.7988 182.698 78.1006 182.396 77.6094 cv
182.094 77.1172 181.765 76.7227 181.409 76.4258 cv
181.053 76.1289 180.66 75.9385 180.229 75.8555 cv
179.798 75.7725 179.337 75.8067 178.847 75.958 cv
178.183 76.1631 177.687 76.5127 177.358 77.0049 cv
177.031 77.4981 176.857 78.1084 176.839 78.835 cv
176.82 79.5625 176.978 80.4658 177.312 81.5459 cv
177.842 83.2617 178.525 84.4063 179.363 84.9805 cv
cp
f
186.24 76.9356 mo
186.627 76.5703 186.927 76.2246 187.142 75.8985 cv
188.822 83.1875 li
189.966 82.9238 li
187.81 73.5684 li
187.072 73.7383 li
186.966 74.1875 186.723 74.6807 186.343 75.2188 cv
185.962 75.7569 185.487 76.25 184.917 76.6992 cv
185.172 77.8047 li
185.498 77.5908 185.854 77.3018 186.24 76.9356 cv
cp
f
193.557 74.2217 mo
193.824 73.7315 194.225 73.4551 194.761 73.3926 cv
195.305 73.3291 195.789 73.5332 196.214 74.0049 cv
196.639 74.4766 196.942 75.4942 197.124 77.0576 cv
197.306 78.6123 197.243 79.6699 196.939 80.2305 cv
196.634 80.791 196.214 81.1026 195.679 81.1651 cv
195.143 81.2276 194.663 81.0225 194.237 80.5479 cv
193.813 80.0752 193.51 79.0586 193.328 77.499 cv
193.147 75.9404 193.223 74.8477 193.557 74.2217 cv
cp
193.519 81.3906 mo
194.117 81.9863 194.875 82.2305 195.79 82.124 cv
196.485 82.043 197.039 81.7891 197.451 81.3623 cv
197.863 80.9365 198.145 80.3672 198.294 79.6563 cv
198.442 78.9444 198.452 78.0322 198.323 76.918 cv
198.213 75.9766 198.055 75.2363 197.848 74.6973 cv
197.641 74.1592 197.39 73.7119 197.094 73.3545 cv
196.798 72.9971 196.446 72.7383 196.038 72.5772 cv
195.63 72.417 195.171 72.3662 194.661 72.4258 cv
193.97 72.5059 193.419 72.7588 193.006 73.1836 cv
192.594 73.6074 192.312 74.1758 192.16 74.8867 cv
192.009 75.5986 191.999 76.5156 192.13 77.6387 cv
192.337 79.4229 192.8 80.6729 193.519 81.3906 cv
cp
f
201.133 76.876 mo
201.207 75.3076 201.461 74.2422 201.893 73.6797 cv
202.235 73.2393 202.677 73.0322 203.215 73.0576 cv
203.763 73.084 204.207 73.3643 204.55 73.8985 cv
204.892 74.4326 205.025 75.4863 204.95 77.0586 cv
204.875 78.6221 204.643 79.6553 204.25 80.1592 cv
203.858 80.6631 203.393 80.9014 202.855 80.876 cv
202.316 80.8506 201.876 80.5694 201.533 80.0322 cv
201.191 79.4961 201.058 78.4434 201.133 76.876 cv
cp
202.809 81.8399 mo
203.508 81.8731 204.096 81.7129 204.571 81.3594 cv
205.048 81.0059 205.417 80.4902 205.681 79.8125 cv
205.943 79.1358 206.102 78.2363 206.155 77.1162 cv
206.2 76.169 206.165 75.4131 206.048 74.8486 cv
205.932 74.2832 205.757 73.8008 205.523 73.3994 cv
205.29 72.999 204.985 72.6865 204.608 72.461 cv
204.231 72.2363 203.787 72.1123 203.274 72.0879 cv
202.579 72.0537 201.994 72.2139 201.518 72.5654 cv
201.042 72.917 200.671 73.4317 200.406 74.1084 cv
200.141 74.7861 199.981 75.6895 199.928 76.8184 cv
199.842 78.6123 200.095 79.9209 200.687 80.7461 cv
201.181 81.4317 201.888 81.7959 202.809 81.8399 cv
cp
f
211.287 75.2227 mo
210.058 82.6016 li
211.216 82.7949 li
212.793 73.3242 li
212.047 73.2002 li
211.777 73.5742 211.364 73.9365 210.808 74.2891 cv
210.251 74.6416 209.623 74.916 208.925 75.1133 cv
208.738 76.2324 li
209.121 76.1592 209.561 76.0274 210.058 75.8369 cv
210.554 75.6465 210.964 75.4414 211.287 75.2227 cv
cp
f
217.813 76.4531 mo
216.274 83.7744 li
217.423 84.0156 li
219.397 74.6201 li
218.656 74.4639 li
218.371 74.8262 217.943 75.1719 217.372 75.501 cv
216.801 75.8291 216.162 76.0772 215.457 76.2442 cv
215.224 77.3555 li
215.608 77.2988 216.053 77.1856 216.558 77.0156 cv
217.062 76.8457 217.481 76.6582 217.813 76.4531 cv
cp
f
224.324 77.9795 mo
222.45 85.2227 li
223.586 85.5166 li
225.992 76.2217 li
225.26 76.0322 li
224.958 76.3809 224.515 76.7061 223.929 77.0088 cv
223.343 77.3106 222.693 77.5283 221.981 77.6631 cv
221.696 78.7617 li
222.084 78.7227 222.533 78.6299 223.045 78.4844 cv
223.557 78.3379 223.982 78.1699 224.324 77.9795 cv
cp
f
230.766 79.8203 mo
228.531 86.96 li
229.651 87.3106 li
232.52 78.1485 li
231.798 77.9219 li
231.479 78.2559 231.02 78.5586 230.42 78.8301 cv
229.819 79.1026 229.16 79.2881 228.441 79.3867 cv
228.103 80.4697 li
228.491 80.4502 228.944 80.3809 229.463 80.2598 cv
229.981 80.1397 230.415 79.9932 230.766 79.8203 cv
cp
f
235.206 84.2266 mo
235.768 82.7608 236.342 81.8281 236.928 81.4287 cv
237.392 81.1182 237.875 81.0586 238.379 81.252 cv
238.89 81.4483 239.225 81.8535 239.383 82.4678 cv
239.541 83.082 239.338 84.125 238.774 85.5947 cv
238.215 87.0557 237.67 87.9649 237.14 88.3203 cv
236.61 88.6768 236.094 88.7578 235.59 88.5645 cv
235.087 88.3721 234.756 87.9668 234.599 87.3506 cv
234.441 86.7334 234.645 85.6924 235.206 84.2266 cv
cp
235.244 89.4658 mo
235.898 89.7168 236.507 89.7481 237.069 89.5615 cv
237.633 89.374 238.145 89 238.606 88.4395 cv
239.068 87.8779 239.5 87.0742 239.901 86.0264 cv
240.24 85.1406 240.443 84.4121 240.509 83.8389 cv
240.575 83.2656 240.56 82.752 240.464 82.2988 cv
240.367 81.8447 240.176 81.4531 239.889 81.1211 cv
239.601 80.7901 239.218 80.5322 238.738 80.3486 cv
238.089 80.0996 237.482 80.0684 236.921 80.2529 cv
236.358 80.4385 235.846 80.8106 235.382 81.3711 cv
234.918 81.9317 234.483 82.7393 234.079 83.7949 cv
233.437 85.4717 233.268 86.7949 233.571 87.7637 cv
233.826 88.5684 234.384 89.1367 235.244 89.4658 cv
cp
f
243.192 92.6836 mo
247.215 83.9668 li
246.528 83.6494 li
246.17 83.9395 245.675 84.1797 245.045 84.3731 cv
244.415 84.5654 243.737 84.6651 243.012 84.6699 cv
242.536 85.7002 li
242.924 85.7315 243.383 85.7207 243.912 85.668 cv
244.441 85.6152 244.892 85.5254 245.261 85.3994 cv
242.126 92.1924 li
243.192 92.6836 li
cp
f
248.802 95.5596 mo
253.332 87.0947 li
252.665 86.7373 li
252.29 87.0059 251.782 87.2168 251.142 87.3721 cv
250.501 87.5274 249.818 87.5869 249.094 87.5488 cv
248.559 88.5498 li
248.944 88.6026 249.403 88.6192 249.935 88.5977 cv
250.466 88.5762 250.92 88.5137 251.297 88.4092 cv
247.767 95.0049 li
248.802 95.5596 li
cp
f
254.839 93.584 mo
255.67 92.2529 256.411 91.4463 257.064 91.167 cv
257.578 90.9492 258.064 90.9834 258.522 91.2695 cv
258.986 91.5596 259.237 92.0215 259.275 92.6543 cv
259.313 93.2881 258.915 94.2725 258.082 95.6074 cv
257.253 96.9356 256.545 97.7236 255.957 97.9717 cv
255.368 98.2197 254.846 98.2012 254.389 97.916 cv
253.931 97.6309 253.684 97.1699 253.648 96.5352 cv
253.61 95.8994 254.008 94.916 254.839 93.584 cv
cp
253.878 98.7344 mo
254.472 99.1055 255.063 99.2529 255.65 99.1768 cv
256.239 99.1006 256.814 98.8311 257.374 98.3682 cv
257.934 97.9053 258.512 97.1983 259.105 96.2471 cv
259.607 95.4424 259.945 94.7656 260.119 94.2158 cv
260.293 93.666 260.376 93.1582 260.368 92.6953 cv
260.36 92.2315 260.247 91.8096 260.028 91.4297 cv
259.81 91.0488 259.482 90.7236 259.047 90.4522 cv
258.457 90.083 257.868 89.9365 257.281 90.0108 cv
256.693 90.085 256.119 90.3535 255.557 90.8145 cv
254.994 91.2764 254.414 91.9863 253.815 92.9453 cv
252.865 94.4688 252.446 95.7354 252.56 96.7442 cv
252.656 97.583 253.096 98.2471 253.878 98.7344 cv
cp
f
263.558 95.4043 mo
264.085 95.2178 264.567 95.2803 265.008 95.5928 cv
265.455 95.9092 265.679 96.3848 265.679 97.0195 cv
265.68 97.6543 265.225 98.6133 264.315 99.8975 cv
263.409 101.175 262.655 101.92 262.054 102.133 cv
261.452 102.346 260.932 102.297 260.492 101.984 cv
260.052 101.673 259.832 101.199 259.833 100.563 cv
259.834 99.9258 260.288 98.9678 261.196 97.6875 cv
262.104 96.4063 262.892 95.6455 263.558 95.4043 cv
cp
258.735 100.707 mo
258.782 101.551 259.182 102.239 259.934 102.772 cv
260.505 103.177 261.086 103.358 261.678 103.317 cv
262.27 103.275 262.858 103.041 263.445 102.611 cv
264.032 102.183 264.649 101.511 265.299 100.596 cv
265.847 99.8223 266.224 99.166 266.43 98.627 cv
266.636 98.0889 266.749 97.5869 266.768 97.124 cv
266.787 96.6611 266.699 96.2324 266.503 95.8408 cv
266.307 95.4483 265.999 95.1035 265.58 94.8067 cv
265.013 94.4043 264.434 94.2236 263.844 94.2627 cv
263.253 94.3027 262.663 94.5371 262.075 94.9639 cv
261.486 95.3916 260.865 96.0674 260.212 96.9893 cv
259.173 98.4541 258.681 99.6934 258.735 100.707 cv
cp
f
270.61 101.192 mo
266.029 107.106 li
266.958 107.825 li
272.837 100.235 li
272.238 99.7715 li
271.824 99.9736 271.288 100.098 270.631 100.144 cv
269.974 100.19 269.291 100.134 268.582 99.9766 cv
267.888 100.873 li
268.259 100.99 268.708 101.083 269.236 101.15 cv
269.764 101.219 270.222 101.232 270.61 101.192 cv
cp
f
275.712 105.215 mo
271.057 111.071 li
271.976 111.802 li
277.95 104.286 li
277.357 103.815 li
276.94 104.012 276.403 104.129 275.745 104.167 cv
275.087 104.205 274.405 104.141 273.699 103.974 cv
272.993 104.861 li
273.362 104.983 273.812 105.082 274.338 105.156 cv
274.865 105.23 275.322 105.25 275.712 105.215 cv
cp
f
280.696 109.108 mo
276.186 115.077 li
277.122 115.785 li
282.911 108.125 li
282.308 107.669 li
281.896 107.875 281.361 108.006 280.704 108.06 cv
280.048 108.114 279.364 108.066 278.654 107.917 cv
277.97 108.822 li
278.343 108.935 278.793 109.021 279.321 109.083 cv
279.851 109.145 280.309 109.153 280.696 109.108 cv
cp
f
285.658 112.055 mo
286.168 111.826 286.655 111.85 287.118 112.125 cv
287.59 112.404 287.852 112.86 287.903 113.493 cv
287.955 114.125 287.58 115.118 286.777 116.473 cv
285.979 117.818 285.288 118.622 284.706 118.884 cv
284.123 119.146 283.601 119.138 283.137 118.863 cv
282.673 118.588 282.416 118.134 282.365 117.499 cv
282.314 116.864 282.689 115.872 283.489 114.522 cv
284.29 113.173 285.014 112.35 285.658 112.055 cv
cp
281.282 117.732 mo
281.398 118.569 281.852 119.223 282.645 119.693 cv
283.246 120.051 283.841 120.185 284.427 120.095 cv
285.014 120.006 285.582 119.723 286.132 119.248 cv
286.682 118.772 287.242 118.053 287.815 117.088 cv
288.298 116.272 288.621 115.588 288.782 115.034 cv
288.944 114.48 289.016 113.972 288.997 113.509 cv
288.98 113.045 288.856 112.626 288.629 112.251 cv
288.401 111.876 288.066 111.558 287.626 111.296 cv
287.027 110.94 286.436 110.808 285.851 110.895 cv
285.265 110.982 284.696 111.264 284.145 111.737 cv
283.593 112.211 283.028 112.935 282.452 113.907 cv
281.536 115.451 281.146 116.727 281.282 117.732 cv
cp
f
292.994 115.991 mo
290.955 123.189 li
292.085 123.509 li
294.701 114.271 li
293.973 114.065 li
293.664 114.407 293.213 114.723 292.621 115.012 cv
292.028 115.3 291.374 115.503 290.658 115.621 cv
290.349 116.714 li
290.737 116.684 291.189 116.601 291.703 116.467 cv
292.219 116.332 292.648 116.174 292.994 115.991 cv
cp
f
298.364 116.271 mo
298.679 115.81 299.105 115.573 299.644 115.564 cv
300.191 115.555 300.653 115.806 301.03 116.316 cv
301.406 116.828 301.608 117.87 301.635 119.444 cv
301.662 121.009 301.496 122.056 301.138 122.584 cv
300.779 123.111 300.33 123.381 299.791 123.39 cv
299.252 123.399 298.795 123.147 298.418 122.634 cv
298.042 122.12 297.841 121.079 297.814 119.51 cv
297.786 117.94 297.97 116.861 298.364 116.271 cv
cp
299.808 124.354 mo
300.508 124.343 301.084 124.145 301.536 123.761 cv
301.988 123.377 302.324 122.839 302.542 122.146 cv
302.761 121.452 302.86 120.545 302.842 119.423 cv
302.825 118.476 302.74 117.724 302.587 117.167 cv
302.435 116.611 302.229 116.141 301.97 115.756 cv
301.711 115.371 301.386 115.079 300.995 114.879 cv
300.605 114.68 300.153 114.584 299.641 114.593 cv
298.944 114.604 298.371 114.802 297.919 115.183 cv
297.466 115.564 297.13 116.103 296.909 116.795 cv
296.689 117.488 296.588 118.4 296.607 119.53 cv
296.638 121.326 296.976 122.616 297.619 123.401 cv
298.157 124.053 298.887 124.371 299.808 124.354 cv
cp
f
306.056 117.174 mo
306.484 116.859 306.827 116.555 307.081 116.258 cv
307.827 123.702 li
308.995 123.585 li
308.038 114.032 li
307.285 114.107 li
307.123 114.539 306.819 114.997 306.374 115.483 cv
305.929 115.97 305.396 116.398 304.773 116.771 cv
304.886 117.9 li
305.236 117.73 305.626 117.487 306.056 117.174 cv
cp
f
312.819 115.067 mo
313.065 114.564 313.452 114.271 313.984 114.184 cv
314.525 114.096 315.019 114.277 315.464 114.729 cv
315.91 115.182 316.259 116.184 316.512 117.737 cv
316.763 119.282 316.749 120.342 316.47 120.916 cv
316.191 121.49 315.785 121.82 315.254 121.907 cv
314.722 121.993 314.232 121.81 313.786 121.355 cv
313.34 120.902 312.991 119.9 312.739 118.351 cv
312.487 116.802 312.515 115.707 312.819 115.067 cv
cp
313.105 122.229 mo
313.73 122.798 314.498 123.008 315.408 122.859 cv
316.1 122.747 316.641 122.469 317.033 122.023 cv
317.426 121.579 317.681 120.998 317.798 120.281 cv
317.914 119.563 317.883 118.651 317.703 117.544 cv
317.551 116.608 317.358 115.876 317.128 115.348 cv
316.897 114.819 316.625 114.384 316.314 114.04 cv
316.002 113.696 315.639 113.453 315.224 113.312 cv
314.809 113.17 314.348 113.141 313.842 113.223 cv
313.154 113.334 312.615 113.611 312.223 114.054 cv
311.829 114.497 311.573 115.077 311.455 115.795 cv
311.336 116.512 311.367 117.429 311.548 118.545 cv
311.837 120.317 312.355 121.546 313.105 122.229 cv
cp
f
320.025 113.773 mo
320.244 113.26 320.618 112.946 321.145 112.833 cv
321.681 112.719 322.183 112.876 322.65 113.305 cv
323.117 113.734 323.516 114.719 323.846 116.258 cv
324.173 117.788 324.212 118.847 323.962 119.435 cv
323.712 120.021 323.323 120.371 322.796 120.484 cv
322.269 120.597 321.771 120.438 321.303 120.007 cv
320.835 119.575 320.436 118.593 320.108 117.058 cv
319.779 115.522 319.752 114.428 320.025 113.773 cv
cp
320.667 120.913 mo
321.319 121.449 322.097 121.621 322.998 121.428 cv
323.683 121.281 324.21 120.977 324.579 120.513 cv
324.949 120.049 325.175 119.456 325.256 118.733 cv
325.337 118.012 325.26 117.102 325.025 116.005 cv
324.827 115.078 324.6 114.356 324.342 113.84 cv
324.085 113.324 323.792 112.901 323.464 112.574 cv
323.136 112.246 322.761 112.021 322.34 111.9 cv
321.918 111.78 321.456 111.773 320.954 111.881 cv
320.274 112.026 319.749 112.33 319.379 112.791 cv
319.008 113.253 318.781 113.846 318.698 114.567 cv
318.615 115.29 318.691 116.204 318.928 117.31 cv
319.304 119.066 319.884 120.267 320.667 120.913 cv
cp
f
348.134 137.26 mo
347.738 133.001 li
347.561 131.092 345.869 129.688 343.962 129.865 cv
333.115 130.874 li
331.206 131.05 329.803 132.742 329.98 134.65 cv
330.185 136.849 li
325.898 137.457 320.07 138.056 312.136 138.554 cv
290.043 139.943 273.148 132.776 256.803 125.847 cv
246.923 121.658 237.59 117.701 227.219 115.503 cv
211.092 112.087 184.376 116.99 158.538 121.734 cv
139.428 125.242 119.668 128.87 104.75 128.994 cv
104.565 128.996 104.382 128.996 104.199 128.996 cv
70.6528 128.996 59.1147 103.445 59.0015 103.186 cv
57.167 103.983 li
57.2861 104.256 69.4043 131.302 104.767 130.994 cv
119.857 130.869 139.705 127.226 158.899 123.701 cv
184.546 118.992 211.064 114.122 226.805 117.46 cv
236.987 119.618 246.233 123.538 256.023 127.688 cv
271.167 134.108 286.78 140.73 306.596 140.729 cv
308.445 140.729 310.335 140.671 312.261 140.55 cv
320.094 140.058 325.955 139.464 330.369 138.836 cv
330.376 138.91 li
330.554 140.817 332.245 142.222 334.152 142.045 cv
344.998 141.036 li
346.908 140.859 348.311 139.167 348.134 137.26 cv
cp
f
406.772 127.557 mo
406.772 129.058 405.832 130.274 404.676 130.274 cv
385.766 130.274 li
384.608 130.274 383.67 129.058 383.67 127.557 cv
383.67 83.6817 li
383.67 82.1817 384.608 80.9649 385.766 80.9649 cv
404.676 80.9649 li
405.832 80.9649 406.772 82.1817 406.772 83.6817 cv
406.772 127.557 li
cp
.231373 .341176 .396078 rgb
f
403.108 87.3535 mo
387.473 87.3535 li
387.473 85.4727 li
403.108 85.4727 li
403.108 87.3535 li
cp
.505882 .580392 .615686 rgb
f
404.484 126.728 mo
386.02 126.728 li
386.02 121.986 li
404.484 121.986 li
404.484 126.728 li
cp
.192157 .239216 .258824 rgb
f
398.568 95.917 mo
398.568 97.6973 397.102 99.1416 395.291 99.1416 cv
393.48 99.1416 392.013 97.6973 392.013 95.917 cv
392.013 94.1348 393.48 92.6914 395.291 92.6914 cv
397.102 92.6914 398.568 94.1348 398.568 95.917 cv
cp
f
396.014 93.8682 mo
396.014 94.8018 li
396.457 95.0537 396.769 95.5117 396.769 96.0567 cv
396.769 96.8613 396.113 97.5166 395.308 97.5166 cv
394.501 97.5166 393.846 96.8613 393.846 96.0567 cv
393.846 95.5117 394.157 95.0557 394.6 94.8037 cv
394.6 93.8682 li
393.674 94.169 392.997 95.0313 392.997 96.0567 cv
392.997 97.3291 394.034 98.3652 395.308 98.3652 cv
396.581 98.3652 397.617 97.3291 397.617 96.0567 cv
397.617 95.0293 396.941 94.169 396.014 93.8682 cv
cp
.368627 .858824 .345098 rgb
f
395.609 95.3477 mo
395.004 95.3477 li
395.004 92.9912 li
395.609 92.9912 li
395.609 95.3477 li
cp
f
348.491 114.326 mo
347.348 121.495 li
362.38 121.312 li
361.397 114.597 li
348.491 114.326 li
cp
.231373 .341176 .396078 rgb
f
382.028 109.712 mo
327.63 109.701 li
327.607 77.7276 li
327.607 76.7998 328.384 76.0469 329.344 76.0469 cv
380.274 76.0469 li
381.232 76.0469 382.009 76.7998 382.009 77.7276 cv
382.028 109.712 li
cp
f
327.628 109.608 mo
327.628 114.15 li
327.628 115.079 328.407 115.832 329.365 115.832 cv
380.293 115.832 li
381.253 115.832 382.031 115.079 382.031 114.15 cv
382.031 109.608 li
327.628 109.608 li
cp
.384314 .47451 .517647 rgb
f
364.98 121.984 mo
364.98 122.358 364.802 122.66 364.578 122.66 cv
345.039 122.66 li
344.816 122.66 344.637 122.358 344.637 121.984 cv
344.637 121.984 li
344.637 121.613 344.816 121.312 345.039 121.312 cv
364.578 121.312 li
364.802 121.312 364.98 121.613 364.98 121.984 cv
364.98 121.984 li
cp
.231373 .341176 .396078 rgb
f
379.658 106.796 mo
330.455 106.796 li
330.455 98.4199 li
330.455 78.5869 li
379.69 78.5889 li
379.658 106.796 li
cp
.368627 .858824 .345098 rgb
f
375.552 129.591 mo
325.686 129.591 li
331.11 124.379 li
370.239 124.379 li
375.552 129.591 li
cp
.384314 .47451 .517647 rgb
f
375.552 130.956 mo
325.686 130.956 li
325.686 129.591 li
375.552 129.591 li
375.552 130.956 li
cp
.231373 .341176 .396078 rgb
f
337.389 128.009 mo
339.422 128.007 li
339.551 127.45 li
337.603 127.452 li
337.389 128.009 li
cp
.898039 .898039 .898039 rgb
f
334.899 128.01 mo
336.981 128.009 li
337.193 127.452 li
335.189 127.455 li
334.899 128.01 li
cp
f
339.938 127.448 mo
339.81 128.007 li
357.564 127.996 li
357.483 127.427 li
339.938 127.448 li
cp
f
332.163 128.011 mo
334.463 128.01 li
334.754 127.456 li
332.51 127.459 li
332.163 128.011 li
cp
f
371.404 127.408 mo
369.486 127.412 li
369.797 127.988 li
371.828 127.987 li
371.404 127.408 li
cp
f
366.246 127.414 mo
366.459 127.989 li
369.359 127.988 li
369.051 127.412 li
366.246 127.414 li
cp
f
329.655 128.025 mo
331.705 128.011 li
332.051 127.459 li
330.165 127.476 li
329.655 128.025 li
cp
f
357.862 127.426 mo
357.942 127.996 li
360.402 127.994 li
360.3 127.423 li
357.862 127.426 li
cp
f
360.683 127.422 mo
360.786 127.994 li
363.072 127.992 li
362.94 127.421 li
360.683 127.422 li
cp
f
363.327 127.419 mo
363.46 127.991 li
366.054 127.99 li
365.839 127.414 li
363.327 127.419 li
cp
f
341.61 126.764 mo
340.087 126.767 li
339.945 127.199 li
341.51 127.199 li
341.61 126.764 li
cp
f
343.901 126.763 mo
341.997 126.764 li
341.897 127.199 li
343.842 127.199 li
343.901 126.763 li
cp
f
346.314 126.759 mo
344.28 126.761 li
344.221 127.199 li
346.299 127.199 li
346.314 126.759 li
cp
f
338.12 127.199 mo
339.547 127.199 li
339.689 126.767 li
338.268 126.77 li
338.12 127.199 li
cp
f
348.635 126.755 mo
346.69 126.758 li
346.675 127.199 li
348.63 127.199 li
348.635 126.755 li
cp
f
364.844 127.199 mo
371.318 127.199 li
370.942 126.728 li
364.624 126.733 li
364.844 127.199 li
cp
f
337.865 126.77 mo
336.262 126.771 li
336.059 127.199 li
337.719 127.199 li
337.865 126.77 li
cp
f
356.131 127.199 mo
356.069 126.746 li
354.017 126.748 li
354.031 127.199 li
356.131 127.199 li
cp
f
351.315 126.752 mo
349.011 126.755 li
349.005 127.199 li
351.32 127.199 li
351.315 126.752 li
cp
f
362.275 127.199 mo
362.117 126.738 li
360.696 126.739 li
360.846 127.199 li
362.275 127.199 li
cp
f
335.837 126.772 mo
330.664 126.773 li
330.349 127.204 li
335.634 127.199 li
335.837 126.772 li
cp
f
364.363 127.199 mo
364.145 126.736 li
362.519 126.737 li
362.678 127.199 li
364.363 127.199 li
cp
f
353.656 127.199 mo
353.641 126.749 li
351.69 126.752 li
351.694 127.199 li
353.656 127.199 li
cp
f
358.757 126.743 mo
358.862 127.199 li
360.447 127.199 li
360.297 126.74 li
358.757 126.743 li
cp
f
358.475 127.199 mo
358.37 126.743 li
356.448 126.745 li
356.51 127.199 li
358.475 127.199 li
cp
f
340.719 126.082 mo
339.197 126.084 li
339.056 126.517 li
340.619 126.517 li
340.719 126.082 li
cp
f
343.011 126.079 mo
341.106 126.082 li
341.008 126.517 li
342.951 126.517 li
343.011 126.079 li
cp
f
345.422 126.075 mo
343.391 126.079 li
343.33 126.517 li
345.409 126.517 li
345.422 126.075 li
cp
f
338.796 126.084 mo
337.378 126.086 li
337.23 126.517 li
338.655 126.517 li
338.796 126.084 li
cp
f
347.744 126.073 mo
345.797 126.075 li
345.783 126.517 li
347.74 126.517 li
347.744 126.073 li
cp
f
336.976 126.088 mo
335.373 126.089 li
335.169 126.517 li
336.829 126.517 li
336.976 126.088 li
cp
f
355.179 126.063 mo
353.126 126.066 li
353.14 126.517 li
355.24 126.517 li
355.179 126.063 li
cp
f
350.425 126.068 mo
348.12 126.072 li
348.115 126.517 li
350.43 126.517 li
350.425 126.068 li
cp
f
359.806 126.058 mo
359.955 126.517 li
361.385 126.517 li
361.228 126.056 li
359.806 126.058 li
cp
f
334.946 126.089 mo
331.19 126.082 li
330.818 126.559 li
334.749 126.569 li
334.946 126.089 li
cp
f
363.254 126.052 mo
361.629 126.056 li
361.787 126.517 li
363.475 126.517 li
363.254 126.052 li
cp
f
352.75 126.066 mo
350.801 126.067 li
350.806 126.517 li
352.767 126.517 li
352.75 126.066 li
cp
f
359.406 126.058 mo
357.867 126.059 li
357.971 126.517 li
359.557 126.517 li
359.406 126.058 li
cp
f
357.48 126.059 mo
355.558 126.063 li
355.621 126.517 li
357.585 126.517 li
357.48 126.059 li
cp
f
365.929 126.517 mo
370.826 126.521 li
370.458 126.059 li
365.693 126.049 li
365.929 126.517 li
cp
f
365.264 126.051 mo
363.678 126.052 li
363.898 126.517 li
365.496 126.517 li
365.264 126.051 li
cp
f
339.689 125.347 mo
338.165 125.35 li
338.024 125.781 li
339.589 125.781 li
339.689 125.347 li
cp
f
341.98 125.344 mo
340.074 125.347 li
339.975 125.781 li
341.919 125.781 li
341.98 125.344 li
cp
f
344.391 125.341 mo
342.36 125.344 li
342.3 125.781 li
344.377 125.781 li
344.391 125.341 li
cp
f
337.766 125.35 mo
336.346 125.352 li
336.198 125.781 li
337.624 125.781 li
337.766 125.35 li
cp
f
346.713 125.337 mo
344.768 125.341 li
344.752 125.781 li
346.709 125.781 li
346.713 125.337 li
cp
f
335.943 125.352 mo
334.342 125.354 li
334.138 125.781 li
335.796 125.781 li
335.943 125.352 li
cp
f
354.211 125.781 mo
354.147 125.328 li
352.096 125.329 li
352.11 125.781 li
354.211 125.781 li
cp
f
349.394 125.334 mo
347.088 125.337 li
347.083 125.781 li
349.399 125.781 li
349.394 125.334 li
cp
f
360.354 125.781 mo
360.196 125.32 li
358.774 125.321 li
358.926 125.781 li
360.354 125.781 li
cp
f
333.915 125.354 mo
331.69 125.345 li
331.361 125.773 li
333.712 125.781 li
333.915 125.354 li
cp
f
362.442 125.781 mo
362.222 125.317 li
360.598 125.319 li
360.755 125.781 li
362.442 125.781 li
cp
f
351.733 125.781 mo
351.72 125.332 li
349.769 125.334 li
349.773 125.781 li
351.733 125.781 li
cp
f
358.524 125.781 mo
358.375 125.321 li
356.835 125.325 li
356.941 125.781 li
358.524 125.781 li
cp
f
356.552 125.781 mo
356.448 125.325 li
354.527 125.328 li
354.59 125.781 li
356.552 125.781 li
cp
f
364.467 125.781 mo
364.232 125.315 li
362.647 125.316 li
362.868 125.781 li
364.467 125.781 li
cp
f
370.351 125.769 mo
370.02 125.307 li
366.817 125.313 li
367.079 125.758 li
370.351 125.769 li
cp
f
366.633 125.764 mo
366.368 125.313 li
364.661 125.314 li
364.897 125.781 li
366.633 125.764 li
cp
f
355.24 106.796 mo
330.455 106.796 li
330.455 78.5869 li
355.24 78.5869 li
355.24 106.796 li
cp
.619608 .913725 .607843 rgb
f
343.93 134.284 mo
343.82 134.355 li
343.751 134.256 li
343.93 134.284 li
cp
343.331 137.636 mo
342.974 135.732 li
340.558 136.186 li
340.648 136.671 li
337.764 137.36 li
337.478 135.841 li
340.827 135.229 342.425 134.919 343.198 134.756 cv
342.939 134.925 li
343.348 135.553 li
345.996 133.84 li
342.648 133.331 li
342.534 134.07 li
342.705 134.096 li
341.561 134.322 339.501 134.706 337.339 135.102 cv
337.038 133.505 li
339.772 132.991 li
339.998 133.327 340.421 133.519 340.862 133.435 cv
341.442 133.325 341.828 132.792 341.725 132.245 cv
341.623 131.697 341.069 131.339 340.49 131.449 cv
340.049 131.532 339.721 131.859 339.635 132.254 cv
336.162 132.907 li
336.599 135.236 li
335.371 135.461 334.144 135.683 333.067 135.875 cv
333.198 136.613 li
334.54 136.372 335.712 136.16 336.737 135.975 cv
337.17 138.274 li
340.786 137.408 li
340.915 138.091 li
343.331 137.636 li
cp
.615686 .862745 .929412 rgb
f
41.8164 114.143 mo
40.6563 121.419 li
55.9126 121.232 li
54.9141 114.417 li
41.8164 114.143 li
cp
.898039 .898039 .898039 rgb
f
41.6104 115.281 mo
41.4888 116.186 li
55.166 116.186 li
55.1055 115.524 li
41.6104 115.281 li
cp
.686275 .686275 .686275 rgb
f
75.856 109.459 mo
20.6436 109.448 li
20.6201 76.9971 li
20.6201 76.0547 21.4077 75.291 22.3833 75.291 cv
74.0737 75.291 li
75.0474 75.291 75.835 76.0547 75.835 76.9971 cv
75.856 109.459 li
cp
.231373 .341176 .396078 rgb
f
20.6416 109.354 mo
20.6416 113.965 li
20.6416 114.906 21.4316 115.671 22.4043 115.671 cv
74.0933 115.671 li
75.0679 115.671 75.8579 114.906 75.8579 113.965 cv
75.8579 109.354 li
20.6416 109.354 li
cp
1 1 1 rgb
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
20.6416 109.354 mo
20.6416 113.965 li
20.6416 114.906 21.4316 115.671 22.4043 115.671 cv
74.0933 115.671 li
75.0679 115.671 75.8579 114.906 75.8579 113.965 cv
75.8579 109.354 li
20.6416 109.354 li
cp
.615686 .862745 .929412 rgb
@
58.5532 121.916 mo
58.5532 122.295 58.3701 122.601 58.145 122.601 cv
38.312 122.601 li
38.0869 122.601 37.9038 122.295 37.9038 121.916 cv
37.9038 121.916 li
37.9038 121.538 38.0869 121.232 38.312 121.232 cv
58.145 121.232 li
58.3701 121.232 58.5532 121.538 58.5532 121.916 cv
58.5532 121.916 li
cp
1 1 1 rgb
f
58.5532 121.916 mo
58.5532 122.295 58.3701 122.601 58.145 122.601 cv
38.312 122.601 li
38.0869 122.601 37.9038 122.295 37.9038 121.916 cv
37.9038 121.916 li
37.9038 121.538 38.0869 121.232 38.312 121.232 cv
58.145 121.232 li
58.3701 121.232 58.5532 121.538 58.5532 121.916 cv
58.5532 121.916 li
cp
.615686 .862745 .929412 rgb
@
73.4492 106.5 mo
23.5122 106.5 li
23.5122 97.9981 li
23.5122 77.8692 li
73.48 77.8711 li
73.4492 106.5 li
cp
.6 .756863 .776471 rgb
f
69.2808 129.636 mo
18.6694 129.636 li
24.1753 124.346 li
63.8896 124.346 li
69.2808 129.636 li
cp
1 1 1 rgb
f
69.2808 129.636 mo
18.6694 129.636 li
24.1753 124.346 li
63.8896 124.346 li
69.2808 129.636 li
cp
.615686 .862745 .929412 rgb
@
69.2808 131.02 mo
18.6694 131.02 li
18.6694 129.636 li
69.2808 129.636 li
69.2808 131.02 li
cp
.898039 .898039 .898039 rgb
f
30.5493 128.029 mo
32.6118 128.027 li
32.7417 127.462 li
30.7646 127.464 li
30.5493 128.029 li
cp
f
28.021 128.031 mo
30.1348 128.029 li
30.3501 127.465 li
28.3149 127.468 li
28.021 128.031 li
cp
f
33.1348 127.461 mo
33.0054 128.027 li
51.0234 128.017 li
50.9429 127.438 li
33.1348 127.461 li
cp
f
25.2441 128.032 mo
27.5791 128.031 li
27.874 127.469 li
25.5962 127.471 li
25.2441 128.032 li
cp
f
65.0728 127.42 mo
63.126 127.424 li
63.4404 128.008 li
65.5015 128.007 li
65.0728 127.42 li
cp
f
59.8364 127.427 mo
60.0532 128.01 li
62.9966 128.009 li
62.6831 127.424 li
59.8364 127.427 li
cp
f
22.6992 128.047 mo
24.7788 128.032 li
25.1313 127.472 li
23.2158 127.488 li
22.6992 128.047 li
cp
f
51.3281 127.438 mo
51.4087 128.017 li
53.9067 128.015 li
53.8018 127.436 li
51.3281 127.438 li
cp
f
54.1895 127.435 mo
54.2944 128.015 li
56.6157 128.013 li
56.4824 127.433 li
54.1895 127.435 li
cp
f
56.8755 127.431 mo
57.0088 128.012 li
59.6416 128.011 li
59.4238 127.427 li
56.8755 127.431 li
cp
f
34.832 126.766 mo
33.2866 126.769 li
33.1426 127.208 li
34.7305 127.208 li
34.832 126.766 li
cp
f
37.1582 126.765 mo
35.2251 126.766 li
35.124 127.208 li
37.0977 127.208 li
37.1582 126.765 li
cp
f
39.6064 126.761 mo
37.5435 126.763 li
37.4829 127.208 li
39.5923 127.208 li
39.6064 126.761 li
cp
f
31.291 127.208 mo
32.7378 127.208 li
32.8818 126.77 li
31.4404 126.771 li
31.291 127.208 li
cp
f
41.9629 126.757 mo
39.9873 126.76 li
39.9722 127.208 li
41.9575 127.208 li
41.9629 126.757 li
cp
f
58.4131 127.208 mo
64.9849 127.208 li
64.604 126.729 li
58.1895 126.735 li
58.4131 127.208 li
cp
f
31.0322 126.771 mo
29.4048 126.773 li
29.1982 127.208 li
30.8828 127.208 li
31.0322 126.771 li
cp
f
49.5703 127.208 mo
49.5073 126.748 li
47.4243 126.75 li
47.4395 127.208 li
49.5703 127.208 li
cp
f
44.6836 126.753 mo
42.3438 126.757 li
42.3384 127.208 li
44.688 127.208 li
44.6836 126.753 li
cp
f
55.8071 127.208 mo
55.647 126.74 li
54.2041 126.741 li
54.3555 127.208 li
55.8071 127.208 li
cp
f
28.9727 126.774 mo
23.7236 126.776 li
23.4023 127.213 li
28.7666 127.208 li
28.9727 126.774 li
cp
f
57.9263 127.208 mo
57.7026 126.737 li
56.0537 126.739 li
56.2153 127.208 li
57.9263 127.208 li
cp
f
47.0586 127.208 mo
47.0435 126.751 li
45.0635 126.753 li
45.0688 127.208 li
47.0586 127.208 li
cp
f
52.2354 126.744 mo
52.3428 127.208 li
53.9507 127.208 li
53.7993 126.742 li
52.2354 126.744 li
cp
f
51.9492 127.208 mo
51.8428 126.744 li
49.8921 126.746 li
49.9556 127.208 li
51.9492 127.208 li
cp
f
33.9282 126.074 mo
32.3828 126.076 li
32.2393 126.515 li
33.8262 126.515 li
33.9282 126.074 li
cp
f
36.2549 126.07 mo
34.3213 126.073 li
34.2202 126.515 li
36.1934 126.515 li
36.2549 126.07 li
cp
f
38.7017 126.067 mo
36.6396 126.07 li
36.5786 126.515 li
38.6875 126.515 li
38.7017 126.067 li
cp
f
31.9771 126.076 mo
30.5366 126.078 li
30.3867 126.515 li
31.8345 126.515 li
31.9771 126.076 li
cp
f
41.0586 126.064 mo
39.0825 126.067 li
39.0684 126.515 li
41.0542 126.515 li
41.0586 126.064 li
cp
f
30.1284 126.079 mo
28.5015 126.081 li
28.2944 126.515 li
29.9795 126.515 li
30.1284 126.079 li
cp
f
48.603 126.055 mo
46.5205 126.058 li
46.5352 126.515 li
48.667 126.515 li
48.603 126.055 li
cp
f
43.7788 126.061 mo
41.4399 126.063 li
41.4346 126.515 li
43.7842 126.515 li
43.7788 126.061 li
cp
f
53.3003 126.049 mo
53.4521 126.515 li
54.9033 126.515 li
54.7427 126.047 li
53.3003 126.049 li
cp
f
28.0693 126.081 mo
24.2559 126.074 li
23.8789 126.557 li
27.8696 126.568 li
28.0693 126.081 li
cp
f
56.7993 126.044 mo
55.1499 126.047 li
55.3115 126.515 li
57.0229 126.515 li
56.7993 126.044 li
cp
f
46.1392 126.058 mo
44.1597 126.06 li
44.165 126.515 li
46.1553 126.515 li
46.1392 126.058 li
cp
f
52.8945 126.049 mo
51.3315 126.051 li
51.438 126.515 li
53.0464 126.515 li
52.8945 126.049 li
cp
f
50.9395 126.051 mo
48.9883 126.055 li
49.0522 126.515 li
51.0459 126.515 li
50.9395 126.051 li
cp
f
59.5146 126.515 mo
64.4849 126.52 li
64.1113 126.051 li
59.2759 126.04 li
59.5146 126.515 li
cp
f
58.8389 126.042 mo
57.2305 126.044 li
57.4541 126.515 li
59.0767 126.515 li
58.8389 126.042 li
cp
f
32.8818 125.328 mo
31.3354 125.33 li
31.1929 125.769 li
32.7808 125.769 li
32.8818 125.328 li
cp
f
35.208 125.325 mo
33.2739 125.328 li
33.1729 125.769 li
35.147 125.769 li
35.208 125.325 li
cp
f
37.6553 125.321 mo
35.5933 125.324 li
35.5322 125.769 li
37.6411 125.769 li
37.6553 125.321 li
cp
f
30.9307 125.33 mo
29.4893 125.332 li
29.3403 125.769 li
30.7871 125.769 li
30.9307 125.33 li
cp
f
40.0117 125.317 mo
38.0371 125.321 li
38.022 125.769 li
40.0073 125.769 li
40.0117 125.317 li
cp
f
29.0811 125.332 mo
27.4551 125.335 li
27.248 125.769 li
28.9321 125.769 li
29.0811 125.332 li
cp
f
47.6206 125.769 mo
47.5576 125.309 li
45.4741 125.311 li
45.4893 125.769 li
47.6206 125.769 li
cp
f
42.7324 125.314 mo
40.3926 125.317 li
40.3872 125.769 li
42.7378 125.769 li
42.7324 125.314 li
cp
f
53.856 125.769 mo
53.6963 125.301 li
52.2529 125.303 li
52.4058 125.769 li
53.856 125.769 li
cp
f
27.0225 125.336 mo
24.7646 125.326 li
24.4307 125.761 li
26.8159 125.769 li
27.0225 125.336 li
cp
f
55.9766 125.769 mo
55.752 125.298 li
54.1035 125.3 li
54.2642 125.769 li
55.9766 125.769 li
cp
f
45.1074 125.769 mo
45.0933 125.313 li
43.1133 125.314 li
43.1177 125.769 li
45.1074 125.769 li
cp
f
52 125.769 mo
51.8481 125.303 li
50.2852 125.306 li
50.3926 125.769 li
52 125.769 li
cp
f
49.9985 125.769 mo
49.8921 125.306 li
47.9429 125.309 li
48.0059 125.769 li
49.9985 125.769 li
cp
f
58.0313 125.769 mo
57.7935 125.296 li
56.1831 125.297 li
56.4077 125.769 li
58.0313 125.769 li
cp
f
64.0029 125.755 mo
63.666 125.286 li
60.4155 125.293 li
60.6816 125.745 li
64.0029 125.755 li
cp
f
60.229 125.751 mo
59.9609 125.293 li
58.229 125.295 li
58.4678 125.769 li
60.229 125.751 li
cp
f
48.667 106.5 mo
23.5122 106.5 li
23.5122 77.8692 li
48.667 77.8692 li
48.667 106.5 li
cp
.67451 .858824 .898039 rgb
f
64.5874 107.676 mo
37.6011 107.676 li
37.6011 88.8369 li
64.5874 88.8369 li
64.5874 107.676 li
cp
1 1 1 rgb
f
46.9282 96.5752 mo
38.4063 89.5322 li
38.4063 106.472 li
46.9282 96.5752 li
cp
.368627 .858824 .345098 rgb
f
62.7793 89.4395 mo
40.041 89.4395 li
51.0571 98.542 li
62.7793 89.4395 li
cp
f
63.6855 90.1426 mo
55.4248 96.5586 li
63.6855 106.163 li
63.6855 90.1426 li
cp
f
54.5454 97.2432 mo
51.0347 99.9688 li
47.7861 97.2842 li
39.5371 106.863 li
62.8208 106.863 li
54.5454 97.2432 li
cp
f
365.222 163.518 mo
338 163.518 li
338 143.352 li
365.222 143.352 li
365.222 163.518 li
cp
1 1 1 rgb
f
347.58 151.874 mo
339.057 144.831 li
339.057 161.77 li
347.58 151.874 li
cp
1 .796078 .290196 rgb
f
363.429 144.737 mo
340.691 144.737 li
351.707 153.842 li
363.429 144.737 li
cp
f
364.335 145.442 mo
356.076 151.858 li
364.335 161.462 li
364.335 145.442 li
cp
f
355.195 152.541 mo
351.686 155.268 li
348.436 152.582 li
340.188 162.163 li
363.471 162.163 li
355.195 152.541 li
cp
f
299.725 161.462 mo
283.487 161.462 li
283.487 150.64 li
299.725 150.64 li
299.725 161.462 li
cp
1 1 1 rgb
f
289.218 155.282 mo
284.234 151.43 li
284.234 160.695 li
289.218 155.282 li
cp
1 .796078 .290196 rgb
f
298.483 151.379 mo
285.19 151.379 li
291.631 156.358 li
298.483 151.379 li
cp
f
299.013 151.764 mo
294.185 155.273 li
299.013 160.527 li
299.013 151.764 li
cp
f
293.669 155.648 mo
291.619 157.139 li
289.72 155.67 li
284.897 160.911 li
298.508 160.911 li
293.669 155.648 li
cp
f
110.958 130.78 mo
110.958 131.848 110.092 132.714 109.023 132.714 cv
107.381 132.714 li
108.002 135.65 li
104.567 132.714 li
98.1567 132.714 li
97.0884 132.714 96.2217 131.848 96.2217 130.78 cv
96.2217 123.04 li
96.2217 121.972 97.0884 121.105 98.1567 121.105 cv
109.023 121.105 li
110.092 121.105 110.958 121.972 110.958 123.04 cv
110.958 130.78 li
cp
1 .611765 .290196 rgb
f
307.944 137.253 mo
307.944 138.321 307.078 139.188 306.011 139.188 cv
304.367 139.188 li
304.989 142.124 li
301.554 139.188 li
295.144 139.188 li
294.075 139.188 293.209 138.321 293.209 137.253 cv
293.209 129.513 li
293.209 128.445 294.075 127.579 295.144 127.579 cv
306.011 127.579 li
307.078 127.579 307.944 128.445 307.944 129.513 cv
307.944 137.253 li
cp
.368627 .858824 .345098 rgb
f
118.489 158.615 mo
99.6006 158.615 li
99.6006 145.351 li
109.887 145.351 li
111.851 147.327 li
118.489 147.224 li
118.489 158.615 li
cp
1 .796078 .290196 rgb
f
117.122 149.497 mo
100.897 149.497 li
100.897 148.153 li
117.122 148.153 li
117.122 149.497 li
cp
1 1 1 rgb
f
78.6191 143.826 mo
78.6191 144.643 77.9175 145.307 77.0518 145.307 cv
55.7837 145.307 li
54.9175 145.307 54.2158 144.643 54.2158 143.826 cv
54.2158 140.455 li
54.2158 139.638 54.9175 138.974 55.7837 138.974 cv
77.0518 138.974 li
77.9175 138.974 78.6191 139.638 78.6191 140.455 cv
78.6191 143.826 li
cp
.231373 .341176 .396078 rgb
f
78.6187 151.649 mo
78.6187 152.466 77.917 153.129 77.0518 153.129 cv
55.7847 153.129 li
54.9175 153.129 54.2158 152.466 54.2158 151.649 cv
54.2158 148.277 li
54.2158 147.46 54.9175 146.796 55.7847 146.796 cv
77.0518 146.796 li
77.917 146.796 78.6187 147.46 78.6187 148.277 cv
78.6187 151.649 li
cp
f
78.6191 159.605 mo
78.6191 160.422 77.9175 161.086 77.0518 161.086 cv
55.7847 161.086 li
54.918 161.086 54.2163 160.422 54.2163 159.605 cv
54.2163 156.235 li
54.2163 155.418 54.918 154.753 55.7847 154.753 cv
77.0518 154.753 li
77.9175 154.753 78.6191 155.418 78.6191 156.235 cv
78.6191 159.605 li
cp
f
60.644 143.259 mo
56.0869 143.259 li
56.0869 140.663 li
60.644 140.663 li
60.644 143.259 li
cp
1 .796078 .290196 rgb
f
60.644 151.099 mo
56.0869 151.099 li
56.0869 148.503 li
60.644 148.503 li
60.644 151.099 li
cp
f
60.644 159.219 mo
56.0869 159.219 li
56.0869 156.621 li
60.644 156.621 li
60.644 159.219 li
cp
f
142.539 169.126 mo
144.202 169.126 li
142.051 162.798 140.916 156.134 140.916 149.372 cv
140.916 114.994 169.109 87.0244 203.772 87.0244 cv
238.427 87.0244 266.624 114.994 266.624 149.372 cv
266.624 156.132 265.47 162.799 263.314 169.126 cv
265.003 169.126 li
267.049 162.908 268.164 156.27 268.164 149.372 cv
268.164 114.088 239.336 85.4854 203.772 85.4854 cv
168.207 85.4854 139.379 114.088 139.379 149.372 cv
139.379 156.27 140.495 162.907 142.539 169.126 cv
cp
f
203.772 88 mo
169.644 88 141.878 115.538 141.878 149.386 cv
141.878 156.151 143.034 162.817 145.22 169.14 cv
262.296 169.14 li
264.488 162.819 265.662 156.149 265.662 149.386 cv
265.662 115.538 237.897 88 203.772 88 cv
cp
1 1 1 rgb
f
204.135 88 mo
170.008 88.001 142.243 115.539 142.243 149.386 cv
142.243 156.151 143.399 162.817 145.585 169.14 cv
204.135 169.14 li
204.135 88 li
cp
1 .984314 .843137 rgb
f
168.824 169.126 mo
167.233 164.928 166.355 160.376 166.355 155.619 cv
166.355 134.697 183.205 117.676 203.922 117.676 cv
224.636 117.676 241.491 134.697 241.491 155.619 cv
241.491 160.376 240.611 164.928 239.023 169.126 cv
241.706 169.126 li
243.193 164.898 244.008 160.355 244.008 155.619 cv
244.008 133.283 226.023 115.115 203.922 115.115 cv
181.82 115.115 163.837 133.283 163.837 155.619 cv
163.837 160.355 164.654 164.898 166.138 169.126 cv
168.824 169.126 li
cp
.858824 .858824 .858824 rgb
f
229.942 122.604 mo
238.915 112.618 li
236.08 110.359 li
227.012 120.453 li
228.013 121.131 228.992 121.838 229.942 122.604 cv
cp
1 .796078 .290196 rgb
f
178.571 118.357 mo
170.046 108.336 li
167.148 110.523 li
175.387 120.207 li
176.427 119.54 177.495 118.935 178.571 118.357 cv
cp
.858824 .858824 .858824 rgb
f
191.898 113.596 mo
187.453 100.403 li
183.912 101.465 li
188.279 114.426 li
189.475 114.095 190.687 113.835 191.898 113.596 cv
cp
f
218.386 115.891 mo
223.999 102.085 li
220.537 100.835 li
214.898 114.702 li
216.076 115.06 217.243 115.442 218.386 115.891 cv
cp
1 .878431 .572549 rgb
f
205.183 112.848 mo
205.144 98.0713 li
201.433 98.0791 li
201.467 112.675 li
202.709 112.68 203.946 112.743 205.183 112.848 cv
cp
1 .917647 .717647 rgb
f
244.692 159.454 mo
255.802 161.271 li
256.435 157.826 li
245.025 155.96 li
244.959 157.127 244.863 158.293 244.692 159.454 cv
cp
.937255 .0117647 .145098 rgb
f
244.171 145.351 mo
256.357 143.076 li
255.638 139.648 li
243.277 141.954 li
243.635 143.077 243.923 144.209 244.171 145.351 cv
cp
.956863 0 .160784 rgb
f
237.135 130.088 mo
237.857 131.05 238.533 132.028 239.156 133.03 cv
250.522 127.173 li
248.741 124.108 li
237.135 130.088 li
cp
.937255 .541176 .270588 rgb
f
166.998 126.807 mo
157.18 121.596 li
155.356 124.639 li
165.442 129.994 li
165.922 128.917 166.427 127.849 166.998 126.807 cv
cp
.858824 .858824 .858824 rgb
f
162.475 140.26 mo
150.184 138.566 li
149.648 142.023 li
162.11 143.742 li
162.176 142.572 162.304 141.416 162.475 140.26 cv
cp
f
163.678 156.859 mo
163.34 155.728 163.05 154.593 162.824 153.45 cv
150.03 155.39 li
150.619 158.839 li
163.678 156.859 li
cp
f
192.282 169.661 mo
204.864 169.661 li
242.237 119.155 li
192.282 169.661 li
cp
f
187.904 169.661 mo
242.237 119.155 li
200.486 169.661 li
187.904 169.661 li
cp
.937255 .0117647 .145098 rgb
f
272.837 174.332 mo
133.749 174.332 li
142.539 169.126 li
265.003 169.126 li
272.837 174.332 li
cp
.231373 .341176 .396078 rgb
f
312.973 94.2803 mo
312.55 94.2803 312.145 94.332 311.743 94.4053 cv
310.675 89.7002 306.477 86.1836 301.452 86.1836 cv
301.251 86.1836 301.057 86.2022 300.86 86.2139 cv
298.651 82.3467 294.496 79.7344 289.726 79.7344 cv
283.012 79.7344 277.51 84.9014 276.958 91.4736 cv
272.244 91.8574 268.537 95.3418 268.537 99.6309 cv
268.537 104.179 272.682 107.866 277.795 107.866 cv
280.826 107.866 310.774 108.002 312.973 108.002 cv
316.76 108.002 319.832 104.932 319.832 101.142 cv
319.832 97.3526 316.76 94.2803 312.973 94.2803 cv
cp
.615686 .862745 .929412 rgb
f
299.224 92.7959 mo
299.224 93.2783 298.809 93.6719 298.296 93.6719 cv
285.705 93.6719 li
285.192 93.6719 284.777 93.2783 284.777 92.7959 cv
284.777 90.7998 li
284.777 90.3154 285.192 89.9229 285.705 89.9229 cv
298.296 89.9229 li
298.809 89.9229 299.224 90.3154 299.224 90.7998 cv
299.224 92.7959 li
cp
.231373 .341176 .396078 rgb
f
299.224 97.4258 mo
299.224 97.9092 298.808 98.3027 298.296 98.3027 cv
285.706 98.3027 li
285.192 98.3027 284.777 97.9092 284.777 97.4258 cv
284.777 95.4297 li
284.777 94.9463 285.192 94.5527 285.706 94.5527 cv
298.296 94.5527 li
298.808 94.5527 299.224 94.9463 299.224 95.4297 cv
299.224 97.4258 li
cp
f
299.224 102.137 mo
299.224 102.62 298.809 103.013 298.296 103.013 cv
285.706 103.013 li
285.192 103.013 284.777 102.62 284.777 102.137 cv
284.777 100.142 li
284.777 99.6572 285.192 99.2637 285.706 99.2637 cv
298.296 99.2637 li
298.809 99.2637 299.224 99.6572 299.224 100.142 cv
299.224 102.137 li
cp
f
285.885 90.9229 mo
285.885 92.459 li
288.583 92.459 li
288.583 90.9229 li
285.885 90.9229 li
cp
1 .796078 .290196 rgb
f
285.885 97.1006 mo
288.583 97.1006 li
288.583 95.5635 li
285.885 95.5635 li
285.885 97.1006 li
cp
f
285.885 101.907 mo
288.583 101.907 li
288.583 100.369 li
285.885 100.369 li
285.885 101.907 li
cp
f
132.174 80.8838 mo
131.906 80.8838 131.648 80.916 131.395 80.9629 cv
130.718 77.9824 128.06 75.7559 124.877 75.7559 cv
124.75 75.7559 124.627 75.7676 124.502 75.7744 cv
123.103 73.3262 120.472 71.6709 117.449 71.6709 cv
113.197 71.6709 109.713 74.9434 109.362 79.1065 cv
106.377 79.3486 104.029 81.5557 104.029 84.2735 cv
104.029 87.1533 106.654 89.4883 109.893 89.4883 cv
111.813 89.4883 130.781 89.5752 132.174 89.5752 cv
134.572 89.5752 136.518 87.6299 136.518 85.2295 cv
136.518 82.8291 134.572 80.8838 132.174 80.8838 cv
cp
.615686 .862745 .929412 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.1.0
%%For: (XyJIuraH) ()
%%Title: (3 03 1.eps)
%%CreationDate: 1/3/2016 9:18 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj9?%pHO$imWJ1cU^Jc]&1gtMCnN@_.4l5@FJkr^0p%R#=ZY$hKE#`%c]R97]BM(R^7J"AaKh+Q5%g-30.g`Sh0QV0^W\V8
%h+08`=qd-t(h]g*k4%-7QBn+DNkBOBXgH?Om8l1<?b1^#;<l`FHKVN_.!b3'Y#0&Cg)I$H:UcqLG;%p4S,2&CX,VU,frA8fL3k\f
%elf7Uonn`0c0_<Og5q$NRCr>i)t&:^n@L4fB=g#L3qbTT(_X38eX);>ZFOkbe#:BG)_$q*dLJ,dB#,;,+:^sp5C[qejf_^,rTFfd
%(&;#3F=J\!'c'"KN5BK;^TCEXM#(uI56JZMQH`r`\JjV8f5t57Vp_N]^p&1L%kaaMhM'^dG1?:c@4h9.=\3$8O&H9X/8<;>3"1D[
%O.ef'04G.irb%5Ks'`=ODtom#bS4"S*$47I&#q*u,6c#Zn0%nCKafWW5pA6_]NVZ,G!$'4C7/d7nsp^pg?S^m^BM+sX03+QV[Z;G
%e='n:1p^+c!,spS?kSX2W4jL0O8#F/rNhW4m^Zo4V,<CiFcJ!P#A@KF4\E7;53c1^esgu^"!giWNag.[U[1uhb2Ma,W[f5+RBc[h
%CRho:9<SGRDcF?iPDtfDpt&hpCO>JF&(+'m-O3ALIaWHk#>,sf#UU36Qr-Hm<f.RQF3`iAM@_;T;SQXV"l&NN(W`^GJG;F2E`oA[
%X:Yi-D-;UJs%]Um%abeD[FGdJOgH/)kP5)LG[^<:N`Ys&5j2?g59`TeHN+iZ0%A(T7Le%t`]pdNMun[/g:5X6_a!3>BVO82PE?#]
%Y8V@IV2c#B^@b*(Zd0,^?+@DnC35rWoo$iW>K`FTj4m;@oh(cE$Q*)C*LqV35?:\*;T;W_/[kk"^u%GKZs.7I9P>""g%&&+.blQS
%K\mU@43mdI[%N>o##o<1rkkcpRZW>W'";1B]lRE&3/o"\h7D?5aU:DhH^,[l`<DEYXbUJmRK`%7JOo>Y=f8H]0bkn!-?Rf+F?A?!
%naOd5gihIp90hi9[0hD6^f;m-WlLr:jZF<D&)GMG(]ggHD?kenJ+h8T'ujtYph0!,;6@3@6%dRJi-W\qFhCcRTWX%&lF*lo-]LSQ
%Uo15c083MBFjrQ1dn*A]=9iebFrSc<J>p_XgUsPNL:'8,HI1&qHXibJ,cNu/a50HTB7kEP;Em@$$KVWYck4u?Cn9U9geR)@[+'BE
%D,n4TZA@k\W74*NUlN'PNYh8e;/;mVR6&'&RokV,MijH:]@IkPRA_-/>8qKhXAlVLXg->qb7u^>)l_pXot"?0j)V,W;M:IbbOBQ:
%11eY<Dgf3FC[:[G6iBL`C7#2]/GO0O(q/D=-Y$\HS<5af`#s_0@M2-]_MKBn31LkL,rtb]8V%ST5m]CtG[f0sS-nQ.%*d3?c-l_G
%RYFC-dq#=eE`8@6l'PU0BBIHj=_%_hEA>HanB2!A=b^KjNoaDp'k')[3EbS.=r+T#j]EBNCZVZ"2`Tc\S"+JV$Z:$@B6]a*Gb,^r
%;8<kK&QG-L#to4\KIn1+&Qt50q:iAH5nn1R-8pR=Bg\f,ATM).[dCjX@qY2!S[SuMd4PJDL]c+G9SYV^!/EW;.liWREO,)U3P!nR
%S@hdN:XLV'J8?*dJa$f@pqUu,0^&oR0*;<t5iW_PIdk+Rr8ce"LJL3bMO@ohI%`)&5>1X(b)[u99R\PgiUS5Sa-Ieppgeu;r!uuT
%ktbW8$Mm\#TA-iH7PUT5J[dsU0Sp2[)jp[FH(uMP&L+"m,LCK7-&<4l8C9E%LEM:cXFt9/o]#!+/OmcgL>]07Ao*HqXHc06=@J(;
%&3V$'F8M7kOM[)KOi1*MML6CX,QWpQ,S>kY;^2UQFSf)A9aXZ>U5!)K"LrIt5W#nL=W1Lp1*9dIJhVn`&7l2]$>EA=AKlrZTA-h#
%p7e1,n)m0-aD+B_!f[fB)*M.*0G3T0-mB35UCj3h0E_sroY_;/pirGM&&!ca4G8MeGjl;"#noKPI-oqZ(EXI4*aC*&"*(*c18njP
%*b5t2O?iqiK_XID+2-mZ9?j7$&S`C4^rIQaX9_QfX@*U%Qj@]\Mk,ffRQaFCU&Y,@(.mRSouGQ((0EoAG)sXq('c^'^J+iACH[H?
%7NJDrN+c6o7O0K7#TPZ/g'/aE&\4j^MGf?e^oInQ6_kIuUSbDA%NmM;80i^O$de&:jpHVs'/1bLLkYq/"[J4Wa:WrhS5Xss;a:<f
%IV(mKMkHA1:l,6]PXS6,1NG=m!9O>^:'QYF/sjm!5eWAoR0Tc&Jg*I23M7"jq-6+U0BA#pUHf2@p]?gm*tuV&Yu&X\F'q`u!(S!H
%J/>=3/"/n1,XnJ)///He64V47"s@]6!p+AcK6CpZ'T@DO>0]JG=m3uL!udk?%_XY8#DLPB\RM]AA';\*1GDiK7a,ohN89.)OIQ?;
%X8k'!_7VNW3ud>'@AXIq94?D%$*^W;TKs&9OTBd\J:%h^_*CaDaGg4@;ui?/JV7TbH8a-3"!ni3PCd<`+K5O+fc8(N#,E*U#ZTtP
%HNkI_+RoY,IfZoA%^\M+\75W%3,j`U^F4'G!'O3[%d&;&);qA$4QX@]#5k=5AJh1B"ML$)^1W#o%U_O%&hLhN$+c't"tP:Cb6(YJ
%J/8Ge,60e@kW]_3,@Q=0"O3;=%@ICiG>&huBMK&I@t6`M-o>TLn<aG[Ac\G4?rV[M[/dHYi0I2l'L=tH!R4b4[0,V.J8u%ED?B)0
%6.l<_Ji!JL5rO6E+=S;+#!)ul+t.jG-5&utQq/nC!u!5nFI$dcYdAUcJ>OmmC8?Ep=9ULjB;96QgMhXG=9bo0UcED42WY_W7Z46T
%K5d^VQM3C?g9=\Tl!Lt=Hd1]j^toUI@gDAOLk$Mg0t3_Wlq,!a"RJ^qScnCO^n(\q8\go#m"lsY"D8#f&kjR<R!-7Tf^Rp`+?o>U
%'gI.Es+P?,)"X[C8B!qG2?L`\MjBBl<!9%l.6k8(DC\1^3r[8pT'(4U)9I4qo&#a>'!MGA@7_^ul!7/?#Dn82oYg=KF3b'3n?LrI
%_oG8t&AUb)7LOBi&VZBM3#RGbn6R>1OXO'DM'A`3+&R.P@KV^#6Akk"#&t6L,)V5>VuTNPV)P5)&Y^J$$g#2RIF0.'%)a_\ED=A]
%%=)T%0:2EQOD,e>EKLZK1<Re!oY2,*75%HQ':2s`n5[SZ[YM3'r$r67o/>[4cX5W"m9>"M^uqu^nh?&RS.7EnJ523:P^]_g;($%:
%0N9FT^,9.Go]V!X$j7u?3%2j!K$k,oGef!LK$k6)HK6nN6j+2%]Zrp>(-D:Z,FgIU$"KY/"43dAUF(tP#S%O]ncMEZ-jXhN9/h<-
%U]DA@4_V&G)O.%QZL6`rP]gEjI>J27V@bO('0[m4q,aL3ZkUkrT='K5$@A#6!)+f3J@LE0@[(J\l3:TWp_G*$1JC3LKE3.q49Xaf
%TQ^t?%F?n=i"[*Wems?J!eeUI!>_NoaTB(7@"cBn$@i*]G]!P[%H(t2\1)r`-4I*Y4EH$O(3#'0BC`hO#C'YX(C4s[WLj3;gH^%[
%3<=H$'I'rIek56PQ'K?Xl:Tc&asp,DP(jZN[TCoJp8q1q[YL$6_#!nl$u+tT;pgg0^&?UYmmlAeXi3i&,0XsqZW4]LWY(B+c;@#N
%Q@SFD=j%C;bJ&q3'?sY]-DFYCrZ"pVL.Z)0#;Y.!R7bg>Oc4K0hei)J\g*V\SWd"j-a%Mb)3nc2fghUb2J"4lbC#EsF$_mT].V6R
%23f%o94k#;R>&r/N,p.HbS_Ps'`;kRIQ5Zi(r7_`A/fPXR;\acE<&Sl6Sf2tbW14,Zp?EZ^dZI5XAC=\(lQ1)L`h6/&5@+;_I6=N
%S4RB6,*$,aM$+Iu-5'"j_F/JXq*s\[7[b1>Y:]nBS)r)ii5.<0d`ch.\@$+eb)I4@NF*X0nbW^Fg`F1;%HW""bb]f\"`_-$im:5i
%JjK,_&k)uI?QqhA)D,&O&?L\$8Jf'iff9GWeLOt"J;JirTOL=55gUX4YTgq"MHaC6pAO)bV?P6]3CbaTjF"dB9?S`4^b1+&fj@G@
%>tEPia+7tN;E5YA\KkE>nc,?"^Z\0>VYEBDrkLI+Z*u8hE!_k:eC'8WIl_mSK"j1Zd139^R*!EK!]mkPWN^G)W)O/SH0GMLnUiI!
%FH+[6p6R1%kq]<YCNQ5sNJ?q,3n,"3TlZci\H*+Cnl";=L4O;5#.mjGj&@Z+R%XB)60E96)]+!?\H%kV_6T,,r"S75&E4Kj9J:Z!
%9XFq%pM$cMnbttXIP-_<'<bYe1U=5RTg]l>oqOBHKMta>0HDG6iIVg?^gGH_s./mhZhisni4%$JKnSYKGn!r9NkgV/`J4"moj.:o
%)YLS8KZ"dgi&"&!6\"jJ"[`q%:ZRS3fjh7CIis4\boYcVodB=NdHiU_(4RHV*6efF^(i;N*5q8jRISVFUp!D13\pGjfmb/H!&2")
%p`:Z-;b$R^8tpkYM"`X`a-[tKK=G%'r`PdIFCYj]ZN*=p(#Wg-jo[:^@*2IO>W3dNV)aErs+l3<6il9I"B_Q@*Jk'?"JUK@A0<cA
%*Mu41@YEg<-44eH@2:rG?\9Qro@?&blb73.@%KF:PG\ns?Y]O'b]QAGe7LPH's,?PA:#ZoEIs5lHpm&5K9$cC0_Ku4E>?Ood)^tF
%+!^[tMSU\<0-Bui+!iCaA7Qq[#Z9Ra=ReU"q!d3OW=QB"j+p.N'Olq(a<DeA+t+rG=OSA->52GWpgbTkafn(G'"eQUi3<ZE!>7iN
%(XlD\V\=h)o$MRE0I!&@Rt6tGFOtu>(%!B;KQ$r..:F">`uChj4B`^HM?dVq`RpWu*/"+",^We9?Yn\F]gm/=DF\d+l,8r^'B)j>
%`+=eXM/=VX!]+Fl1iA6*T#HPGA7QB5<hB+&HY!Wa/ArYB#6Gh>`NgJ``'_@\n;@Xo5^^@$7Rc_=)]KCDon_)dbJ,PX@]65]'cG1@
%gObW+_9'.DA6X#Y/NDE!S88R.[KS&5Js5SNaVN5+'+#uu9[(:n]JiuWm)r)Ym)BXrq:OVQ@VC5."1n!;8OHcGI_/O[<',?-kBcV\
%[/kcjhqre2.!tN3^/Dg(38N03$(!PKbQ$.nFh"sDFulbJH+2hA=&Q(q1"0mJrH1_6Q"mkkeR]2Y>2QH+_Me2ao+MW^K8[pmdRn9Q
%(n.O5p/_"J<kGrg^E]ad7RG\AY172tFUC?C9]>1,V>pm^0o7EaEd?2l0b_=]Ces5d9"B!X@lCpTZmM!i4ZbM1itO?7.0PO+&6bZo
%bW$i2B36V'Ql]:sf%_270\XV,f9>B>+]XpmM`A`;H>9Y'S'%h3aA03ehQ;+sOuJdilE5tS#o]GYK^+QW:8Ll--$td=Zt2B_j>mdW
%HYQ>lEcglRlJ:/[WT3u625t9NWEHa<@83?E\_Hh8/an$&TGkl-p!o\cjA<K9:Tife]@AmLc`\0afo-h*))p^"9%#ehUbj9**`)U2
%0Eoe^SM\GXdqcLb7On[A_Q)'Ofl<eA.X=,@[,`'iHdqt?/9cNnV5@-4V%.k86)Q=go&/T;4A%Vg\GW1#87uN)!7pbu7;=W8lt0]6
%8Rsc,e!]gKN[9hDs$gOCd;m(2YJ+aNg.?*>#I.PC_48Eq/k.$6$13o&/d^p.cn5XlP0a\N@i6`=M!ND.`A3.0]$kfB.D"HqMPFBn
%W:-#UIoEjj#utY),u3BmV0mJi;<St0Y*5s6r6P0./[*b#&]979O>$0_6^$^k6gRZdMp/!PNFSGhX_H%TjYa)VS2E+3>d!"C).Q>g
%X?+&iWZGeFV,FeR`HTGDR8g!Q[&2qcs)EP.^`BrC*Ocd4=][JY(0JPCcFJ-:b8o+*VDT*9J)Ebl52(_UiDA!E48E"T+]<Mf;en=m
%PrKCVEiUL6fl;sRKiP%J_Gb!/)C].3:Ep&C2W6aqhScO/PNOF1`j+?K`G*S<P(OY&Ljm[RjS1)Q`SUGi%:S%<V%u^hcX=+5iZnTK
%H1+6l^9g%(-88VO\j:hCg:VGB+QPbjNmu[qR4+Q`l.dQXRV)P.a6g=i't9bT4fd8e!=P7aMi"W?QhhXK/oQpCS'$[^I]Dk04%`;n
%ET7"1M9K,O!\k=Bf:t*5;.a44WB&Nak$Z2sK/po\1r^M)/Tg^1JP@k)d&M2jC0i9Jg6sP8E\dkW-Pe&;QTXm5-'%oDRDecWfZ4p$
%q4BO-o=,?O6f-ZfInZ'(qd/U:6Xif3"]p[-=[Ps8OT3K]j;<pk-#:TD)Y,SF,\tKC)Y26X-#:TD)Y/AAPm(J]`YE#C7RD@&erZ_X
%L9&DFfSo'q-0rRm\oG#nS?*\0M%nAH:FB:(Sh5-0\r`.,(Dkme&,=D/SA[AqUtoln5id"qN_CG!firl.oD7]OX,VTU:TfQc5sp@6
%;PP.G@B'9]WQ!sRU2kt=>b_e6:H]1+#O[u<fdY%"MoqXF1Ts"AZsB+XF0Jaa1+UJ.,oO!66^D9(Opp$6B#p4G\9Zcu]_Wtn.c)Lk
%Y]AFLr)%0-^!:65.rR=LDLLT?nN<\o@_'3ErbUlF&s&0Yor@L_bj8K.maPJg43!fGs/XY\Ymu6jC/-c`PHW'3BeS<L>cW?q+>V<r
%dh4j2Y[<KV;7l(X^fP@N[;G8/MKosoDZlATOcr7SfVS[RppUR';lm@Ri%7ls?js[,O7id'Z,'Y-`(Q8<8J3[Ji[%1/,`.j5na\d>
%_DI0C]]^o*beGE[QR))VD.b:h]\Fe&1-JK<S:*RWP<_1[!RG"`O;@8gMAtZ?Aj/#ZBMT?Boh=7"2:Hpp=:s_)mo_lZ,0jU-aak3,
%5ltFk&$/m?_p@B3[[V^"&k?nQrNqGsV/tj$7crG=j#Fs/RW[YXSE?%Q`u.`\1N+(J(e)`_D-VaXS:#Q-V`69Z.8Dh[CN>#*Ee;cI
%@(JfCi"`Hc-8Fg>H*nFR-*OSN1KQ5TV5L30og)qi*WCa?Jls'G18^'=_iqkQ<PS'70M<K,-:YrsaVeIoFp;'-pP[>eTbiWN,YX63
%R%Rocl"VQc?He.c1bLE7?3e$fo#`['D!+8u@VG%I*2g&(7B\Gk*9)53jXIe0$=o'i]FMs+B=?@A7CCMkX5/UOk>f!5]pVbeNM]p[
%FFJ*Ekudr0cZg!"W-Zq0?-H$1F/.&jc=^J%W//6Y9.=&Sm:UF$[>=7p*3=cD[$T@XEm'GlEf6dKk'Q"$Jcn$SR=6kq[$c.sqk'ok
%cZRM$e(HIM\E$2q4u#]joU?;*^_cKK.5Q]*S[XBNrpX-*VWg:hbgTJ3EB>u:bq8't4,HHdV]OY'Nh`#go60->msjl;S\utG&#UiG
%M>m98Ose=`0nl5^5sEI0r8\1TRFMG^'BI8&Elg[hs'qNcP:+G,#gNi@-'oIhfeST0'BG!i9T3KP"So^a`^P3*4L'kRo`4fkm8]+K
%5GlQTRls>,CRk2^qL!benQ/48Q\`.b\YY<jIFY:7M&Fil'6+U@5G^aFO#rV%C",aMcdNq;n"`j@FTcnamAZNP)#eQh><;h^reNG4
%B]Wr&C9cVfT/L/[2P.NtYLrE[GJ/;OcBER&oqs[VPA]^!>D4fM:_rZbZV?tEChrU1$dHXMf3g4Qpe>]co*U&E%/h(;/L[#Le%'a.
%`"(SY*j_n_NjXOfS7d>AXNe2B=R8C=(<)((qbP.);hjH6N/YN<gR--*%MnjhbdA;EprjhGZ1`rKbF#1!cg`.l$b*V5#*.D(C9]d$
%keX(uS.p]GMrtGkpEfs)Nq8LY4M'!#6f#uPL?N_g4A@eR;De+Xoci'4`7k(rY>q[2VO7CN2%Fico/PNrMsM]``E7hV'7LlZA(OY+
%b1`ZDXd>(1;N34?aO28DU_Xt_3sj-.%5Y<bat,X)bonj\_+1(m>&M$%&a'T31Pkj\97>U>9q-F3o>]+]bXLMYc"ah]FHZJ;`Z;VO
%/Q8bu&^IT>2;)I7GICWQV%G9.bEM"&@>N:6K44VY0DJ/,(sZO[[[0F-gInjD2qe!goprjo5Q$\\krcg"B,,)T2uK!@dV?nJ:1ho"
%4DfAO`fCrD+&(H<hnIDL<i<u7CQtEKDMs@X,c5<NCDne.=`rb@F`tsi8uFG-I6E@M"]_I5NU(S]<%<$+h5VDA%.:)WX_G>rJ)$YN
%E!OOgj0iEs79+D4;l\?jhF47^lWd)uWonQrZ%OT)G?RqG<pH7qj,hoV>:o5$il&?hWmc#K6k#-i&]\6sbdcDLd;%1jQm#UL=u2#q
%gI5,6htnoaK?7<#[sh#kj6rd0gj5e493;/,7*N;.W3pRp.C%[n=V'Nkijk$>ZcJ6(:+$-4VG8SS0H:#uPs,rFWQD,cBf<<eQ.r19
%^eOJ[D>_G5ZP_Hl(Hhcs%j"!*VSM#4.qTuHIp(oCpr\LIF"p4IaBTp1ULap(8Jk(N\=o2r/Lupr;25SZ%uFE!1+%c6YFb]e*KD'@
%V_,A_l,Hjio.*R=p['nCc)X=AE>`7`.FENm>k@JRo-KiD%Q%N$S0j]nIpV`K;.F;q:u\!$nF-"B*cD[2p0^R6hZ[G.-?8.dHY65Q
%EOMe::Sf&s"^JXqZmMRG"7Q[LW]!\2W*`p]^HmZ3Q(IIu#^-trZdXLf$d%p;oAD4=Ha2kK4`E.M:WY92qej=C_&$d'@@RFgB)Rsn
%jH-?DORh6E!H5o(hf-4!1Ytch<P@(o/2OKHn80AklaeGdD'iT@S\38EJ,=B>CR/DIJAA8L1l)`Z)Ddu8=JPD`nUE9jnUFL30b,.f
%jK6tSVT@Ze&8'eN=i<7"-Z?&W3=V(_O>AWsF*_mu?H>.E<b9[EV/K`fBATd:Drghg0TP`A"Q(Kb^6lqRbo0*82f\i9;'c$irod+4
%^Uf7F3?W';NCJl)3g6Za;tlrKXVs!0h\Tgoo2f8[4uZ-+ad.nigp/YqQM+CUCb`hZ=l[_5bdYh-;j(7"*b)N7@P'1I5)2+]R.4Gl
%`(ZcY(ce(RG]oi@U[a+8"\g`jZg)2BGR-(HBM:SO9JRMBkmAdUNS2WkfF*egLbjf3UG:ep2T]XVWZ"Yg)G*D.:,3^qE#-D:S4$d:
%<]22RFQP0E+cj:S;^dIuDOFpfK6)0=Pn8HASA$8t0rt:TB@7CVd2)u-]-`[eBREE*'3X6pHc689k3gK#7bUu"[pl%U/RF;aH*>)$
%4mWakAM]ru9AZb3`-Y(gQc+6W4IlY8pL8AT8\DM<nQtcAkP:#1@Vjei_h]tcXHJ)e$2B[60+%E:J1h6(QIcm\a)\9;Z*PMC/_Fe/
%ADpu]9:[o#E?>*k9^c<-^QU%Ns$rfr"b+qGU24.BUtqgl*TP7t?[6G6XE*H!^O5'[H(m6Fo227%AcuGHY.Xa3MBbu)rrm$JjY\ia
%R!C]Q&M_LhTW]ra0ck<o1+r\ma0/f@QI4i1)(il)p=q6p`DQlGDIJJ`hUe:#"eNbS/Eauu`gP&`(nN`pc<LXkO+jLb5Kipd`fi0!
%,NCN@dZ43"YN`dF.h5cqI]4P*A%=:;jjra(p"6<kV0El^_-<co^S;W]\i68=i%7m92YftW=`mADc)Z'^h<%t2S=0i1`E6lEMb#4]
%EgV"HBr(Z&C>^W,q)Wf,nnXc"a0.H[cG`?5b`0#i1RWOYW,q_<gAQ"`@^br6S9JJgj+1RB0K/6smQ<u4Aq$QT%mOe`O5!Sc>+YJ<
%1%M1XQ"i25Nh,J-(i#$cSC(o%3(LNY>18p0bEG]djLMe^Ehu_1&]`-(X%mG2ogV*iPY.ciXZL-u6-l>NQ)?Jk\,)0_1C!84flc(N
%9XUg6:<fDj0qECS17#2noqjU3C8L@/0oeLM\^f,W,L/k[OfD>YF"r9]7\%i/0tfTcnFA28NER<c,HFOS*\gpIW-7boIjHHr=i'd^
%T5%oqegn.1C3fJjNF3>.A6j^&TX7NW;&8-ceMnP:Qh3_P'4mL#ZO=G[KuD'QcJ;Nc=Lqnk:!>pG6rmKe]dRkI1G>V<cM+%aK]L1j
%e*QNl.4rtSPSc%DSEr\$_j4gd9!T8p^T]W<?Bc=cF^ceT=gt":2P;V`?Bik^m6ujfR<e>$PJ&@H%a[o97>Z`'=]]aB7G<Y4B/9'&
%om_"IAfg]r`8]kfUhcF3SF78,`S0:9E+8g,g6`sOr7+Y<Es)knWhDPZc*Yt$h=@d.n[Di?1liEsCQ4)G]H7(D(LO1%X%s0'b0`4J
%e[.7sFs^(.^Sg:)]P9T,FGZ`][\AZ\dmVU^#E!CJZV-7`6G4?e4BZ9)dFkQir=E/s5XT=&\ibmt_4t(Lhg3iFgQ<;5J(Dma<>`oY
%0\E?)r?Nro2d*\.Ub]Dt)6*B1gqM=PIHs`HB:R#*"8IuoQ9e*b89<a/gQZ%R8h#.-%)SFXI(smq#3,[U'E<@ZhnDD05:MoP:OW(U
%Urq'9qkMoTeq@P#C$(dF,qN8rR6f(s9pQHa-C1<$mYJ59CnBAH/a(&G)__h'9W\W?d#W$*IOh:dVNc(#h'#*$$^u5eZ2MM+[P$_E
%V_,..85nYQIQ@!)Bq&gG$l3&:A2&[3.$fiH^D4X]F.3^43CkhP^HajC<HBAJ`KIn_H;^ZEGd";QYXgJ^'8h,TZ%f_.(>CrGD&sk7
%cP2Oc\B0+bLuJ"3Au$dOkR@S-d7TAIrbZ2<fa!+t:U+?\#`<u^+XRmn)QA@2SUpY&o]kS81XHih7\cCRIt1XVQ%-L4U"?mF8f]4/
%ceWnMYL>.qTr=U>^@c);>=PD?o+6#Af;]YPmWm@;kuPr1LG#.n8j-ADhe&Y63UnuV`*oWGYJ$QWFceSm`DRIG)\+5Ei'&OiSg"r+
%%!SM#Y9/%-<@pMp/Ns%oa43f(4"e'D:e!OK9)3&FZo'hs,LB9S:.qJP,@f<cEDjt1WV>kUC/HLfiVJOs;o(c/0aiFLnCpL9V;Nj<
%K0':M4V^<A^OER\;OOE5H/qG@%%o$X'4GCJW>U:@-ta$GYsD<EBEsb66[]"s-n5i(G=`)O:G_9h<<Rlb:"%ck=Qjt/DN9qh.-G3B
%VaYL!RBWgMT)D"+69)hQjiAFZAd9[n/S*1i@-Wrh6;fGNWM>S+V_6@Gn::<]KN.qk.7k1BD=qP1=p@R#&RobtK4Uo2_*Jek@AU8;
%dnCH?b%9BdJYY!d?m].Rj)E4A[\adL2EOO@HG$9-qQ!*Ka=B,OAJh<XJU$2nOFg_LG=U!NjJ(&%q29>%dX_48j4l`>loJc5W8l1L
%Wco5=U_ihtT(h>4P0uoI%2PcL8N0'Bm`SI/rblJW7tL)Ddh!Fr!!K2<d=<Iac"K*]%bq%S,)ubJN;c/5J][ue6,V/)8#pG;-P^K`
%'3$bNf[N@TAr=3%J`W#O!'uem"=*:;AUSu^jcP)uD+:E[3<*5G?k[F]Ut221K.mLi;;)]a)YB+^RLrcV"2$A)@=\@lVYr`dRplt&
%8YJ"lC$h`7Bol:-g_PuNR&CSc`=OpBNWq,o(A0W]E"k^YO\T(EI4a>P0[^(D-,38RbS#fE'S'!'T#-#j3M3sq*6@G"Au;;>+sfrE
%KY4TEkJN3SX1'\]7PGoiI]Hmcmgt*Ak]m&,K3@kA*c<QEJ%,0H*MOSnjf0`/@M*\"[]Ee`gc)%%*6-<m_,J_s/W6Fl6)s.c>c<^[
%B,[`hWnp:Q@Gq3!%,hSN5N&2;4fb02k6>W4H<tNS*2$mNFNUgChk'[q"9o8sU2=#*CeWe17"gPkZk(2J3D";@(-"ouVE(Jfg8;dL
%9[Hp`U^6jOJK4o0`Hs+VP(lHnhGtkTH3gO)YT*oUr\.(>1i!1"1&gDTK3tQ\#f[g_)bqs4l6$gNg/>f-BRU!r0H?ntf).c)E:'kg
%+AIo?5u-)F:?ahK)^jjb8.G&!CAm66FL%VP@%KG.aGpE9$WVm'O]:$E^JK!._8Nn5=4mZ3=JE:TYY:*C2\;8WN@dZj_f$7l%72&_
%1PDDt\)<=VVfFc%8@&Ctp_-na@=aQF'US_^r:*\6mg\F3_^0sP3.rVea@?WPJ]XnaQX^uYB+"jka;3-d[SV,O4=22`L_L'1@i4"h
%X";[1g@_ilPj&eDqh&>`TUDBIfVSba3kTA2\hINL5ME>^A6r]NK1,JJ9E>-E?8WHrr',f';SP-rP5:S5_)3KCB-'aqGFg"t@'-E)
%ZnD,@JnRtR-&mU*:gAj1/lX(smo.ktp/QiDgVdVg:U=K')M2iL/EVL"+100")l@6$4[TJ^FUS1nUQm&[$_&00_Ok3C:n/2r<7@<9
%LHf%[K$Hp%5)X`t=J)G#/IeodY(l2!9r&VJ,mH2.BVeRGb;*g8N\1G$D+=p8%KRcT^<5ANRYmYu<l76]JtR\!fV(X-H<W8CcVjjP
%A-fbC[h&s,;E$YmT[eK0r"4P`\.hWk)ti#/X(2!3R:K-VYr"<H$#Mr4_>P33/-c8L0G0(o0L^ai56n8+cq>-`N(`P/@ED;MEJsHj
%`ot[QqO.j#rA!LO_K'`9W'jnC/51n!gZ]`2?`707"rs`b:-$bh!$2&tJYA>!^qcm5K(1mahBoc6+Q-F-gB&?"a-W=#>bGD"#U>_?
%oNa%FS5Lq(5Xc(n.1?oK74!d7Ptdr/>#22-Tg&\96;S/P"K,i]g+!:0(:@8j&;!6>ps?p<ed^dW2EFB]59`,Gr=DU,K)Qk.B`70.
%UX.eq0RfC@"7Ae2lQf6Mc\bXRSQFaZBpgFb5\EZ%(X+X.#u?/8U^qFn2B4q$OV+.\at8EfF_-c(\rce$#4u^dU'da/T]sZ#CXRfd
%F2o;pDuhG?=[Yi6h^n%%>Ii(Q:)tC<-_!(6/-`WYg,B[=7[afh*p#0Z^kHer/8ROi3h`'JQHh"%_t'Wi:0n\k(pGUqO$]d3P7'T)
%"/j&B<&o&5./+:KQW$IHE14S1jJeiScu9j0&IT``DN_B4L]jA#_7qG=p7OfIR9r3:VLDqsN5H8TBQi<s`@:E\2^>9P5U[$T!;T(9
%R)B&,+\hL9,?2Ou<jY_sE'T07,?gH<?3V_mj>S\&/;&.&UcZHA2Lm+Ya%QXL)/sB6j<8nZ1@0hI1P-Q]3];:>"K,#Yd!JK+&?4/)
%>[V\Eh&C:^%\kNA!WI)K)^pN;Srba5#+>p.R5DLu4.FLQBj!rc::U%GEdI7f]_nt=N5IE/@j*iUeVFuook>c"B9]-C@T+"CC!@pO
%3+_@/$5@V_7V$0[='g^@RdU=6'ds2>7;#)&.mS#,bL,F+G&@V"3Nam%_CpP=KJ"K#82!;S!h)XP-;5`cTU.pM:_a2W9VM03RA&eO
%dEm5massU4i>X-#PYrW'V8.$n;VQK@jSPs3F5OZc@V/N@b%8Jj&6'A8Pnig6+`OU^6JJbm]`]h+<;B3m1$eR!0o;dXdJtA<<@n5r
%TlCBJR'Z^-1C)=OOlAWAMNL%u"7-j9#4Ad^G/?)=NBs)YEFO+@"MKaNAiMcjG?t_2Lgl]^RT_dmL+Bp(fit5i`ZQ!#3MZZWIf]uq
%:JpWB:n'h"0/XG0K7U`RO9_;n\@kNe"(kN*0u,6Rbf%kTJJZJF#4D_3QF\m?\91Q'l@g(q2U-IrML`k-0Xfk>;8:'$H.Grh:K*tB
%afp\UYi30_:3hD62WZ^,5cuP)_\m,0Wf4SDj;]Xi+WX"SU5YVW8\e^hFL*\H6M::bc"-ejS/Z5<N=mD"U2<?Z$''M7%&*cOOf:-C
%65Z"\c2_;oSHf/(<b@sY*%/J0%?**-pO_GV>)cp9fc`t7J[amUJYnOh_PJ4DY=lSK#Y%k,@"\fc.oVoN<<ucaqh79]<@AlhSA4k#
%g`i;t"n;ESQ7B;^XWYS>aGA_M<>M`I,EtnG%5&9)%5TBU9Nfe4,N,s@+i*jiJ8gct?l2j)dP1tsQV'7qEFE@:+QHF%'s+epLC'(i
%FeF"Z<!5=.J/5_&(,Gt'[PRQ!.Y+&)<Xu\@;udQZQ3%SS>(BUVF"j;<&P0"+;:cA>=X"+>J?FIZ6Z3-<#18O-&o@j"6/<K$f[?<L
%9Gu23N1ZVB=pj6)N1P*BIT]7uR%s8RU\^`J&9!XTQ+48BKqmdW1/'/=&0'Q$8N!,NoHE7!l#eL"[&B'`*cCcRap#Y]e/8s)3n&mr
%>VK.`nY0C3$.TJEG-DJX$lXB[3[88N>=gcN#Gp`ui1c`6.Pk=92]]RmAK&:G".961CT><"nQ0I-OR/n/[PP$u:#+['6=c;mXX9a3
%=^(iW!B,(3C<JjU$:32R^Q?N)#S_loi9Me/q>hUYkNDFj"&(]+/g9Gme503DHB`'31)9k(B1cZ2k*K8]An7?t<\k%Y>__7dQa2F-
%kD9=(\i"1'Sq)fiFtB@cjf!6S9Z]7&QaWj`V5Pt*Y+EO*\.]<n0cb9rk\e0N9KH_uJI<+E,CtuM#(W1'l5jERlro*hQp_0l*,[JN
%WEG#3bE1`+OP4F@`j>2*%K(g._NHgr`jCU81XlMQEm--5JPbg4%%UH'V$slYjPE=5ZWpMZRl\Asd6%9Q6*gFl+luD<9?^@>3cN7B
%=7Hp5c)@naF`==.jQ8e`hbAg^A=7/2^]qqTAWWPrr0q)$'0+"/N;1f6d7GST]=$B^d[Vh)5afCZK_[=G7@!eHR]qUt<"Pr><>hPf
%a/1=OYk=#%95%=^2/RGgJlOOpajALU<"`'e'-([k=f.QcTns'W=X^[ec<kKI%ClIkG*a_m$?Bi/%>n;&jsS[T)"AP?';IfFJf,J#
%lf1kh#Ti248ias,@@0do3oN[^Z\-I8YS$q2E(qrRYr,oC_5.-s@AKbb6;54'hHVNTYSHA!J>W\c13CP&+a:gtEBtW5!TO^C6(cP#
%4#sg&M]k--S[&#kRKuu25_Gh$1;FG2\J*GKg7];g@]&UQ1LeI(K@no))/-6`konECNZlV2i[WcCO)qCW/6iCDL)VZGDW(jf2qsRB
%(GO[*AbcsT&:[3[F<=J2ONG-Gar,n`f?^XN^Z/.fbLKVo.!&41aYLCW5hR^!g8$5'\SDaaU=Mb1J8IY*XCGAkBO?NT9!a$MA4odd
%F0J=NEK!k]`C7#La2%.VZ4LL\TpC6In^I'=+2Taa2)0\S%Aq:9TgCF%_ec>ni_8Ia<$<),7i)LW+9Q6AA8^;AogZWq"G78n&I4uS
%r8mKU7f8!FA0AX_h6a!RFO5ns:B?n(jI$%.^fWkgc'@j"l]G/fjLj9kMMhPS`iX:0%Kf/lh@f>7^jU0Dl4:L*Tc5sJ(.;\K&F[d_
%(di5NM-Sq+@HW[+0eJWJ!JBF@FGFhY&;f4%.MWB(@H9gfR$]mSjP\g\C/5$$La>AXDm;d7[N/M22O5%K)+Q&_[[PR7P=0oR27ar0
%k>`l=aY-N<4-K+L-YhC(buZWa>1u/K0$d>^J2<FQ)mCn7FBHCe++lh41#YW@=AIr^/.?>'8(ZkFqZ1O[W..#7rBqCsM%ukIoSsjF
%S#c9ci3;^O<!?YtrN.0-g<sKi/u`7A*5UUV'Gnf.;P2nP;3fIl:R7r-N!O<dKf7F9Rbk)\X*#rS/t.g&=,Vm792m%;b.t\Eob&DP
%V)a#k>0&*fTGCNW)/ZY459nYKg=[G'_Jf3@T\V3aiA1Qn(AoFu*s<_uO\h'A(cS*"E#=F8d#cp,o]\VZJtt11.*Rf71>='N$i!I@
%8?kqKS"-P#%29:k(n],H6"kpcCiEV`Dl68],6OeK#JURnC7/5A&VAJ*E5:Cl`9ULi(IS85>bLtJ%GVtI-O&'>Ou!.U*VB25bRr$C
%dF#QO;5H$0AmWS&*,OK(E0bCeb^!2`Ob[:u4UqIX_fU^k9kK0-5D*u]ZW#k>X*CKd'1]iL`r3U;rW@S[0Nd]Da0r0,DB)UdiWY;G
%77$t4*^a4niLf/6QDm@$SD&"C[:^kn/h@0aNcMYWb)tqCbmr00N1(;mS&^tMqu0<iSscs&9j;RmJ4!_9Fi"Qo3BEW@H77@G;3'E(
%0jT]O@/7U]RX>mr+;Tlo'f>tH)Q&$XU<\Q6n;.n84[YK5'#4B]]_5@ZNKI>W_dnfN%\]aKBS4O"+C/p^1Uk8FcT@9X_^QDbEO]A$
%7/0jOERZk<QL3G9emHuIs4$.;38EUh?(Tc*YLcWIHC++IBu0K8>bfkdFR/&X5_nIVQ!:5c<0a2,A/\%IY3W/!^[8PkQEG.T>FaQU
%DS&g3l)N:Dp;YuXjWE$*QEImSpAk3nk1<U%9q%<o#F4f+6WD)hcQ;pB;U:?#DVn&<8(n:k.Yl=>WUeR8U"ei@SQE8be]SV>0n'V<
%L#+9*3)bVA4`"U"aN%($f;P%JQ-Q<Wo\TM$+G%3)/]qK(+lNpJ?%bUp`]mHf";7LP&jZbcXMH^3Dq\OVLK?\gQPU\kM_c`jVsplk
%lJc4$7K71o+mKm1V9KVnSESm!#QKAc`r%0$_8$L`_Suj8-(grT\08)@3r!B*U7W+tr&ac.9([2!T+h0nkiZ(QdGiC7`ql)NqDlsL
%M131DISO+-JLch\W,Xo33oME&Egs,;I*8t[-9.2lpt.j+V@tic)erP%C-#5@M4.2pkZJ,;ilpZ,qUnI4F/#9?rHrZFg9c[ta>6rf
%JPDU_2jtBfc\D^q%GnJI`U-KW&XoZ_6r!]9RWaWX9da[:;:@I*dtT"fR)(/L3Hp9AGaB"SC2_fA2P'pWV1Mmp8^qjVVLM*1P=/+m
%C-#5@8[`,p6*rUm]!6^]M1/4lF/#9?rB/7G>+@V/9L!UI8N'!bqDlsLaek)D^s_5dl,II!fc-K\ksS5nC3gr*ZoE-<TpfR_Z=oW(
%ksS8Gb+bR]O55RESB:N+)r*/AWq<`0j,&eK?P6q@.-obeek'U;;:^T0:/]Os%ALh0dgbt+:OMCp4X]MTfdAon=B_4Th,I#pqsP.L
%SS77U9@!^+(2$B$e^@$h,LOqrQG/cQrZ0iC\or)U'O01<Jo\>)m<jpDgZ(o.=UgY`aAZpf8+KX[Qq68SiTd(X@8MibbA[m,K9o)@
%DWD-9h\A*ROm7mt_5SR:<*28*._#dl)#aR9i&c]%b^f-tr.EmYcd+`8.G]](3>8"34o)>N6au?'3hDe[iHb?@,8hq-P[dZiOTEu8
%;87Md1@+OhUsAl;;m_U4e*U@pV.%kZ4r&fZ*B5C-K>ar6QftFi.TAK7F1e\.K*]qfbB5.S/4Vb(VD.s]r#BHTdWr5/I/hjio9[Ko
%r^tN1?g,<Zq1ZX*4Y]hrn1X[W#]@,ENfYnr2[RCh*oRn;81B?9$Qo(2[u)h8gQ=_,pbQTQ;/XN]\&j:TYY!;!M.NY&9\:+u,N6I'
%^G3pM`o(JFIg1lEa5jN\@Msp5'j<@eq)4bM*W4Bg:n[?=r0bNr\s:0L#i>WX2`mgaYL;k2BWPPPr^!eeXo@<7qSZ2HeHu6-eGlEX
%m17,7N@8%4_STH3;J)`UE9'EH:kDa+^QjB%"6dbF$riE@h^EV_?G2PH40Em<K.]D(fD#7K/C8=99J,^4)s;,3aD5t"mI37hL4:'l
%O&nMZ1uGmpXuH"4;<@AK1]$[6GL:JSrVc`PX%(b]0s8dNo"VSI*@e/$SPH5+hX,Q)s40lEjn^X+peR@S6bPnQQ*)UeEm+(=%"A4/
%n0kf*5<;#u5-^CqeD"V#gfAbXnn+D*h&d6Oap[SK(%H,XiHmG(c.,6,eTmutL1ui2PQI!hH_"6$-8ERVXo9\6r9KQ#=F&ECHR;p5
%Pch]?X@`7gs!0"AT+GNq+l`%'igs5b=HX8O]2N?+.YUd0h.bC<U0<q@=l)jFD>]2S9<<IbV#OGNDR<].8^M^7U5=r\s$CU25dNA?
%`=h;+`BU\IhIf,Jg=8f0ERZrmBq%uSGEtb*4W_dZ6uB+68gdBuB<3Q\S<56tasYKub/5VUf!P@T1GLg(K3S@Tb+5S8;q!U:@V3R)
%A<384H(tHo'ZR$UXU9a.Z)0L*e'*%K;EZ'[\uh-^`ANP+E$N00c,;SV?H4XMJ+X$Nj8AUYmZhp<-5P_f[9&+jPON.WgoR<"ajrnW
%7^](NbWq4Hh6J-e"Y2bo[sd(>k#O#"IX,Ze)kCqaRGCi>gM*IDgig_R<W:>1D^)M\8BRPilFII&Au"*P?+([-VQO]3Ba<a=1V6E)
%D0=,CDQB:ZYr>i8$C*cX51m*'C:[-CQ"jB8h.lR6_.7(dIC]M2FBWRqh/n4]V4Z+5V$u_pe)6O'>,-jBHA4>_E[usL-Vc\'3jI6,
%&6KU84mttk%HC9]h#LW):t(X('VD2V[*>7T5Im/&lTa1uEC_b2e*(5`CO<0*?L#K+\!&;+.inAs;QY%gbJ*mgh^_d>[FC<D]ujoe
%cOl"qD$5,XnGBiB<"T>dn`mo4fm"kZaiY/F83PtnpV$9#J4g3083agZ(d5>JF?<1skCf<q8E.Gdm^`#6Y']E0%NEY(iHESmU"=$<
%4h7b)#JbL0e#.nL4/$onk"i>3i']B"@i@_HeDF<B%jQ3/&._15>,ckJ%PVKc<?A.)eiT-2-j&#P"Ns3/8_StSl8l7UlrL/N-/QM;
%J6Ho7Peu]AM8rrq\_D\ipDP?eMB$KV$H!<d:`FZ;[<D.)FedPa0O2Q!LOaF_1"pXeKKi0HOX#iHSF#REM[3)FGsAt,KSE.M8eXT'
%6i2@!U+_'#Id80ll(2*_&pe=XJ>jZqkAJhPQ\GfJoU_p5ArRm=X,5"%@IUb_qjus?9@_CCY<)Dc*#YkAG4W!#Q);>>N0DXqPbIb8
%G\%Fm&S2WT,[8J9+`j*67m2MFW-b2JH/-;3@oTk":]d@RO`cm0=F[B=OmQdN:YgYPg;d'.Ku;pi:^_&7,+!%#-G<C?aTUq32hGM=
%;G<8<(Ahf($(`=9ejDBCrEJ;Em9;V*k*H\Fao;/&Jh]Y,2ka7["ME:YYkM2U"T#1-Y:Ik=R&TO=N?2[F/44N8UKWm]EN@WWebn)j
%P!7S"j8OWHNUu!&73aZp'fr=?,Ld^48mQ257_9:0BG+B9;=M6HWO\stHHg)1]qY1hQaQ/O3?#QM`C3s!=hXtpZ@:&8?+1((%jP+n
%oA-h[k!>Hf:g-Xh,#1j;;`;/m?PrbCs55to$d=.i(ArgBC.$)s*[A$S8Z\jt11WZ;:,Q<X9A5Qs!QKl'Mq)s`88KuWDR3T#320T;
%5Dj&u@]O7k+fm\_n]bZ=f,Ma?W20=`SJm9[S`-)n]$\HJc"Pg=UMBL5=,%q/C/o!kLZp:597G,BU#RYI)U2AO<OH%n;2cU$Wo!p:
%AUksK%oC:ID%'7]R/2eUPeZlUJOh(9<C'YTQkK0g<CJI&0P2O@Mdr^[=Id3IQMPk\]%1EgX2[C5gYV";=8hdrTHpS[(iFph073*/
%AN^qYdW&I`>c1E<[OGuM/h5CC`^D9@[aKsFX[Fg,#,b^CV,=fO<%0]iT[c+@YE,.X<XmPC=L"$-`MaVW]i@fd=qu#Jh-QX9[,qNO
%,$0cTs7rBFU7*nt'.eh%pbFuRK=[5\\jq^Ae_1RLGX6*Y/,knidrq]n/c?Zao2MPa]fd.U:oOO?Eo>]3SgCVBl8E.66WY6d!GNUg
%3lXg&FZWW>#MW'F6!./d2BX1^A*O-X4-`Ph6tpCq[/")fcjT6i7Ull+Ue7IaT\2id6+<rt0%?\C(ummr3Ctu*^R10EG?aHS%.*Xk
%U'>CRm7qb0P:B'3<Xaa616NK^_i_m9*$*-T3P)/5dcK`srMM,&>8N:q=QP>2g>2?c-I#uSC;Y/2@"0RlgYhFmIltG?h7Ib`=#7Q+
%]&2F&[jPPh.t[;j:M?k&YWXq4i,Cga(#)eB6os0aC1/]tK8G@EN%a8>d.[=9M.+!qhe'GY`?C!qXBKB^N0)`,@9"t973'2pC',?q
%JITM$=Ae18-<(/$2nfLYe(id[I`2""c-eS2,AX[,Z!Z'1GK73T:nui`9"=h@"VG)aW#-%Bdd)FX_^W?)WR0=/&MI-$&ar\J*u-.h
%^D!+W#j'eq9TlK#dB/bTTi"h<H'SGm_ac'>](LBRa>'RG`&OYoM`PUr\VAjiTXf<OF-JDMeEQPlnNi%/cGUXWTSC9X=%:/o2/j_6
%Noi$-67%R%/+mn$Q7](`@B&tlH44L42&i*e+@,>=/S+eUdHj1VG@ZC6o#&Vb?M2Z\?$Kd!,+>f=M6rh>>=S?BjjqU9LHd\4YO:,^
%bZ(I9mZPa&K5(4S^/P=%`gs*`iq.ES7=kfqNnkf64p8okB%>)sj`Z)!)cN_C=5+bBA)2I/O,^dElP/bBn&l1EWUIQ`2r/df$(&&W
%TM!om2AId..6#O\@eh4ZFcC!'jW8c4`%N%lW<78lRdLlM&['@N<?&BfeA(p$>RuFeok_UF;!'aH]5(VrTMeoV!OTe:*Ba,hGjF1L
%LR[`/eJIA#K=1&hCSu?`EEU'JU3L<nq-gGcVVCk@S*'s(De&[hcI748Ch)r+iVn#$>8"mVh7&^VA+pD,Sc>"j>W(qfDgk8Bg>6"M
%[^Y!EkrNpm]t&?bjk"h+a^./\]sk\o]]38YajX-OSUPfDd+;V""*>s^`MF%6EMo$#p,U;[Y,u;NNP.7.U3$#&.DOIdk1T]Wfl,Dr
%n"?0JL%4/MBP[?rF!9DSrcFShaedmTmPS0dj7DuqFn,(s7QXn&S6oRe(706f(XS/;=7PV05rX;`q45T-\#\sV0!\QLgm.Y*H78@W
%6,#b\^2IpQHh^>n"G:UT^0H,$^paR+o=O,?44uLgg\o@dg:b'9`-\uKKl3E!bE#;MP4a,]GK%ic[k^V=K?)YHX'Zrek8q>dk.L,W
%Vf,qt]@ng$ghZggH!Il3]2DoJA).m%b5JL_PqOf5g$7"lLMO$4VqoSRnUp9iJX,WI(KVr*_`-J%hTjVD%r75ulu0%bg?FfY&F8]k
%1Xdi@P/l/n,\XKJJ'i]QPS4Qjn]iu6)jT3i$VVoE:R9U5]kg[gf$k['ln*);G.6nQ/$(cI5.[$:rP\.f'tM>Na'3K*T/Pp/^!F"?
%VtD@'dSp//*jXl@J&bpJO]5,_f.25C"8$GUcQJkKmH<*WXTug,O$C(W)ib`KaAugdkf,Ts]?B7WO.R2soXCrHKpSfgDRJt6[73C-
%>sRn+j71TrKiORkG54Nbo^9iPB)12^09Vg@LnVM7XQ=X.[B_H;+aacT5aJ#^@4dP^1@%[nIjW:.pY*q1s2_s?1+2m9O7O1R0>A<.
%pYl'%5C`9NlZrKrC$+KVeB&]e0C<CIW/2),LsI12_+j$PL%erHFTX*BnFiOJbB;I+>tqf"qb6n6aBoo'b*&RIY.O9"l+P>cMG)SW
%FAk.DO5FR&q\R6=<pT#[gXq#M9QJ7`.P2,MI'i`0gMjn!;mU]5;:>?;;U!+WTUX3H:V+`gI$J6%(Y/fgfJ+kUTr7h$Z+YG2\XPU)
%dHM-=Z]CRfdehgLhn"GO-`GM.V^n0a;K\$?YIOM'\WXSa7ir-%`n$otf4qE+hVj[C?mLUR!BKjs11r7r`8&qtf-6+=bB/4-RrGbN
%:gCDh^Xle(%_cKJMn+`^[R"5kQ]&Cpm=Woa6hmmLXn!k._T$k6n&`W:o94Msq??uV^c8uZr6Ftu#CX;B6=jXF(E;f]KB)@&=+Y@k
%SXnp!F2rR=a^4YfA9/Q]bZpuMiDOg$I6+/SpNE0ao@igp*n3HPO&cg&qi@A^q"V_pp$rf=RL*&^p)`UCcH<Q=n^eTQou`K[U2&WG
%iH(SNfl(,5^HL7mMZs"NHg#)-Yu*Ii.+0ZJ2I=ej"2=:H(uKHCV<dR\r#VZ,<*c>t++/CE#J0KJ_otucq']G8[JLqCiBnrPXraDq
%00^H.Tppj-pFDbNT83^W\\7GZUrS-NHB>n_4T*W;&rqjgZ^!URE[%0,lQ1kJFl%>mLB(Abm]em:gE1uLh.[R(:J+E5OK[PmLqg_)
%purH0b,^rjea7[c;L)Qfakac_-i')^T<B!=$J(*I.VEhuW35EXlu+OgX"TDgo'94&W12-/q^o8Tp3^-c56#ST5McC?T0+tQgps&n
%DpJj\]_G0&CPO9Zjo2a%]IJF#qW6!7FG%Omq$5\c'Z3#Sq%kuj>0C_B45;16+oFnOr36Q>CIN]b7h>.1CM;g&NpPj#12u!;/6Q9(
%@FlINb*rf]"(U(M_;\2BAFN<9,6t0%FhIJ@[CWTRI'AUt5*[-tCJSMWf[R1m+h5*0X$AUGi>JZgB0I>p*CU%&bmAQ7N"^Ig]:il0
%*Yr22moBD?@0S6#@h/efPla9ib:71Dn="/fd`2-4]m:5dm]#)FrfroXoT51ULAbW6Ks1eB:3f?KgD4lEF8-Um`:G$r4a@sO:\K<'
%jLp=W'd!L*o,B\MjRf%VWj%-YP>-d1QOQ45b0+,`*Fh&'LRM+k6J7GbEn05od#GVBN`*;/lhM*>ngnGs(X<c,_=8ShWaT6t[ju-G
%ZPe@:2>e#^:IEP#B-VC0&LZXq@S6^S)p(W!+<d.1"H'l\IO=4t5ZUUcO8BO%kV6f2p>2L!hud01&ci`?E&7kjc2S&^\.sO&4&A#b
%1^);>L7p(.[\l9WbU>sCJDBnfckOL9*_I>C$7k!"D9H_elshh)B+oG%+t,^p;`PiE)sr#D_bhOXYZ*YX&c!]j\O(7cTZIgOkf%.5
%+.sD?`H.P-ei-1o8UAL%qkQj`l"bj8Q\)tH?\!:pAkK[oh%1r4cQ$4q^'#8IA[B^WAPV*rX@"N!H=psT$kQi!o8!M!ID*!f4R8M"
%g>4XrmlW58IK/(][;5M(QNmVRM!rb6fL;j`0Lkk?i$:FF`0/&iq!)FV56MdFjjUHt&%[n@&t:!;MAc$^rX0UQoM4YU$u#"I$UYWZ
%<\ISSjg4D,g.h:bb8f&nhdha/]=#N9^%LLDX&\A\\Eth)r@$lC,n(Vj&%eH/^1Rprfu(T3XS'pEU1SK_Hfl;eLr<oic&mqj:1#"&
%?aLl&*S*^"HN&1KoCC`'O*YV\QEGGc#@:'8W-^W7T#GD)Lih(_+s$;l!Y7J4Uk>cUn`I1P14Si*ICrlHqueE"I*\eE^nc0=o`]9^
%Ja/*L@Kg[6:t=W+?Jp7oTU>cQmOVH8`n*.&C.joOM*E1LPG_bb4N11.JHK-b*BEM.+'1Z;[e;4k&9JRE'`+@[8Fe*6.-/E7r)&Qr
%GacBP>C!)lG\oYC$NB,&_q`f&&%VAUdjH*'?U,tI$:@_a"AdVl!9mr0^\:Rmn@<'1oP37#UrT&.^'87],UrqKD?cl/#>Z)o6W#gj
%?@<b^/%qWKKVcu%pG)tP.R,P74aZJTG<Uh@m.Eu%U/%IFCqma@f6:7jLIG3lY?tZ"0A\gW=rXP/\Y)>f7b;;_*MpTdCd#:oGG'0j
%MO5f@q>BG_Yu'n<V+XS.Q4V\P]taQg(8\\\g"2#60UiT\=#r"^rNMN3rTa/p0u$W[08,^24>7>nfA6$cA+/N)1Q:_udj=YHotB/2
%l(*gS:Nt+0I!g?;!tWj6Ze,)8+V$NF#_dI)P=/c`fC[0*H,0`-OMW\0b-e7#VWJWAr8[!7btYe#@8qaFA%VF\\=%gEpt8mG]ALM_
%f\V#Oi@[O2=*JuRL"8&$]Mne6]Qqr"gMcL>+Wm:,GH$A5]20<8?+%;-e';aUYL!^qh!3<Z]5Z=HkM)JE*i:/B5&+*dDI.Dq^L^0s
%\0''/C_\k.7e(TTKFp@S$ZpN@o#7RD)],:A1(!4L@N94l"86u&Ckbu1Jf%FXH&t7'hJjs`;V;JDjN(_*OtT$7<t;:#`Otl+5(<@e
%o:s,Ka!<#df;\?TO`pICP+:>i]CJPiU74q#Q.NH'?@BEqCt8p->HI"0EYBS*f)4C'jO`:-DYk]-M!+0,?[6"m,$!BDJ33QS>+NBS
%@\N=ig"O8@X2c$%`Nf_So-;WYW*OZGLgNR@O!4?2:&P"(ml%&T2r8tdCgK4g^YI[j?X/JqVG)S63]Q<NKQ!uAi6Pup&S&!0)9[_s
%eL:M05AoVsk/!X20_i=E.5t@&o.No5mtO1@Dl\44@/QVP0:WpQchWK_r'b&%Z/<f.gR1ikdU@9pc\p5ne]Xe)d&tZ"d9_=q2KQ15
%NPao#PB@(a^U:`1>'%9C_kZnN)jN)M"Yfr3USuA2N73u5!6s@Fn6&ND'[J\@f)'fj:VYM3c'NX9B]#GI]^QiFXIHK@S!Rj[r9^L:
%"&@SupV3mHQQ+4BhZ\&7[nFUC!dfhMI^PKDer1!YRoe2`q9t=U&)3RJLC?pQ=-`H3rOVN4I$K\3q>>SH'dYd\fCF[fnR408na"Cj
%hBgjTIEsh8lM&Hp`kgu@7Z^Y/"'C_E/Pf"-5Cr=bpG5;egY_l.U:Rnec;gJ&\$n;R9.k_6hs]W4jk`0/4@]j=X\.hVI^aE@Qt>`"
%B7TkdmbIn:@_=<G^Nd3M4?kE@[!*Lc]:Yl"DD1hJbPR]cr8kW<9PcQ73Ui4^Ns8e"n/;SF:Ko@DQd-0'>D;\AO3QP#(,[fCjMCfT
%in;!M(eMUj+.j=_I-[#-,'B":4.X66p<iHNraYOuk2bU>SK>F+gC;lmdlB=GNBO+#K%[dgT8iooo6\G]jtjN.gUlp4q:--/aEjlV
%3nKe:8Ob[0QO`n]Xhcj#`ipr@<JOak)I/5t<n?Q:-\:%G`.Ti0g%G'ie)n8Y[;J)DdY=+%Ib8q.AKU?SH2clh4WH@]4e&&-CB(K8
%U#ko\[X,Xa$=]2c,:\4k]7K\G"m0Te5`Es7&3bJ`_?MoSIHM?6[?V8XS]o7fU`:QKPF&Jqq/X__m2=Y6./eeab>9-.Q/).\AOT!F
%=Gftep[P<(2lY8r(Y/HZUWSb+pU.D/bZ*nPAQH8N2fa=ej&L!q2#m..f",n[kj.9:@Y%c8(H4*>GC>dk>6[H6ZHf'V1Jb?)WG0K)
%.(?cETT,t,.mTcR8#TP=q3S^;F+%N)[G!eA:u!riB>F<=H1B1T<<@1.)na(^+@5-k&B8@+kh4&0kL&jX$:)Repu3sJD(c>qR%)(V
%h-.h/3dl.SQp9@j/hT"!ka?YOjgLTUa?lTMY)rd-k^(@Iac&3nQcm1ZkM'3Vl'3FJ@$LsYR.ELq.KsliddCCRfQ-[[@C^gc)&3MC
%=iFD41>8cN,p,C.f05/Wk'/OP="[6Y)ZtuWiJTGqeh8h=X+NntZjHfh/%'dL4%@kLclXe`I$+jUa=j!+O*=>Rn6"E?C]eRX]92r\
%^#E[T_"N3@U?KQt^:g.7+'`YO_#'A"2N!Pr<]RZZC^D;FmAaDXh=R5c>J7,Z?bGV4$@C29cY.<>p$Ro<J'a37b88.ZQTIs,bn@4`
%:[d7rWcW.)RhmQOV#9Xl[W^:%(3-"UT/X/+LA")[o?Q-3`THK=_p!,p%3>(+XB'eZ<b[0ubLS?q/6u>&na$1;1YO?=f[r7-m?dS8
%%Hk:jB\6'i]i6t04C@ET(W]<Qp#Ns$cNX(/mbM^HnUhuC4)d`^]m:4UY!f]EoJI@U+*KFo>r45OB>D^RO1p6:^ABCS8\_YS^+V\6
%2SC[-Ag&"BJ34IUb:9o2)q8T5:sFIdG.=+#/\f<3(%X)EQ]&Aj];sN"10(e14f1R/_<r>Yl_/dphD"+nHap2)AOPEjk4PLU&o-W8
%WCEW)q*hc&m!d[A)C??[[ZjNF?@=j&(;G<l2+3lNC_c^^7FMo')r:eT8;UEd=>I$DJ[p$?SA0<q]Z3)e4&:`Heb"0`S'%)J9AiA<
%OkBI"p_XgW*r#9G>cF4N,VV0p*^4C"jP<H;4>QV*]7W0i^t7=`hf#u*hVZSmI.@#ZhV7mI[te[));+;6->8RkFhVjEn0%/4b(9ES
%5QLNUH1A!-H*+UTco^Jt@glX"5A3"ZCV@E)AOD6R4$+POPLIDE8`j=XdX"^r2-HloqHT%GFXaGhfi!nOOXmKCX%usWMj_KMk/Mk^
%gZV?XErMUh8,6'.^!8jBXI$kk=mub?06R^/!C*D0CE8&o*uE=0\J]`GI2<PE4%b>mjbFqsak,_A`I'Th='K$a)tIr"?`[o6_4mO&
%A?Rr$f!NcOe"4d+?@omQm[fZ\m3t3c^:p)E<f63snj`U6U,qttPC&bBRXB$/7ub3cr9<s@lOY!jB7lGo52=jBXFAIOJ_Olj>hPD7
%!eYl(JNFseaIg6AN^2s&52Z0Tf).!4AfsPf8?]L]81UI!MbcU5Y8-Nrf'DMF^aFF4$N&rZCc(!u^"bnQD=KQ?j`M-f2ljnDZ4,.R
%l_E#.M`V`p@-&_=:]C(b77J2PimOFN(tEl?pu(1D4b(lSr)b;7L*jXBk0MbK;EiduVOLpJ00cVl4V5D'%M&rDmbKPi_/o4d0iq^u
%(=-%=DY/#f1iuW/%+t)`.pm@a=2fs)UbB=tg.%:pA/a@[laVf5+TK"CiEh1EJL];siP++YkMHqh^BV`'^\Db\WV@J#9b96L"SM23
%3re404Y,6/[<')Z3aXIK<:`eMea>Udm[p0h\(-Zbs"(T;^T;Q6-TQ/NO_G]-nF\ZobE6LL]OEiceW@>3g"bH^r$ErZ]-em(q=6>d
%**9W$rRO5P*0rl%.pF^d*Z)4\I'Bs/%!Q$SmlYQ.0*gYn.[U'DmDDFt\?hK,^T*XVqp+<8(6%uJ*cd>g\]UI=%h"F?Q+lF@qeL=g
%nuY!a7g.h*g0FsghOO%B\oijss6j[3Ha.dM?s]Gm&o3Q(gtdo"G3\IQ_8DgK4ZR/s/WHacC:,Q6k@h5#l?U&BlL@]@ggRpAV@KE;
%K+@1;6aZq3mlYDc/&B+m_tVC8k"]`$^JSp6Y$-gRQZ)e#=6Bu%CfVRf3WE\='9!o]IgASuR!95LcmIp6eTi:&YtlD8%@sjU[=*Ep
%,Y$TWpX7g`H!k9(=1DVh5N4YGh/)^lc#KL<nh-[>*_3&sIcr$*)Z,1`cT$q/:Wb5ha-YoJSjl<q)tD%PaE+%Un+M-/ObF=*b,7o0
%@F(mT-(?\)o^ND?30q>:G=@N9?VIH-AcEs=&]++7!r/=eS$@tb.6T@0'Z].*<>(,INPmIZ[E+"e=L,+F9fr/A"(RIJoY\*-_W:6h
%VY&oWRYl.(W(DX[@0RsF3<$5tQ;9qD%-CWOkTXX6:L!V?!?;$:Z#>-d[6H!-6ggoHH5Q!)e:4u1hI8r._DHnI-k'-Ti>-?c)Ekm/
%G<$$gY#L)</=]tPWZ7CrO/\NcCJ`e[ofh%KZl:^8B3!<C&K(c%fWF="2,&B9=L(ZHa#=(pS,7HoB4quT;4^B,O$e>[0`ateE9W;%
%Bu"CuK@)kd8qa'3=;p(IjLo`9<G>3Q(s5o17F:Sn]^rTIn"1FX9:bNX$')\9=#W,(,K;-PpgdpDkK1f-#4eSO2OhMr66et8,UN)>
%&$a[N?MKK>3"p_qEP\>_Q(q-CN1\f@6TgB^_^tW,9"c3e",9N!p9@Y.qVGqs5BGe)M>@dZE=[0rN0b(E(Lbs(gAYfnY'[5t"lZ(=
%XV:2LNdD8%S)gOW3S\Afga8Wp23.:^+ks,c5Z%S_HG$QR@QD</o;P&Hpg_2q[#5/[ABl.1A#2+o8*K`dET/aM<o`!&m(#?o<rYHg
%j"VK=:B\&bB8WW,1XYal'G0L>+ZAUu`F1:2;+r$DYZh>*<\>k3%hOVJB%V@YdS$YBl(0;9_\r*5T*#N2:N4+<3Ws6nWIFel/^=ZP
%'1"BQRBj)n7T>Gbjf%bYq?*.0hQHu2L2m@5%l'@qapmu@jK;RJc5H3A3DtVRr/BEM1\loBBJiEP;="=#4#RjRk9_@k:Vp%6a2p]@
%[>WsPXGoXDFZ\I%<O[-XG:V3'JZ8qR8`UH2(gbOX[O5^1&j7^T]Ih)_opJ]52K<]k4\%CflCB0<6VJk9\8*iCn:gR_c3<#t/]/m2
%$$&>SV#T]*&Wb%GWmtSiDi)-NA2"*"H.?*UX-8k=j\,BMlg;c?TVTD&05`$24`C*o3%94_(WBHlV(=1R4262ZRB34Xl7rkRUDe=D
%r0uMiC*U-6p9.'5<`1E8AXl'J2o/XT35@=tFdd]ch"uS=hs/AaTqFF.V00'#0$(Q%cC^FN[b%1&7/l&$r6636rsio`.+!0CgqNID
%p+7Z"]TRU@:282U5/L7erHf_7]%Q:a6]-KmlGsJ2el^I.2k\Od^Ta(D,Y`+#;et/tBu;VF*'KTCb%t)C#UTdH%5Vjg6J&Vu6W2EA
%Bfrh*'bMAfP8ZPXD*o)T<"-Z>jmZTJ2OG^nUhQ=P7((+/+6'61PY_U&LW]nP[r[1+W?Gcq8KJG4U]mLp0A(!^(38nHl7aP(Fj_&g
%%(d^l#rMucV3F#A$AJq:Wo!-M/PH/2c-s,c0\rJk$;3CaANqAU;9)Wf!biW?<2o8(CsbqGfT*V8>1hcK&G=ZZN0;=A3Ui.d#ob(%
%g(4C"cUlh9^c^riU0l1p;5K!V*=3,A&c-Aaho80>8/hOH=^hsijN%MK#N*CrBOMfojD[':-<I%PBtu^%$d5bkFh?UOOW#uA20;I\
%h11ZTbXi2XR)BCjr9>&&#PoZt.0UdH9GK;mLnQ@o!<]?T)AX)kC"o@e[HH2tP_alg5qL]I%><jN0lT2t2H=lK?H57FM\2tF$(0>+
%&aH&'.1<G*?jpEV7ns%k5\UO!DJQHiMDnF5$FHZZ8m'fSeI7!c2J#\fYbp2Q7=YJ3,8_1mQ#JTN0"A#eA-%XGJh_EMd\DS-1(`0U
%&Ses<+HjU-UZ=*;+c25U!l[W<&DU0;FU);f;I.ld5T>;Fq,rBN+rI3a7J_on!cBNi6Rge@+Um@=&?8oE5sH-(']t.@!)BIBEZC2)
%+_0#SVq<E<$VVtaiS]:)QE<dH1innq_n+X.:!Gb]2R#:fm2/G9!HfrX/*ap39r?PF>(Xl4;hVKG3/Wcr`.rs*3L3,]2%<3eaGAlT
%:(.t.C<.7bi(Xm[-7h#O&1gHahF&+"2*h[NL;ZJ#Vn`:Ca)iCX6!o/r;>fC5WJ5-@^jjX/7H)l3+*]kT61_toeH`Qf5\#L-?j;lJ
%RNPjo.V39+Tj&KRUG>ajjtM!>9Mcao)+r.=WPPF"_bpLBNGsClZQ3EE&5*cVp`<+/A9%hb/@?d`iL?f<bYcY;^CY@H_ENK@[OM>a
%`FKSDNikh@SFmNOb><gOWg$U4%L*JU$!e-bKFLAChAiOQULSneOFmR#gHqqma0bMQ5lS9-COKmtl`h+3;E[0pJi\QA-)Dk\&6_Sk
%)OCY:;G09SE4CX]#q2$)D5-T`OD!:K:d>6]8d\`3-t3O"'UBc<1*N?FV;.2r%Y/U?V(gk?YiJ,N2&q0k"%@p.819))5j\u?:h,ak
%>n)Ji7qj#T2Zq9s7j+c6>lZAl(_B1\!9Q^8)$+KFCK&[a>\6E5-j=[p.1ANe#n2%L^jl]FZHj@S8m>Tc!8q69VJW:d[>5<Q:a6_:
%(uJ#f(_#P/%NV)?AnrY''HdG_2bdN:7;?Gm-V,<--/`(MT!2&dr0=*<FLW8lXeB[-,D(=L(/,]j%h;'s"G@L<:=\:<#kcQ$UD+iT
%"5h"s$mG]sA5K,Di0u<(BPEfD&NGCQW_p-0Nj<!L$jcoq<+MZ<.?TE@_&cEC.5J7b'%[O41e5V&*E.8(VP=Q]/>CR3@Zfn':LJ.#
%C@K"gA-c$BQ\4aq7C:h5XSNt\7HY8[![I@q%n!'fn=YTV[/24E7p0a%WuP>jFhT52,9n(-Kbcp"Km`sfFjCaZ4V#Km6<d`/6T6tY
%6p5^EDZFsjW\1sc*'6266MXl:5[8<&kWogBVh0E?J?flZ+=OZtUS)u\RBRBQ7m-k1\2:./]9[lL/%,Vm$t'<(PbIKOA]Y_(nR=nO
%:lY2m6W@PS_9a-YFC:#'F4ILV-t-)H->G0;@K9`/Ma1r('Nl@B:kJ>aiLQ[A!1RFhD[GlDbg6P3:eO]l#@VBu"!-kFNeDod;+4<R
%W<W7?VoOe$[\Q6?$]`R9#A=IE9L%_mTRr"3G(L>Gn,SbWfihM]30dr!98.KPTKu_<6\jD6odQSQ-b`Y0jW46FJu'J.gJSIjN)1&@
%0U,jCF18!#!CIAB-NW1V]EV8=$4sX\#V8<"g\tlR/N!s&!o7re_br7D[kkt$Ef:8:*W!"f<6HIo=YL^1$fSglA`<Q-_a^Rp/hfOf
%2?8,0C_MRV^^qAMqjGlEA,dZ'%UlrOAV/qNb"l.kBeQ8$!lc%<7^TXWNF;KW-nu7/85I'%K.qW)MfanC%'U+O8lle_ZbU&m1.#Q8
%9FNY/&e"1pD+!7cUC?9HO'Gfg(b3>SdPToj1/fM:B`PB:MW>`#9s-i]=_&**,%IS_%^8>LoWgn^/-a^sj(^.=@<(BQ1/3YB&aF$1
%,:SOc^D"sGSL9;LLoXD4F`<Ej#49@UMuXqA1_*#EU)[.,_G&G`:^U3E4@DnBW>D_T>"Lg1#.9A[R*=&dKI+F(;JE)?/u"BCi/f[.
%h<:M21JKlaOVnWM!sWXXNtN-^pa_@B"QA8tTrnGU#3<r$7%$ri:e$[VDHTR7E9M8IjkBp7(nh1=7nK'f5^*Bd6C!*jbCNE3DWh'X
%f[2r=bElt2X[J+)U:poU;IhIKFlm?p,qUU./PtE!*l7&+&Lp;J2$-9<)'OX/e9Ag@m3qL5Ae=&in8&ZK4]H;qjI"TA^_era9pBGQ
%CGTCt_4)k)2N*gfp"$MqV5Pr4'e)#V]k<Y-o*Wq*RMZqKa"O/dku'(?PdM+'<47Ss+b&nFG3HlKH"90-7]rZ-!J.\>O$Wc1quT\H
%VQHa<_O+_Vr=HtJXr4Ct'?:!_;+H0S.U4BcLhO`#$OgYV*?NCGK5=CsMmSlUV]I]);6bbdh*`PI0L@A+$meATJp\kGe"rq8Q(]`t
%+>_]:<bYs%5_RO]V:)rr,0Y63A;&nl5$Ne1ZIB<Z_,Ar1g^_'/.M]CO[o7BeKO7,4WX$SC#;9!\QB$S@oMN=3:7:lS#fR`3qF%bi
%g0bFV)DFmTk#D,uK<)'VRNBIk*+@Mmoq8UtrAdIt)7s8\f>.VMTi`Qr3gsS7VTB8fTeF3AEgihDaRBfc@i;;ps3K;dlc?@_fj\=(
%J%/)QA-;SCk<U_XV%TRnT`AgR^Ak+7_*$cEbhXjmT=/#CiSfF"%Ek&WIiUn7"/q#r`*ppRd754Lh)\SA^[TZ%1sVV7[cK\Qkirr[
%B]c97LjdlR>e]<u9>#gQ*Q:#oDYWr,HE3[UmpfYK5EqkdITFn[+$kKu2L%CZA'=k`G5gYq<eTl`6I:EI#.>&ol^0\s;TG<BkZeHc
%p%.d82(bi`k[uT;@Bh%cf])5W#jm:]f[.82)-)Xrd>S'53m1]<3^\3m,W<`K9R<:rT#3@_-5'#E]crj9a)c[FUgc-\n$C1Kq"U,]
%<Gn(d[#PV:+6TEbDeTQD@ltd4Gt<%Cmp)Uo*[oOYH/H0_p5%)cTRGJ=YXcr!?*q<7$2@^b%i@/dAr<Oa5E%<`a2`'81t!";Z7$o>
%Ud^Kt?NI,`inU%gV(P^-Qq&bPJ9."YTjPhudaU[7.7UBl)X/6F^)`+qT.\1Ir%5Bq?;j#n70u9G%mpaQ+$5=QaUFq;`ZQ8oS>^+^
%oGj/Q9W5)\^H9G"r7\J(dM58O[s`X+O.EFMShf$ajI[MG^AgaE0if#5i7Asj`!PR.EqUS0LApjcKFs6]RqRW?Tn)a<UflR-nR@N2
%S)pWQ1KN3k8%N\iAR*!-'VD"!j;-\"(WBF8M"uWUHhhN)UpR;>*>+D5Of-*'#Yek.R-sbH!'TQKd84S?$q!QO+iL"M1i6iT#sk^/
%3Ii>Pb\f]%n7Ffn)<[6h/&XYcPT\NcbTC=r7pufUjR]j&;"9]iOK(^h-uTN,mD>WUQf,Pa+3/&K*$t_eaatm*Km`6cF,<81*X=3b
%)K^Y9E;hb^o-K[I4WR:2,$\@!Zd.`!?.km&,Fr$%8PI"1'K%Z\dTH!%nW%)_>DY)+s'^_G."UrcFag2:SI8)IP4PWsLE;5Zi>t5c
%KGNb`*@&4,233C>'!6qZ']NV#AD?iL>:'Sr,3RH*5'!G<&]`QLO-Gc(.7f<2M-uDq,8$\nHlla@ap>n+.1tWTMJ1O\n#[hja-&H#
%lqfb1LsAfS51FVM6^LiQ2hM.1o5a$'384"hOgFWM(t4+-?0!FSQhb;lN9'nLQJe.u<DRr\?hhaIa,B[7JgL&QcYF<"Dra1k"ppid
%(p(s,(">$bA(,ZfC8Bu1Z%S9fP*p$WT6sU*OZ#31Cl!4!Fis?lM\3kC=E\>I"j%D0csND7(]bd>E7h/QnkaMo=5b+rbn2#/-mP!u
%CrfUkQ&$23!]>[H*c6ttW[Kj<f\ZNnDNJd*R(D.:cAriL8h4J03`HMW129t'[;qJ.r@gDG*#;c)r.hV(Z,_<1S`+ah'IFdd^RhbW
%%0+cb@k\ao[.Y!iX>?$dGLk]dANlEEVPIir-dB\#jU[J99k_jUrE!de!IQ!KpN;[8e%L)Z#[DClPHjeb6ld$G$l-:o>rVc9NsM8k
%+6J%1UaNh1??5Y56_cWj%OW4(2.&07]OI3AOu$71:3'uZK0tDErUk/`&c>nm9-e3*g_Ka?Au9^;hu_t7Y;Rcb4@cc=>AuuC'NoWA
%AnK0-hH'rZ-EI/NDRV5>(dbH!l2<N?f`ViMBIaMRb^aQ<)In7=U/,L*>&C;.eR\1"g*27Qoo3?R[Imp;'D`LOW"rD_KCEt(QW!U+
%i':n7cK!9VU\&4F]O<TQNEkhEV!;!RZ<G?;IXN2C*7>;O(p10YKpP&\pUCi?L)LTJnbR>tdupfZ'F5o/`K:)(>7gns"?".uq00A!
%NdtKWWB`SGA]C2qihq1qUgnJ#10PP.-"KBX4q'+h.X"<qb]2AmU&r(YD-\-?Mj3hQW;npHP0EtL9jHO$[%+iMH;ntnIod='Y48oG
%i*]7?$m[QDKJt,h<FE[FVI5G4,Z<Rdit+BI`oCC,2oa:I2^GqF*[c]_i3\d]0MIL+O!`nWXRjciiD!.kr>_)/"L5a\/'UFP),e<Z
%Nq_QujD-K5emO)9d>u;6kN`YPUKd;u8@0[(#AmXTCQm2G]p#VP!U2WE25D\meHuE78batm:'.!p?J.>PC1^]W'r\R*+f2l([/O7W
%/R8[*TE=E@o\am1?5m.*b`G-BAR%Sl"nY!UUuSDFJ)M\&B0S*mDs:UGc#FXR>.-OWN7"\SDL$L@:nSg2p_=W5TmoT6,6=6"[N8Eu
%Z:BFNlrL6"!CXG"N+T2<4Ks"6(bKh]UM>#WYp]H,A,3oL*2O;:86(lD5/KjKZtlEY+#)FO5BapUFs:l#/JZNukqJB5Y<FJ<6-1\#
%Ud=5.8D]4g0em^]Jh;oAS9767cK[ApSH23I8<o^AWS(%b3#8M8pboqVRl4:Y=Eggi-74Ph>eZ!b9b:splAV8g6X5ALp!I=K1.,<Q
%O32.-G,0rSm&ed.+bh-h$NTrIAr*SA?mdoOofbdi3WK2d8Xn`=N:EJ;>SnsR5$<]TA($^GddnLcG%LL_$(E7>!%F+5Zn/c$)2pcq
%AC^h@(@HDg?k(Rs/lPPgPjn2M51Ji![fP3V/3kQ'FbOU23-$9+Q_HacBV^!87Elh8OmnMn-Od`bOthGCQ(.rfI5X$P5)++Yhc;oQ
%Sd-eZ?;W*CDh_Q'PhfW(!+=h<AO&Ef0Ljo=YO:m:KtILA-+;b8g($pq\F\D1H%TGF(&8[AQr>/TJj?hgoY>#q#Y7W=.3.%Si"nJ9
%J?C!u:7mFS!^,tTAE\dl7`)dY3nG,.6^i'RnDW.c"kO*Z%Z0W8\;1dm\,rufR\:"7L>*gU"]j*<3su9ZGo<"Hh9Sajh,1Q"_8FFW
%jJVUXpb4TfP39:0ncE2W%cIdn1AHNH(49MG)H=Qc9kcD@W/qfr?uT[c<ldg;;l7RDKH7Z+_?nQsia!SU(XFdeds.<H.i:i"dYRA0
%o3<Zq?b4[*+WA0!PI&@A!6>c9)U'2,_6dD\Vh2=eL]*CWHU+UL$XFD_Y2>E1S/a\eU!G)9m1%5GFu\>?)\6a?f^%k`(d7X$ZipPk
%#XNU$*C*%>V$R\SJdVoVe6,X=N-<*"1i.29Z4I0p!n,pF_kH^,LoM?OT&%]Qi>jpKXD1c%N/EGOp8Josk2V4?L2R'V*jJ0,Hn&Bh
%?e^j_1"=F/&a`@;ZClte<NL831,W\rdWmZK8&X,^;$>c3?Q"FFCTmp2%VK`2n8;77.mrG5l#q:n?hff"DU@$hZAa>:G+hK_A'bc-
%"]e;8M_SjLs+mlE4n&m&Z84N-"k,8@;IY>F*'4AM4&f;o<mqq5#_Uf&>oaBhLU3<86O[<WgW;ioW%SC@O7od"<Y]0"c?q;GV?]e'
%duK3_-k/UuNmdS>f,ko_q0^B'bT8/VqQ7n#Xk\I]JUg)+@%>]cA7U#lmmH_ZTBA%,Ap;P#mpllKV"/>^a*UcoKU^\F1nbX4B41]#
%J?PRk.QDU-8La5T#;.7"(oaNac*7Cp@!YoAhK&5nn;aSP9J$b4^(8WEVO80j4s.3#fGW:3ne8K<0Z5h(?*GOtjQG=Uk<2e]80J0C
%Fs8ZX[f`\APE@]B=s!U;i[?Zj6Jn=X>1XT#/O_;RG'NPp(d7ETAus9LTZ?[TBii_!o@0;UJ5/n!&luX:Q9).&:G<"7_fK2Yp%<-h
%aK^#]Cnoq"OqK;O]a`"RbAjq(@Frr@dAU&<+aPHTE=hIVd^AC(3m)CV-A.2:*A_;P#BB/G0kU>I_QW:Vlopq=RU*IHi/i"pJ".)R
%RsT<8Q_?&4Rp/LIHpVkJ^eA_jfFWQ03qbptq/ME0;8NoP:3D;XS9rt>fV-SS%.WYKE14^5i66reH_dM&c`qo@X]9>IZ7OseR;aX5
%@O(\p`dreAf"G(&eTWC2-5P%%'QAR"4Ed>_]6K1[>%K0&s'^j-4B2<gU!$]bYCsM(X20q8^^!gk=k[p3K!aZB@32IZrWi]Y;0)F<
%d_qXd%-jYC$pQu.`<nDj5=`#\q[[E&]FXPu`X^::j>R[/`n1;mDT7c_Dmb&S5R8)J*nLr\hXN1'l"ru#dPH,nhbM#J@'oDL#-e&N
%8KBZPLG*(=Jd9TKI!luEjJ&-Za8\?#nI(E*MDC$QnmhjMTm.l6R-3,HJ(;+F@\m`JK;9t0n%<iV"rTmY+l"3%'_9O>`Sqp/liEtm
%'S(gUZ@=Pfp[rNZiKPK$,9Rg%@4T+uW3p[CB=;fd!DBgjpOMJX!RgTYA$pqSWU@XpqWaLor`n,I8GR>>@l0,AP4nZ&#P7V.LbJC_
%G=QM%5;?2>"F?eai(cPMF=HBV&[+TmDYM4;aT:7L58oHX!l(;;p'O/9Ztf(OQBT+_c;Y(bb#_&N;dbcgOeuJ-a68@M^fnNi#O=)4
%L`C?`#@qCL/&5,2)ir1cX=e%T<Qe:9c\SXVni7$>4m''tIM_mg#fAs)j2D&l/ct9(FI]5%GBDN>mfNuci)X6B)`GkWL61A<X\n",
%BfufehLmQe8rsO_[QDquY\b7o+?EZW#_[f%2CE56]OLAG'<i#b_6n#CQk:Qf+'q28Oi&/n*B"c7^EF=eVb:cT7kkG0d;5RK[dl^-
%"l/1+fYo%bV#gHAD0rbC/YEZO!e=b[6i&CAb3S]bkBKS$3JP)/#*%#4o_%a$@XX[id$T=n*6kZ@:8@$`9lPVDPAFfff"$kCEH6#i
%l:G%lV"QsEG,iT3%&IGs=isVX^;CZfY,fEI9&17;)YWiDLp+Ua6Fk`jGrM9$-E1SRD/D]aN/(*+UH[X]&PB-Dd.,S0&/kH'&^7F_
%q:]a1TFLZYY@2UZ1*.p1#96Vj%*][9NPd^iC\][&J/t-^<f2#)NIYA-M:JDni>)-iEYN+V.:p(/$2E;=s,bVBPbU4(`Is/%7q5"K
%,ZG:n^>DQ+n&<P.d+pFORD3t2'rkoA!q1Pr?Pg,?(F)ZDRuu/UCj@=P!L"'g_Nn3MJb0F9k=hN;cP-tUm,VmFEZF9@DYuWhldTrT
%(c)4H<M>Oj@!X6CVuuqn35S3`KpRG`*mh`,DK-`A>,4Z%M@6&(jpbM,QHbMPP`2aFaGP-LZr*h\:m>1E7`2&(4^)c=Y.<s06RaV;
%\>cK,?@NG=;YNmO'e84OL/[h(4RQ7'h?G;i1c?t=M;>o=$*)Fh.(M96S(N*C<$SFU"W&-q<r`['b/?L6?%@D*iIo%o7FbW[C\hIq
%!<g:d/%Zh;WW7VcjhU-=N-*8>+qNmnC$%9'B\MU_!a*Y]JXCp'H";YiP+Aij>9,/SUl_hn>elE&Tt&"'n+U7D&Yams`fJGM5j;Xp
%!I^Xd_MU`*ie:<8QsNj+,g\Dk==)VZ?]%%-^)`$476:\S88<7`+UDu'"4+OO4,A4!CK%bU.77q.7i3CHB]X)LM1o?PMC-s)*L#F:
%+dRLl4AQRf@`4GU8=Saoab;AOYt(XoNZ"-cLcDj%:@KnJ6dL_b/itC^j%L.eZ_'\%aOeHE7Z_Kli4'8r,mWZOBW':Z<mQj7$Wjq[
%5a3kg?:PiO%()"E.mmYfIJBR&>OA+>O$5tNA7Ln3<$!#&(,F&'jFOG]X,*LlMl9nckI6<i?.&lS9sop'd-I`<=aH%'Gf54`iuaOi
%\df*_%',0p4'mV0!7/@)MDco(EcRIE'nZEd_WLb[>s^eDE\]V)q;FJZ:FK0O0I27k.uY0-?]++k2AUBO6Eh#',LD+u*>eeCb2'sK
%7l8hZZM1&@hm1%-Q$T=YFT!eeF^)QNA:CR]:lYr"(,cn"q\XaC#_@sDO(S'?"LHe^e84e"Il@h8KEPon&q:mnYHq#=Nra-N9_#o>
%n(SF6B%H$F%.:;^hXU;ZThUUb<`HR7!qWHPqfrf1/9!&aZZ7N-4biohf-#G`[1;Q^Pbj1\pb:-s/#h[HH*>tQ5JiZT^nu>dTRF'%
%1;i3G/EI6Mr\2:3%cP.Q1,q)5lk&;ZS%1r?19`MHAOU$)4LbQM7n0HBWe7\%h)Km$3ICZdjm!C%b=D&b4sK1rlN)XCIR;Q",R,?F
%pjFYQO);83+CjX7JP[^2Q"WofTcBk(+&9<V5^6li4e0*ip6g%DeUJ6D$':a&q]4@$V"f(qii>7cGX[#uH,0$bO72Ds&s!(UC^H#_
%4QdXC;7d83HeMLD\neF;)<4nb;'hb5m:7CkKm%FZ&gAeg,_R"?rUK1>4XA;A8l6J+OG6.r,"6VHgV"fMW1Yc=1oS,7<=LgL_MoK:
%2F)DNRB]Q%UbuX0i0&@>a%;9*UO"J56hBX4n/4)Zs"a94P[RH>Q#k"RORJ5dX0(sMs6KUC^]%#'h(/BPGJ8-JNjl?"%@'J[#?]NN
%]f=%GOaC^<JFbhFntYT?(CqJq)6?,9;MDB2#kf4cUW32JZis"p7nM08(oJJn#KUVT>\Rd?]pN>dNj\\9)"DLc/heUZ*D)M9koQUY
%&;]L`gK?NrQAPP'Sl:1ni?]m-j4-(A!0J`FkAm@Na9^>GO)Dk2_)+NS.4L#!n\b#u$'*D]?b.jJ%OVa]cn9suLhHr[/K5BjgkL<G
%SV+<:M_@69h8hm::*D+(W8tu\OfB04#*F&$S5CKlSXANQ?l>b0+j)<Yk>I17:F+4%Ol&%o>,V^(7Z8)/_!Y.`930r-:`!-sfET<:
%&t_Di;Mu*L"6em.O*iHaS&2?t<X;[2W_CK5So=L.GbV!>5#KRB?r)sMOD-oqUE]T^5$_H@r*1?54?4-^+'iDHh0iJ>/uFRuL-/D!
%]0naRQj`!"A"RA,:f+IFL/tJbk#2C5i78'e&4]55Mc]nZOCsA%,(Ieg0>EJN1q^E!knts<o$X/B@eh_!C.h%'!9XOi`QoRXE'OWo
%@c^6Rc[Ze/Whg?<_83+>!jh2pp/:>,-Z*op5p8j9a%7Qd:9ibE&T$kWBq^fucROhZpsU!<0\1cgYH8T>^]1L8RR=C6O9TBBiKH'W
%cu+Z;otq(3)2QGBKt<\@KtW(OoT,"+,&!qXN_"m@X1=t16\raHAU'NS>Kt\M`D&5!!6mdMB"CZkan8=;J``C@`bt^tfV)6[B8F"a
%aWi#-S>%ohAB70shsMDU"F:=!a)rP\pte/D5**l(^[:c+66STl(k\[AbPp-WF6q1]RLr5EmultZ)&$#9783\i3bNu/)qN&N*-Fiu
%<RSj#e"S<fUW7dW8=S-6%?^!)/jSUXou*hHdS489W<.B)@<_KN-IK;F^Q:\1bK]o!N'S"(&C=S2'q`ZIDBFhtQWO&bE?eXI_k%N\
%,Km=bDmt[A,hKj/,J'AC,Fe0f54%C/Waf.)+@]&(+[WRedE)1ocp`OAg((e>d;ZK8-=`d%`]dV]h,>TF(EUM^^@R^oTRXOGM8,K2
%f)AprSoLLS+DOs,9oKY;+Y0_L'&+/UITVN)bS`q468c2Y!%L+V0Oj27iiSqc+>C>W%W;UXS/h+ZYpL`g[<Qo)Nedl@(PDl`:KDK#
%<5d+G8Kl"<1B)%^]B/T753sbP_.mdU>d2L]n_f;]_nQe\ns4?k&XH5TiC&W@?!U^C)u`sp:Wfh?=61bRAE\-D84=jAr'L&HGA56a
%SjkC7G[dT\Tn<YXTC?cQbX-dDC/+ng+R*`H:!u/.DgE20C''3E@PM(382)>+nY(]?\Kl/gDZKR:^(nn&,EY6sAsgq@6R1$]oP]F<
%`9%X=#p\+YIGtCIEF.AQ?#U#ZR=:lp,-Lu+`%+5Lb]$<tZSAt,k9pXGV+B#7L_PqYGmasZktCL4T-!snf7LC`!6GM_6;idAD+YMX
%kLT@f>ES1M;*^h.(<:F<@(C:!L5V,!ZWR/%Q6UDM!+q^?TO::kX5-ra0Qd98n>+#p41<(1]!8r)bVs)ZEkMKGWd\Yo(_5:']A@J^
%F#o%rr11su)QLYj6H6]Wihqr,(q@_uh8IQ"XJ.+#X[6E@ab7$eoj1-#FB0Ec7BBAZj<*^4$TrCC@6(oJg/V:6FUQ^-YD"&=XPK'&
%R_CTgd4AT7WApRHf='L5pZlc(k!Sm%Q'Mt!N[Sotr,am"LhRU;dqJPMTs<eq\Wj<^"@GSqh8M1q]6h=c,nQ-Yo$S;,N6#QqSKn/!
%j*VXG;ERTIVa@CJ/BBkq?UiR]=a0IA=gmKVl;DXN8+JlQ+7/!6O\jg,Kmi2E<6OP/WVj!8IO-:Z8*<)mQ2r%Z>65![*CRpXn7BI5
%2M2l</4OUk@9*eKeGfgGL7RM=+2fd&N$8YN$$SNT8dhLPfoSs@gNg1N%KoY8Qe3$ujM5PUm#7P6k]<2p$saYtRC?B^9O3@jC#Ap(
%;N(b_#sj_O[8\^W/a4*LXc3A@%4q;F%P&I?+#Efc8!j:X89=P9AFPq,^ERo`HXU:_q[/K'So%^@TQsD.,bh%>#iJ'I0IFRFG^B_`
%"q+On5:kkb")Eji\M1^FcN5/t@p@.K6q&#4!UMGp'ncL`Ddui>n[Bg#Y0NW6!D?;C^4"(oW5fY!-)!2Fmp<9L=;Ct#+rdnrH'g9r
%)m)J]=T5EF/_g=_^;5r`Y2]`$G.;ufgBl4!9XS^6Mb.bVU:T4>$V^,ic(YnUJoDF[8$7>OiH:b96?*[*0cXU'0RpapUIWiC@ob#<
%/h97/5^=OB2sL`c%]B.niP<m-mo@n9PH/_+`#8c7er$$C1VqrMgU"bfJQ[lF90Mu&@uGS6ZVS^0;S7-2gKKG?.dGSRkJj%o-fBD#
%5;*d+A@*!B5*;!/':0MAcs$]EB<mCjn>]SKT<`BN-:WK,7!=JT9/<ta;4@G;r"e-b2uShU(/0T%?6p"8:I$:R7'Cr*l4u(J?9C@[
%hPBmM&O[,Y<lFi%,W<--,&7+a(@,MNjnr;7M3HU:+Y(@W_V(at!s6>;m$NmobT"ih<#jPnBi3!@I[[;2>?k.H+ZR]E3"D*j%%MJ%
%QPh[9''7X`KObsf(I#\L1R+s/;^kU*eF-'-\6DG/m@rY*@eW1._bfE]GDM(#ep:@g<XiOkPoYAX(-5&0);,=V!L*9)l^MK-(as(5
%",ar-`\&[-c+$[k1Sc7.#Ds5k)c&]-KIBuo5E,@<p7Kuo'aFmdXVSAs2D;$r>s8^!TGq68=\bsL*0.T4K3"<R*N9Ahl>c6WG']e5
%5Hbj\Zr=n,R&VN[]=N6Q&J5^*!ENK(Z/`b8GCZmG%+S'6(LK58U$&eM5e]qG!fn(aDg9j^($"j*VaF`GP.E4,^]d/Yk@V&`i<;fi
%XGdet@@'k1c6V=V.o\XRD"uGi>jTaF!5Gmc^f=fjP9>+H40o4a(%l[qd2u"ZJ:FVY*%\6@G2LtM=e[E%X5\%,H.\b<"qIJ'K4*Ps
%P@bC/0jKTZb<12l+H9jPUoGYkgj>&::I]WGX$-C7k*NgAoLVFj)5sU+r=*(9$n/[+nTsBV$5hO&;c5eEUq1K13?j.\OVj6!,JkMq
%DcHtX)j7o8*nTF=gGHBO?kX8#F$sGKP6TH#,,[&\$q>3uCi%W448F00!(C6XcJY8;6"l>p3os<+E\P4;45m12VCAMW#R!BD/=,je
%a,3hD'MRT,e_E)Gmtg=H7b;\o(Uk]NIu=Y6'MEIR\X'Z1#3+II=FDP,L8K%1;LQhbdZD).1$FFQG#+qAG^,4s-iauq`.=0h!iLgK
%g$<3F@%WH=W[*\CQd)#R@3%$iV+hnG4VE-EPWJb2Obr!s$hIM)I:`N:Gu0o]nYut,-Sl.5"ZA]t[]CZLH!f1D[5)G*7j;NE+p^:Z
%2$]J$r8.h4/rgs#-AZ-h/hVi)?DcT0CdTk[@%rP":M+9]Z?3?rlsD6,K5p\RQck4kB$V!elC?H=h'5>N)XA"jE!*,^^7o5cf?+^!
%[\F$Bq07^993)LZgJ9UrBd/`*D"3:[KT[R5j]g0u>'RPYP7Kc'4*99+;#Zj75Hg=e"][CKVrOGM6Eur+N^bDP;bb4T#(\Q#^4"b9
%-++K%'P5$3ib\a!AuNGS_jG&C&>/<fn6)"@g_mJ:O+M<$QpJY]s1b>eS!(@8&L;1;.dV$F],DA8'k_Z;14]`OM0qX%bC/OBcUuk2
%W=Y/,LL#tp)alY.&l?-6%E%n$(XH*D["0J'U8*U47'&"lkdZ\$>SgK!O/A?/$4$eH_TN2iJEU+MPs$4L;&^\^&Uq*)@QT=O!-&O3
%qHr_&@5$ZGK-uI.Ln?Slmr9mHOKKAPit[F,Ka<mJp'C\005eIV$.E//MtGN%5#hf<4;^*:#L-,\jTG[PUQ>Lm"i-15HOQ0,)7>1<
%Fta+oc6YBg,'!`RN0,Yl"R^[k5;/>!pnPuD*UR.g*$G#IL636DLq;2u-7hPHbo/,!YUf]7P;ckY'o?_&4CdrM;3.dE/Y7]!S$u'`
%\]7oo*&(0:N_h[jVlQtnS;<Epq/>dXEgrhX!-bWS>/\n[=**75H+kYI>ck*.*KNtSe.Sp;rLBmU&*T1$aDq&r=)sF+V;sjGn;JMO
%s#76ge$0$,99'^0/tD%^%Ne==,5d!4\p>e%ph;[%P&l^EaitF2:?EF=R=DC+j(<jBkX2X\GK8KYnYp;%7]tU'6ttp?0TQLI#-Pr$
%j4_nKiD3oT;5D_oAGDYBl>!I3Ss\mQ#k'B,[3[dbo+kEYO]BDco8`)X8E:0Hi7l4qno+X?L'`Fs*$mC`(td3DluqKiqR*03*%QJ2
%(*/r(+fq,N8VLd)L?2A7e2(0BCREb(bj(gE$7lH;0s*(*U0gLBFbCYJl\6sF$GG%H#7aT`qkBM>/u-=E$5U,\0S(cc,Pd$g#HAKc
%RRba+U5u*maLYJHJ=agrca%U4[O'q0_AK-[.MC=L!^M)(B+,ZUJfTR-\nWs&<(".$QoKOFLNf.-';F3X2jN*rODcS6Rd$[dZa=`"
%h,kNYPKLrrlJgt:4Y9=_r2ACIU_k*U0(;1Mnhgk_Cc7qX5tg"T?,'m8`JEC6Q<.'W"i0F:AesY3+AtuPMHYBZ85<h86(3%s&5pdC
%LLanJ;b<Dl^0t--_@199A=[DnOL,H0q0d5)k11;53um2q+ROge699@0+m-9<91,F`8L0aMT!7SR$D^<jXJuus91njY0tm+kQ(M+b
%Z`1jC_T!JMkUc%oZiN+9%lYO3F\U*$P48&qPYMgf0st+""Je'6P?&_QW7YC.WS&08;OeT@U&5s<$9sH6VaPQ8-FgP7]rG;gKU+2=
%W:7>tfsD#.kYc9`+:89D>?2/`!8oLFq'#?_s6dD(=eZA(&,0Up6d<ucGA<LM,)Sa:3@"dsiq=>)`Nr$n8SVhi"sGo9-M)JMEGHeJ
%MnFl*U\q!tA#l#TBgkW'd6R)3esF4tH!f,5l!ot:eo!plr",oWfh7u0aq+bFMX+1D5I-qETOll:7$6NAno8@\YGWFMKmukl]2/UK
%##%$B(GoI"+iuL=/`+G!!Dut'<Dbr;b-Zs4*P^,J?UacOLl-.l3*1nTE$u.;@3[OaiA#PQk!2p9Q<^e4+@I7pqS)a]V;Ma:TK9c3
%Ncub?&NDa\p.JTo_@]MA&PSf^>2U-oZ=G)Z$GXfaO9:fd5WM6"P,bG!QuEHaGo],PSe_\eU^6+F_,in<3M_r`Z@OdU61UchlXO74
%%gGS/_TiNF7]`o](9%DGBN_?m^#[7t$7XA-\ds%@9d@J&&tBS@l(%AE<kqfo:V^8<94rO(^duA*.$q]k%;/!gjT.>'JPT2\/?1OL
%YkrJl5Em-P\qb$]H6#OJ^!l4fU*W&[gE]4!1sMc9%(O/!Ph_5-.k"9JNIX[0/>@4+P9d"n4Dp,u$Vrej^DB"[fJC5:NZuoBkNckj
%;Gb=-ZLS+^'mHYbG<1)kO?ijtCLL'pE8b/i/3VL9c/P$qgI;`9>!Z-T$)4B/h6"7h=C8aU8(XH23sI+?'u#1JYhJM\Yq-6]ijE91
%nRdi_N7=3LW]D<aK*^k%[8!o;d-6)i!BUc<lR>$!m3bU5%c9!NSr*lg+l23Dk"p"AJ3[Pcc\KY/MuZNZK@+!::b,rV:54(5+gs.W
%8B$n+U<+jnY&@A?iu3qE>%l_b:sHE;ms6"_!VFYPeD7W'gZn=XT)A8g\bNCn]lRj]@N<#,7D_MN@]>HLNAh>h$[>E<cqO$P4<d<,
%P#Ht.jW-X$i3.UJ1a.=bC!('Z<)4#:iK'A8/Ptdj.HccU.*eM'P+$`l#;$r%>"C/rRLk5Nq_Yk':FoZH(*RfS=fe^na1jnRjQ\@W
%&?u>TO2s4!2*j&=H\2/7]>]jD`ki1YOsc(L])!m:41K'06u/KcBhLif,Xm-?:nt;&fqdC_gAFPU#SJS`"bM=o*K#%,8f)*W0oo.c
%$\s\[1GuN_*9n'hpo3CrE!gPQEF@!QZ@kQaU/LUF5^2_@/K)f_6OjU05dpLSJkh,V4?Z)S#<-o=_HXs,9>)jZU`nV&4<Sj-%R.(u
%ToERf*;@[7gO)KH"&=.9Ai5[-f11t%g)2]a^45HQD\XDsnWMqe:S0s*_#Tq>#BO3%U;orI_RHt]Wm<+dZsG?k(mGc@oW_UfK@+-2
%[u6/@>X-JIhq<@-E3r_l7B*/IhN5*(We:b-=P6JB%Q,@3BlK6j#7+4:%rKKc;FlgBi$r?!>fnITRG)HPF]G,q`Z^"Op6>\a@^::*
%Q49M18W&-QpV-M:M2n-o)(\6&],U`uU3.lIM`I,e7K0DH5P^`"Js<)L5(dBZLIa:$fOE<`LDZ\4F=8>:1T9>NaWeS_q.7\]c?eHF
%KdA]>eQ"^=,T$%MDa5@3KrdEK0jOQ"DB]Z06L'U^0%K@QQWBI*44BG.cAE;8BSf,I"0!]<8p5%\s,](c"YA/P=M-I>2l;oO?=7!Q
%@uA@Y<Cjp)F'N;%qD*&BB3s%11AI:d*k\>j.7L;oHYA@IF[:fkT2rHTYX?M`PIFcJ@21#?$E8?*?kZ(`'_B2a];K+_hobsqFPADC
%0QaVs\im2gg`^7_)kuI&c#!5mU-!UIO]^?J<s36LQT:@(F&<X1f6V2?c+!(7PL>Jn"OIfMiXb(Wf7u8D.L($t`+rQg+_$?$LB/<j
%H&/Rm%U&>6c@$^!El0@R!\K69._N]NcZM>L!n8$@"Dcf+=]l+c:T.6@/fOt>&\nRODK%f*X<[77Q/4ic;8[tp<p;E!)%J(H1sJj+
%&:*eIUFr!i8O=^#"Rg*p*ILuGQaSCeRp*eoN%?!aOuc2uNBMh`\5e@1C^l9G%6r+*q=VM%)(E1W;(\p7[\Gg*o_=Q"Jh9B*YjKG&
%*=\-c>Pt^3MGG'n`jMXX!7d4B(4#A+j<(\R%)%q!"NQmshW6$/LiP1X#qLi`Hr>j;]91N8/.\<$,=*S;<SGF6>=m<Xr,GBd\c`j;
%j;Kip(Dr8Vk4XkG-s<iF[W+m)i*T'bD':q<^t.]<*u-d=/miQ2fLAp6'a_ZeK8HH3CB8H8U[/9*qNH0cE3KUQ-u"@P$c`>n[LB"r
%&mU3sfi@j%h_qr`j-EW.&>CbY?igr>G'Nnoap^$qX4[Le(+9N*p9]u9Q!]ThRM;e2:)K%ZQn<.[&A[eYC@!:!9(DkoK#Ui;f(7r1
%@^s*g@0mS@kAV^uVO2WTMHENghbLMc6Agp-8/O[hKXj,p(i*s\7rbHW+PGfXfnZ9Tm*f`3R?a80-9E)eKQMdPh%,VhA$M"GKVWk,
%R$K=,93%#q:0YS$!&VNR&O^@f_-=$7U`Q>]]62AC/P38/Xe5k(+qliOI%Ni7n]*P:?8"/spL7)Q#k97.JNiFhA(#2gN%I'pLd\;b
%j`?"g'2JR2d_\_,e)X=NM"+kAm2#c<'%\t_?I[S@-=m<'ROaU);lJJ0,XLK[(V\,H?WlJKjHM4LS(:/:838sdqq1D>`bXc,Us\a[
%$uZJ"MN?s&KJ8/B5WWY7<qkZ1Xf1X;IB!s4qj]c+oU&"M-gs%Bqs^%BR0$HbLU"[Qr)1f!B%(>3b-RY@c6ec]+ZDlh>@PE5XR.B.
%]!Z4i0hlN^C\GE4XQU?N+=G\0%'Y5.@GeA&j7W7HX@Z!T4gd+4M2V'$E6tmbh8]@n*^0Mr7Map;<O2>C!0*+N$<i3:Y*X(O#_A8L
%$pCJ=LpnuM?#]Bh!!m<FNt'RF`dOoJ"%e1I*1fddd@:a_ck&4lcOCt'46:fl?^[`eRXQf1^>MEPClo<X&15hJ5j/`2>Igl*84<cG
%B[._Ef'>i,VDap.Z>F9e*DQ#_^gnUg/9.C^1JX'L'U3m\LnQ+l;.;,f't/felt04)C&+Y0MgM0FHma`?,R)LDm2Y]K-/YgM[dn@S
%)NGJga/MCi6("Gh%q3qJ$\$$L,]Atd"0?CQW),*jg"TPVWk)4F,1<EaI:IAj_W[Dnk+p,)S>ICT]=PCWP]F#TUKYbK;].mNF6jh&
%XemY7.+AtI=p@*bn35Q^O^NAf<_*G*&pnRZ13TIrX+lpN^9O)G72qe0$2uD*F_[*7WGNA\bRfTNcEme^52o+VnR:PHm1E-@<p&0[
%6`6gC#3SRH'o'hfNsuja$DCK[UGdg]HL,V-VmS4V/f%dDo=3gOer4`FangMgK(l*i(t$%R,R&E;e4uQ&dXK9#.K6Ha<At+QkB=1O
%FIoTt<lVg@g$)$N26;7!=#rsZGtc^G6pdhr[XWli5i#.1=5O9j"DLb.)Jgi\nNhj<aZ)B0UdNB_'c*8k/:f++>*kMl@'4B(ri.02
%`F`42M&8[_"Fj1#$g^!C\qb.9d6)0qnmRk>7J/jT?Y0c)pMqe,WcHZlkV=KQRtnOmqC7>4J>CoPKS#^''2>4qOq@rOr!%"*Wk&1F
%Fl]^pd'uWPHIqXL!oq)I8tL-lS(7+%*[unYP%]k&M9KV^Kk#R/\Aq`rF%*VSh4:BmnF$s@?t\TLk7*fG?`C96,.nV=Zq%Ik*QG/l
%7U8Zg(`DF"9Wi"Ke:PSM,%5_l3sR.+@q&[e;jJA,ab\sGS55pZksjeQ6Ijh13bgD4q9Z67.EQQPWr9qu&rG/N]1j[n@uh.Jl1P2g
%UVJ"C(4aj<A2HAiq896I%d&-A58%I4,KAq6+A!H^!\*,fgBN!=')0tFY1rYX_FcSC,"/JbdmO?%qojB+YpO0fI539?VK;Gq@R-.l
%.HDu)(BR]WUHgN#<roJoWhsBr+>Jp"R1Ug4P!)9h:hQi=&pS7_?e?j2#[mFG7BsMMVb:H/=4*`GY@hm'K#e<XX]qK88V+_rheJi-
%gMNl[OIoW"UOmkhTg^YPj_@<T:@6?`dK&oA_I=?+-01_iK^DMK^!H&s*tC?<42\UOWl\U>,?s&*X]uEVDqh8f8Z]cc]NofsaH%RN
%X*Xt05q'd!*Gra:<\e#!;LC$f`NRhrqD5O6*JE46kZs8mj#)?l7gh!gCR=hN&m2TD^4'ltk1j,q1h9mr4MkGjdefpodU?T\B1B0$
%;PQU1?Wq"okp$/56p_]H:Q@aj31*dp,/QoS7ck.b5Zk_=Z3t)oE4K-SZ4$j_c[+D:/kYm!ZF3CBr+;;6D=W!A$=O-IjGM3%b;^B`
%F?p`c`1ph5a,28i+j>X(=S$10QT'CUU+I7heZ^&KXG_%:gOUEm/n1aFOlC&u:nC'e66o_sk#:c)&D7L::.9u8,-UTF`d%"-`e>["
%1\bAh5>>1DjD=4;BHYPQcXFHTdkF"3`L!pJJ.jr\5,PLW,+*fZbDOe,6t$e@UMX0-(F^g`2(=)idK@;oU:$V%E3n4!0:?\k.O]aj
%*`e9UmF#u.q#I'$7>G[>5ff'<fPe1nN0ApF'F(Yi*6_WN(k+q]/n4LH/A,a"/C`1:Y]'t`$&na0oI.k<KlS";(2_`Z(9m9KU;#6-
%0-<,`#YD">LUsb9.ulZKVYQ"u,?_CZ*u=TZ[/qpZ]AZc-A@H4ul,b%l:X!J8ku`WXR?,?oJ1YQ&GjsXXYliBqJ=N;XFHQ*a\D6J3
%P<M;R'0V#e0EJq>:ga\L]k1Rf,6h7h?*$]g!>Q5j0d..H),,aKJFq8bJZ'\V]R!PY&0SLN?p'o]]N>`u"i=:h*$;8H_!LSXk@!'k
%L=;O!mGdl^IIPImRO=#4Q9=aE_6d&$-F#287FB(p0hsFDf;nZaqZ%400a<;)7c9MTCjqeH*T-Ym%9G9+'Z,L_AmobJ_K(N!_=Zk"
%3%.0nR4e3;]9>MF)]AOFQTe7Bl:VKsLl`aJ69)&J>mNrqkS^1(Ob--kWJ+)6b[K,eRuRk23A(j'HAYaP1o7rO:@942I@+^9"',PD
%JN<ZrYUn>*ZGR!kKMBV>h6)14O%o.O:%+Xt."@97if[\6Wo<NY"U[83fMmW9f"aZe8JGOW@Ji8qa(Cc'prcc8!Ke9S'-#g3QE0)c
%$<B1Xm'/_:>.6]\Cj_&IH-+J<pjjeSbMC*!N^;fD(VI)/#7[gb1.H>$-0D6F8ck356RL7KD7'8Han4.qOP.:^$:p`T=]:;M+nG$5
%g``e_(1eG3(2RYA8-^Ps3Q&Cc8f"tM/8]8oUo'[Mq?.^-*3b,"/_N!&lJFsfn2<m["[\8=Wl&1EQmG8AD@_l81Y^/r3@-`u%+nmq
%0Bll.eTMfE9sjsuP]R\/DZ6UU:t,pC>?f$7nIY&;%ib=iX7$XGAs=l!n+(`W[1unl\NZPl`BGg,[%A%Dk7CIVkn\>-<*KpQh[N$@
%\9CI7:QJB1A*N4L;T_@0;iYNKY)pM+P[u@Y]Cf37bD9hl'ggR-G[0_l,S^c..&FKDNQDcnR;a:6NZn@uf!dG-=g6]h@H=m1c%Rm+
%N,YpX/g/fsN8>j'&/BOXp+(TldU959El%)[%2X_789)f6l\Pke8%Mck5EO$T@+>E)<[<)im@9q-DbKsNia)p(?fjl[-e#8PmYm'H
%8322s8%96?Tan>"Eka+HqrgP`V>;<l+sU/6JWZQnCD(3\"$$80nV#CKm'r-\"T!q,cg7*,<fjPiQd:_Ks-N#&Qfp9Re33$DYabG#
%;sgO`/ZtgcAMZ!u6W`%98c\)]<W[$LV&f2Hos46D=287d'tH7&Y+&\;QR"u-OBKKNihqg=Df\#0V^d:Be;R,c>>U=m$K7VkHIJlq
%#;Dfg".s.MYi!*]plZh45ONXNDs]Q:3tRYp"lr+02-SG.n3"Fnhc#]V$]*>QH3lHs!,#C,>4e4m]^J?"(hsA27W,(qY!!GBW_3qA
%LE6nJR8NOc::X`WY,6:-A.;1gX\\r,M]XDY"*\j&Rj7,udTrSo/NX;Zb?XnoA*duSi`'L:>C"C+'p>i'Hl();;f^V5cCZ;II/CCU
%Z6:Z3e+215_<+'$(%5-=5AnV,HRs_^A>ZFnX?bOVj[,[e9X_P.n1<'+EfEKap9*Bfb^63GpM,OWlRAm]9<a't6a8ZB\@eJGKjl<s
%'9Fkqdh"DdDXoe]G!SZU9T!AH!4&e<E2gi?7LD3fH+-GtM]7?7TLQD&(.E[Sh3XS2\Qh9XATIfc#u#m[I]haLn3C26Le(u=bk&:^
%Y70O#WPh5ac;)Ig.Vo>)^XY&N6mlb*X&f?dPA*0^42<#a)C-*\Va,0fQ%qpCfK'$W10[>'s/PGR&0s/e6%$5tN07!6eK#HUb:Y-+
%DIbaNl6\BW1l^u7(J@3G$P16G/A0eHIc[:f?P63t^!H)4gZ_E%.Zf::61/)3`DR3_Cj-HGGfnfX#)hKLc0R6l9hRiMUkQcm\gS5Q
%PuqLh(M*p"h[m=O!_UXd#iq)sT+iJ"_]2u??c1GGH)Q*]J(N>3]8'SHQS+otG\U(HNVJgBVhfMZFq0sf'6t`fTV?&R.l]8iOYMsC
%A1eff!Rq4aRnBVMnAhVV\q,kT8Up"tNrEd"`$@4M`j<U"$%rO4YmfOT\)KTC\:I9`Tt?tjTM)CPd3aU0(S-\FVCja[UnoC[P64_K
%'o68;rMUluP21KlC,]pRd3Y2XWrb8jK=DKWi%M4FHd8@$KLt7oVf!H-?9hnDL.KE@9SKQ:i&O;L>#$8%JWTV\V@42j(pp=9.-f0q
%mh>Rgckde-E<1/dX^*V*C<(s=fuPL,1^J\'G6Oj,0YN@[5fCKX?sRr/qH)/:![^uqNE_113R#mf^N+9#;K\b4<%B]*08<lnP9R?R
%@44kC!YtJi239*+)Z(!B>0%2qY42AR%b<,:X`EtS4c2WrJNaUOOW\*kN4Y&3%\fYbb*Rqq6BftfYlSYJOZ4N3igN=p7I&uS7,;Pr
%8rLcl[b0.+N\,/+`=biSA;XGhKNS5M)iO5-)#Q(3QGhn?/TNcuhY"b4@[b5,L,Rk@\j42/=qn*Whp/jG!'ZO'#\d=455Z2d_+HV/
%D6PH#BOug&0nW1(EkEu-eQ+'<+LdF0Ak9T1Rr<OH>nRJR>>Ghb2WnJ_-o=Ci)_eYg5cjF&,<tQC1a,D='eQe"9a)PMbp)0!&BP]]
%#WWBNp@(k;Wo;I-]-lrXg7[)$3Zkkb#NsWR;u@O<;uBj@Eb5Jiq)#M"bOu>6;Ph&s1edZA'<J7;p:,1R,eT\Qa,*(>P-ed48QS(T
%DF971)O_\b`E+-qp@Z3&Li.m\*S"rWJtNkDJ;8\m1:Xkkl+ri0U(j/&p5WMNK&CjW@#GPrfijq)$jP]4<k.!Z9_*/d&(=&BQA9o[
%:-lRsm)*qFbomP/MG+]2iQM\6"YXJ[Z>*S^;BA\-0pbT:$^T+2BHt,eTQT,\/IndsF^p.Q^tsddSb7$/m],ZJ=*W?skiFu8fu<:h
%.>C:qKH`Sg>b;A`VRWZJg,uSnKI7onJ^6PdZ%&^!n\F420<-4LLtI%@1<5/)`5Js28:`DSTJ:eXYaFUkeGa`u!1r6eA<-5k[B"7c
%PTlq/O`J]_m_tZs]h\K+7Krr>+A9$D,5fQCXiqui;a%3-YjX2M(JEMQ^MM<&)T=rIZW/p2<(m+^c85C!(&&&2AGgUqUGJ;E8RFZ8
%$KD^]VCqQ7g1IP6Z']KTq3;5`=9I5gpo#1ab&f-B859,TZ]Yn3Oi>l%d*A/l<C<%Q\bt2+Q^UejrfnJ7,7YR_#+FGOlCE?o_Y1Xe
%=SN;e.3e9lp7DM;RQ+X=.l[H84'jZ$ZLf'M-.RM8]uhT\7'h4f790u::^L.0'G.[@XE*ME;:O-kWJe",^ZDlHV.C8P+rfSk2TZY%
%`sQW'7eZMcg2sV0>4AP4CMM/Pp@.ZO_:6R"UY1aB_inA<l8M1g_0N/;b1Z-.RX[*'a)$%cg`\,9fSurrV9<=-jg*4tpQ?'D>K6&/
%Tk]^qKLj0%hA<]p.8j@um.&ZpDgRXAmI&[jJlP<[\`"eDWi(/30TNi89C\_"g>tcg>3?U8"\p<`6&?R+#E-*<^h3a70i`+lLW9Gj
%b\8-?8"*6DG$D/&Nk5pu0JhPSRj-`S:s]%<<qMoL(YM(Hg?6,Ip_e"nqm]gcHX/NgW"QZ7bIhV<9'6F2V=H&*P-QLS,3B'&aN;92
%6g#c3K$`^>Nqaqgd's!R@!u?H7M%kcmWruEVf!fnbL_3+V5=jDD9IM2LgHEBYesM9G[i+b(nd$q5O:#.AlR.;X4]"`oMk!988!eT
%+WToS:R&%8,7W4ERpi/am*GO3%s.X>a5,15P=/ONB]iKEfAWH'h**pi'$34of]<J()4a[\)2;6\81%75'KLs&f@>sU6\J"TpZS$F
%TT*g#a7?D!gi\$,\qdnO^hS\\2'2b-\Y:6YJW@/dGUk1O(7,4Ggc7RDf6!iLih*4b>hAf"h[.dUbA)"3H`";BRSo90::1jl8d@p#
%5?:J]5lgtT&Y^u8dd;U>M-@%7-t<]_-1A+[h7(0Po`Fq3$IUg``iss(Po>0$R"2Y!`89Mi7b>sqdhaNPVg9")<I8cp=q$(1V`.!:
%3F_^p5SIfdf>oT)G4/F9ff-(,:=1kL$?7^"NN%@L34fUCi"*MNM#i1#m^T3/8)0GK0/o's(`bE&g*^"K&)6l)]`9DFF)"g5qeh=P
%N<bp(D"$=?d7R+G\Slgi\#tI`6%(i#X2cAe,@:hF".dFka_GtB(G5T3NB<b2YoK=pm7nV,RhjH8gTDV@U$<^.Iso00lB,T7r#kFR
%hc^,C82*=H(ZJDb!sUNVk,)O&ghg6tShI:P%o&+\n@g#;[QYm\g\\Ykgp-NBRO"rc3lZcI-0BW0Y=*dC8RGYnG-NNYWmm&1!:?WN
%?8pSCBXRiR[%HnmUZfkkN!T#Z7lAI@VZb[ELtk'M:O*-ZfM!eZ"AjL:7i/ah;JMmdL3Z_m'#\9';Cr#Gj6RF=L3VDhRUJC,9JP\Q
%Q2n`H7;AiT+ADGs!lV-86Z[eLJmbS<Z&S7)jkX'W%25OW/XebYj0Q$dWc!M=?_n@"$M[m'FNHdhLr=hiTE>TgLqMWo\d\1t5W@k$
%Nl==q0-Wh/(YmZs-m7G>%R,qgKH)3Z9Yq3)Qa]EM-&n5Ml;!sVI.sC)(Sk7g5sQ$q!d%Q&os/!g^t^616;r.'3g(.>e=9'T6fai;
%QkuVncr-Qk/)[N7Tp.#):VIu@QXUd\9O!N*e]"!-jIdpt0soogXU$?O*>"RXbDq[BpV$K(Fm.B6L-f+No;ej0KCe/1((dkZ`\=Y!
%8OT$`q1QE]^47q$N;en#Ed.L'/k<:3hpjAk0Dejq:Ee1Dg`?gc5oo5nh<FHF^j2h)7nK_R.6:_Y)h3E"(VaNmXU\'BiuUnoiJ=V4
%[&l1GoU-KZ&O_2Zjq^qn=.IjdG>tEsoS4h#U=O#V7TRRcCh$3FKfW0X6pbSX5(d@$e_/Q6Ll*-B_sktZg1[6>>7jgq+'/)D7"`(7
%KnAMnb6@m1<+oA,gK'jHKPHKucJ%W5;o-8KIPd!:j"&`P>kEY*07?9c/iP`+8%+=Ye'IX,AqAT=e*/i8oO]oC8n9e,&qO21Jpa.?
%4kNr)2/hAMEalMna69=1m<!NpQ4)5YBU*9#7=QSP,`-B%)m_.k;&'O0BUj4cQaN61"A;]i:[7ps!32fXfSDq6TI=Q.ajYkTWY6ip
%_)&se&=:^Oi%sI!_RXE"@p\Y!?9rq_0(!2Ea7?:32FG+?f\"tUM'?u<j0ttL,2nTY6[r3KQ9Rg;4oYdP7A+Cr'7B]u10+8cWjD@)
%;HbYu^Y\tEDT]":(bYDu$FB/M,gaUU$5H*dE&M\`5s9T8!q<FJmUqIu9e3HQ^^H*(@6H+;g_5[(ku0N!q/th..mklT4D*r`_pq:&
%*&n^tU#(pN^U,p/L,FH!cg2e6Ge%apS4(fnD/bE\?:3^aWRMBV8kf?[1XeXI1e.X\>'o`C#mn)^^[9.9Pq/sWNde>V+/l39Q)d!0
%Ti4&.3!iRih3?8K0!`"7W=U4MS1?Oc;KOW'S$72MP,A([;H6Z#3BHPC']1E*b/TPt10FFH%e`O%(-E2%2jm,`B!4tSiZ*)jSNM+>
%='!62cCj#!IANV"d:N2^s82idYQ*ecro\e2fDk`_n@qLs8MJ<NXBB0o=`W]6@+?KuodtGHPr7WE.7nc^-D[#;<]gEUZ?Y/$3et*B
%Q[Ts/O/"cJjJPJ(l_"ni[L"[H+(6q;\$>M'ru_5AB$CJ]H8+:/oS5]751QF?qq/C=2,lS`;f&U15"^fD.?"EkjC>JQ5P;`'o!?+,
%[](HO5P=l)h;n3r\6nZ5[uL2;eAld+b+!@QJaPNeFP)\ALsN@?;sSlW$`81#TcMU&irbI"i<b0#A<j&c_Y/c]MTJn.`H-[9V4ZGc
%2?gYfgWlhC"!9gqk/0_sT0_lZ<e6=?"XX-W\UT:t7_sd%NXDGqraB8H.YA4.^SENui:6A':GH6@[Aun9g!u3<.:,6g7"P8_Z)==Y
%H)F<j[Ma;H8,DuhKV@%OHCuXSqXd&^_m4%s1ErJ.jq>@O]=T&55g.:a[?mqM0^KY&>GAH"4E'<F,/k50GdoOmjR$j^XDM;]YH&_1
%pkmruqUe_smc\D@S%Y[8"*,1OF18H$>jK]_ho1)k-r"<787).3?GUKJ\,V()Q<e6,!Q;+))8(IS.Xl-EDsOF@-+u5VSIB\[,5^f_
%=<AW:X,1YO"+`FJ9RR3B[No4s-%<nl%g=kq[W"=XjB7?lM%^djUGI2gY\["%ksGe9^SV$%Y/ZSk3hK53DG>ckfd*#7o^F%?epJ>#
%j$V0jQ\\7]3+L),OD4bZ^Rjsd2RO:V",g%0QQ(5BAM(f1\-@nmKV[u0;j)fJ^ic#YRnk&B!,HM_]/Bb$;Ul]8.g&.GIi7SHlU(l'
%T,4K!Jr\m++W!]ujfmIdPKq9WC+qL!K,[gY97dF@42$gF'k_t$1A;eu7r'6%Q\Y<G3R.1+VE7&&mD!+$pd`):d"YbF@SkEb9(j,j
%$*A\4_Z[r)G/IARO8peu<e(=(HVC[+R6H0#AI%LOpd4M+AfU:Ne+E601=^J-g:_J'Im\*,]Xd3^'LIKdit6">]#YC\XMY<H!@,Zb
%(;-&>7p:Y<J#OfaqK)M$/_iWGBl%gI'R'S3LnM*c,CSomcq#GLP:ca0Xap7t7A5Kno[mPNBJhd;Cm<"q\(*:QndWi*_YPd.hK,s%
%AO"Ui7Bt,O9gFoZ0t>V>I^"68oBf8Js4:UIqUj3B!T_2]#(Z`Vc[Zm"eer@tbpIa"&lHRCSh10B7S(m7:iD#3`qiW:cfj2=#F)Qo
%BWp^1VMS\*%iDXcDQreA21GL8UlWh%gR-nC@!Bb5!G?H=8L:s?<7VLL;0I`?6G@/OLSjcd<f*nNk,t`L7;eBHRuF6FfgFhinPmo,
%%;*1*3P>:O9Q%7\s8'o@?Q[,d7HM,ETo']snf6WfhUK6@O=W@JQq5P#I47h"2l.:3$t/BMkf*@X@fS,d(+qmHbX<VFmIpEWX[17C
%l$K"(lE@r2p$j'$U1RslIRIs>ha,C:=bB._/_5S*DZqp7+_XlRdWn.>^CF$[lVZ2P*Lii@?f?6_F[lZ],O:glFE'f,g!6Kb^o_7C
%Dnl9,eCSnDVHg.hSnJ31ERmFA7EgPh6?+M[1r)Z``28P"@eS(3Sl/obK<EM/`7<B%&.?I<[g3KK1PFU'4AnV43eFQ7`C'YFkMmLR
%oH2%:1?tQo!&^EIK8Aq?YZQL.T+Vn_'_=1Z`:U3=#WYcQG\B!n"m!bF`6@ug3G_IUMbIr`>st,dX2dTb7f)lg?ufD2c.Q4M<%K%e
%"I@M>L]FW9io'&(!0J=N`Md$HL`a7hYAAn6B+^2$]f]#sb`[i7s-=kg6RqW@@Jd<Nf%9)I5/%(q"5boT-HD>C):ORVBP,Xucq%8k
%hu*3h:3&ej4%VAM0<&Oajk4bE@"$ug)TWN^PT2^GH&d,_G5d`G)Sl1ta]DlC\W$$q870sj;OhOf0XXPPHfX[_>*ufEmMZ;(feS]@
%0VJ@MKXR[dhj(9@W5!W/M$VUD^r5^HC.^khWPAlP%g&g:%"&C$MTcR.k'a$9Ns?`#OtPR<Jl5OWoRrV"8`;t@G3%]f&mbFF\@q;O
%;:6iu9+.lMh+:"LC=n[3N"Rsu(TB<Yb=g,R)@=;*;B(#^AZQDjM\o$'SkUP"oc\:#a?%+n#Gqm*XV$$GJl\W&.tsRG)USpiY9\Ul
%G9%TM#-*gFhN>*48WitcVJ8a4W9@^Z,SBD5d'nQi%L4US-.m3X7rqdbneK33Ec$=BrF6OlaF\EN(#^(C$DK"=_kEK,ghU+[?G_71
%`ZINRY899j3G^?K#oIOpQKXC75)r--B&0>-6pU0!jCEmfahRlRqt1JF<aFo^?5_8\Nj/#]-bN;i%dN6j3h!9Ch/$#15IJ)4T5m(=
%S*0DRm)(bE5&^c1UH?)J3;kp"k/,ER/fDP#iK@3/NemQo>Lgi4hAJ:PV(OE1lrnfAW+:;Hnti=;]U4_>[luLOQ1UWj[Y0i%IuO#>
%q>iDtDphXT^K8])(aqbo[IG3.BdGbU8^NRDi_;ni(4"P+Th<pZo-gg:D0:LHL.AU]jiql^?SiVLU'S-Ampgcn#X^#rSj+[LoHBd0
%1b0QsH%=O>KG&C5aQ^Rkq[=2r,!pot:-$%sU.H3?2nTN['o[LP7P.6s4(T$l1#D"@UlY6BQ]XIms,JcfRY0X.CKpIBhDX^geoGL-
%+SHI=4X\*ZC4M[j-s=Ckh)2*_%,i$e&0L[@<:'FC2.3]!^jq0Y>E"2#j9ILN*sVR$)J%^"@OU8WRm>gsLEK\#Ehc6q8cL(kJ-bs4
%n-K\Y;:\_t;Qp.ZcP2*@q%pS4V8jfa?q17\k-8Tbc6O\EiI(T8U^rf,40m.p)!2AM7[juZ9gt<Mh]We12en5k`aO-!?jd<adgg$[
%rV;N?N:i[^.3]N-rJ%rk@$+^PIKT7I"KSWeRVFY<mMd\u7S=j<MtL`bbaS#?W#r2;1o%+Dg4KN;8*N(K6#Ctq7rDBcZhe15cTjWI
%I]Bgn,!Gc3\R7]O3IHPMf!ptP6i'Z"qVkZhdQo(um[+M7F)-j#_.rs5iY21&d=3uiMV8VZG-jdSWA6!fO=9lXe7Z:d].4*5H8EcG
%">![I.(gUjBgNDLs!@2C),]f:TKY.(g8.Rh64i9lh^B.3:fV!KPmZ;#"")!S/N%OcLiW220n8`dQ]XH6GY-O3jld<9rsa63G-WW<
%kD0;GLVnC_2QoHNHH5,u#=,^&EK-p5(s:_1qqPsU82D):Id.?6MZ$`j/k!c-s6E"S4q.(g(^#o_^rNeF^gAh?@j981)nN5oa.TsH
%,G1VlgOUOclg>fLJ-n+5hNniMOhmV\7Qmab1k7gN,4CX.BBT&Q?1l23g"0TNqG?rqXp??ST>h4fRXLRFAU"O4c6GFnoSk7e3(=W9
%FW6HB4fD/U!3`qg:]aj^;uaG9<EFaoAZ5jlD\KE'(cH,9=:"O_e7T[-WkB9c7WaR;=Qi^%i,[BMAF`;dUKH"l'ek1QBL%;FSZpiA
%V23r$Thn&@jO1!OqKR4V2t!oNCN`W`C8&%9XRZ0QT5fH4R_\NO72siuJpURng8hHrBIFnDX>[VACC-jjLgHJq<cTXu>1?s0EIsm]
%j,aUfNqJUnK5N%d,U8&(!`gOnrFMMF-pbU*>a7-dNY6jPWjm@CeHsTb(BDCt9arMQ^cA?H\Bu$m<-@;O*$n]a2i*6h%Xs-]K\'!4
%)^+L=%,`=:g=PMM5/V"bLm1^bNdRM;B@YLV?n5W'PDbBNLt4cC%Rl'S.]7V:Omc,B`$>Dpq<7$Wmn-Bg`&oJ>HAR!R"n=hBZWh,4
%&*&%b"RJac(5"MSm^U2D6&Md[WsFH'C6'.rlGD0ups)@jC[[Sjfgh,PE1#NklFMT[BHc#D"kiZ'#(g[K)B.94o3#XD?[isYj#`ol
%9gdoL!XB%99gt!!<[&gZPg*'*+[J`IRE\RDmXdAed(C2qjA1dJ>dA..GmoE5jG&lB""[mi"cT,A?m+Fo0-bn"Q<3iNi,<S"%-0Kh
%fr1DFjK4O>UUV:iJXur`=erL'`Bngu<s/W,<Khca3Co5h'<Jl",R6tnHim:K=b)(r;!h=>dDa^ELAEmgW1P=+'@BN+$r^-B3Q?`q
%!C<i&43#:FbF+l-"BGuR&A-*4_#k2o[CKT)Td*2j.Urd60oej@e:=3nCkPSlh*-kjH,'HVPSHd:Od@9&GTN`Xg9Rdf!sJN0g8;*V
%3R]K$!bd_^>#!C[nI=!(XPaD)P.'*aK;28Ue_@=P6A@Xd"g[B0M1,6`5bBbY]3))SFamuD=5_S1:/)KReCq((-dH3"#Y9H.7;&`i
%h%PHk=X"bkj6QBb0q11uP*)Qa;3<E3<l9HE)u9?R:`nTBW%a+:%mZ;miU31BF!m*I2HSImnHLEGdb:/lLILYb='tS4^eg>IiSaGf
%'ba4p#Y30dGI$+P3Q<:GobIGD3:hOrWI(E(]-Q)CS`=F]VL%W=b11QVVhb'Mq9^<Bj@RSi$CKWUq(P="PV1*dpC>35(+:4^p9OfA
%#1DU+<=F=+Cbtd)gW9SB,R,tiA2qI5bt0>W7>SHV,jCN>Uas&[UH"Q?<mSM6Jj<mQ$g>K1+$0K+%r*tS)!>S+,2$^&._(A\%IKZR
%I(bI/I/rEr<irpU%L#G::=.4h'D`*?F/bL\3XZ\]Q1tLE<.NRtTf(^05i:1#7f#e^[Hh0NEF:kD'jOE^o-5L%FQ%+/Nbu;%O:oDA
%D#skQkobVubtkPkAJB<=XGs;,2$sCbkEB8Lk#8?"?[isW@kkdAOQ32cr6mo^iY!\D!;QZtZ7QFVMZY/r%%@ralb3o22>_=rVl1a>
%EFN),8OPhC4p;7k2^/=),[mV+']T!d+0,E]a>+U!3>fe/]=FC8pC^l(W5Xi!>fg+N_,g(XdV:<)$fkUdm+='Q$r2V;.(D\n48=k]
%%GSAU&M11,,s9i.<8[6=H(Y\g\H&m4HT7#(?\)ar9-""2->F>+MLr`uf20caQF7X)lqI3LcS^Xf(m'B6K2c1(B0_AXB3pRnAq;tj
%lRN5RLi*(db<V\,J`=D:7-PNfR7Z8^>bmS!4dLruc;CPNrKP+uU)\Y@-\W^2ggGHl\r%5Q.e[)qb=Vc48sBU[s#Rj8C_SUjo'7qr
%IDR#K7A7oo*q5+$T&TS\QKic_F4>2][>nW)Pu*i_KNXBFk==qU/@cc24KC;joVV<YbbX.%m[d8BSGWTJ80>kHE0rp&Ra'KNiGiT0
%.2fM2q_8sS*ZU8?g6!RV&PeU%o>*+uA5KHYKBG>7?+iY(k[4uGls`M0SMH>nC&nfR`"?2HI@-'Q88Ra'^cM#4re;J"]FbX,Tp!ml
%2@:3W7eL.(mpR=(Q'6f)kqS<6XZ-u)0M7?edT,7)?+/gkM0Sc24RC2*_QU_5p$j2UIA^rQ#$U^ikM[g'(IbY')3DJ:hN"_#FS,?[
%Ld8P1GJC@<OS@lS(Ze-LiEZ1*@,V[R,GmpO/!Q!$86o=>g_V2/g^cc#qD[)%OcFlT2adsn'_\_,/iAR2&sfi-J'd_mDcUsO@jstZ
%-bYVT<FBtp9>8<r(?75YL7O4r3)a18[5?JtdhNS9%J2j0VpCmhLQ+q$oaq2fBJJH#JEa2?2KCkr-?B_9%_]'USC6imYiegNVM.o!
%KQPnXEA"0o0,#45ZJ2<+iE/c7rUlMN5(2Q5-,p3*XW,%t2974C^qiba/MPUhN]>OP6Bn_d&aX?.G$GPr#WDAs^3'(ALH>pLRg+'d
%=cbm'4*'6s0KJrT3:B4_*"I.dA1"Gp1!a0V\nTGT)7*\d\b7+>FKOPG5n$S,k#na8".RsTGBs3Cd-9cLFN[P&fe<=Ke5u%oSFgRc
%SubI_/ImoX&+u&.7)Onb_O:)l%`Wf_Q;b6J9/a&LHWd*-n%@308.**sggl9)."Ef(l/JsO'UohM"n3_U/gqA21$ZDNU&p_Q%FfhD
%lXN63br+'R0t--qH,JFFRqBO>+f_X/TZ36Y22Y2@pn\MIs/1?c4aO!]Y'Z7H3H\2ofYjt*X?gM5]oCZ@RB2l?`h`Mb6pO2WeVKq-
%aOdThfL:P#0SNSUBUSO(j(DBf(\_6c+6aI$NrqP8%O<X>h)0/h[("M<&3jAF1F9"A_rSpu`$&?,jEZCG/pk-8S3??#IUR\?O,=0i
%ct&&XG&d5J]$^H1:`nSG`#JSZ;ffVLG-HZZrFi1ti(XhF"q8@'P5cau.'>UE)IR<A,g<hM_.],29bNnV7;Cft_;Gp1>7Es?Mi8,s
%k1TM`f#NR(C=tMmR5+RJna=@'Q=XuX<MG>q-p^pqNef]=J/G]A_6J`[chrBCPn=.AE!T@sTkk(Ind7m<O$L"WqbLpQ]ascBVnhuZ
%r'k-=*Ckt[gDWXbn%X[H+fs8M>`]B\r2Le<#KY0CK0bl1?SRjf%)Or4ZYI.ONZ+P@h2"iDO^`_#f3cPo`$&C&W7IU)*Dl+,h^@J/
%)Fa^]0jm8%fn5"V9*,GE'0e)d%uk&ONWd+/K#B,9'OX%(ac#%H&IuVM(_P_g%0%.QDLVOqUef%;"e@"?ECZZ9Ka#>?J@2Y_T\STb
%QrS,P4@`VZZU;:k?o7ChYoJ.EEm0X:&L/4N6f]&ka0.M!YJ1M=T@c'jT@sFSF.BK@>Y"V*m=T)Zkr)WnfL/m2S=s3ffE''dLccEe
%SoNGhd=oeA]T&aiE!gWM)lgp`dKIFC<TBmir\E'FJfmd\@K_HK[2t.SX+h6!5,=5i@!d5>@4i&7"h]EO_2>Up0qMTU2F6VEp\Gn+
%eX_@I-:rB)]d4.W^iP<&prN4%Yd<3lq?4%ji'dY1>6G!M<XU%Qi!U&hCKHc=9c/37=,4:(RMjd//94b[!eDHF'uU/M2^d)Pb[M]=
%'C6It<UqXIW/lbVq_4Z#<OQ*h/=)"4^G!-:?X<41$7[Z&E?=)uO1$fg+U:u'bS:a*;Dmk""(NKF5gUnqE1-)ICFgG;VfDS+Ljf`a
%3T*p;oc0/a?[qm[kLrA>8k]RR&UEn=e/i*gaBst9N$Hm_Ur[]F8<Ha!`Pi+n]dYkf^#+B!ChuQC3D76a*`pk$MQsJ[mC%h5`36oa
%oq)7["jO;<o58Q2#Z-VR]!ZP"5:nZ%F@?1_jll_-fVa+N%SG,N&V%sI]H`q,JBBGmA'FL\3@Hj0A1.FLPRo*"`$=8=+,9WFUD0t1
%MM7_1$fi^&(fP);i\_FF.1]06TaH<ZjHf_AN&RH/b>CO%`,<)%bU?bO)?YTI:PFR'>jb<%1VCdXG,R.bOF.o2j$Y2W)l]'KUsKGK
%bpRcnPFu?9o2Q3Q<#e(27-qb/YQVSQ$$%n=ifEOZi";ZnVs,2LALONEgt0>s;*nTYYJ6%gR9C$f%6EMQCB[S7Me9#Y\5YL&_Vg(#
%!I#L8A%Vc>`AIas]&$;jTgS'5r/-SbYd5nQF1j$Rk5&!baSaAs([Fdsr]/=QN2%ig6oE;^\V>+RLc^,'E00NGh]!`.W/]R<h'.m2
%q\U'dc.>b)Pm#/q#jRFcL3,J0Gn=!.gdDH9;Mu=9c,E;))!Vcb=PW+ncK0ES&D\ChNn[*cK%nB53[UDC`=EWL@.s\tk\Ar5cGhm`
%_,sLbTY-9hP#SEJMM/tsE/X!T#nal+%jQLW3oOaq'*kfo^i@4+7R_<(F$sEdA7j2`b`&U6`YGNZ:Vr68`%8>1!:6Eu;;'kl"W7U>
%/09,EK&8r><$n<dNT+6Bf)&"1+m0Wj<lBm`W8T$.Xuf\%)+FK&=JDBD7Kp(G.@Xq*.3F&[%[K]1H^M"X+W+$W9Epe#>@2Q[Yl:%]
%]k.e<&>QGDN:\"SS,oRl6RqL.41FE5fr@6#5NK[keh0H/ji+j`&LJjBPp7FICfW4CA;)PY=9K\)_YWD,dR2I.!3([(@p-o9lnu.-
%ifN_dC6rr,&_/9O`8*\4O+A"Oee"s7&\2`Z$`\7VBLM54PTj-F+*d].MZDX^T:skKhU*O14T6r'UC]@o4m;ZYG/?":KNJ424DMjB
%k_/4NBYVDh@ZQqU(Llii@8I7LNtRs."u-hjS0t"GKgDj6;TjG+ia_YDCu<3Q7q/"G.i0db2><MiW7A$g(*/\^b&6qZVA6tZ8<4E0
%/X0qO5uf^FrPr8?K74u[\V%gBau>"9TY/<1pB=(ITuZT*1IEKcN5u/U[E!XN54bb7J-2/c(*\:Oq?VrJ)>p+_&7d\A0t_@t+&upN
%L>m#LFKiQA>L8l$Y/KNu>F:ZsWF!C0n^+.X(LX,E/2NJ)aaBL0d//Tl5')!"#^!+'nBU-([^Gd$O:qV0,uI^5)l:5PAKf.Oe[S^)
%mrFn4INUT=Lm4r-[Of/0Mu&5P0'jA_a]]1:P=p&h@Ao7U@/7u$rsi5Hr*HX'^RNXj3fJ%7oYH7q"?^^j$H79RHR#j4.[YlqKfbBg
%;><l](4tQQk'!giXa!Qg)5+d2^5qljVf:=Rl"h-YrpEs'ZtrWaQ"j`GX<mBe\&ibBC@8O[)^H*s.kHWh_7<[%,(171C0nHQ?H??X
%];Y$rO@Q#kOlGO"otKa`*B]+I-JisfK@:2#?JITG5H9hLN%"9dXVk?,`P\f$*JZcVP3TL&iQeXA`95W4rEGG]H:1?(Em?+LVS<'c
%f<<HkhkW7VBr.]uPqs\*iE__D,+P>PR2`+m<m<qP`L3@>TX^a+$0$GD1Zt%Y,_u(CF60D]JI%PfP2F9__[t]cZm+46'_Se'CAQ2^
%\m$t9l6/2(nIr4jq^^RLKs87`:*M9&g_peK4JC/Y-jXm:UT/.&E$UZlnrfO[&keLKdlc+\WCbeA`4`2Up1U9ofKU\0I>\c3+%oFG
%I_9o2<$k?g7^?qk.`?-GC>%Mg,(&`RZa7c^d.,(!RNnmKJS9js0MV?bmfbC2#V+mjJD<WqU3C@<qh6>Y6>"-Ep"I)PWFA#U89Ml"
%fC5i7=@=i!<e+-G4cR2$p!)Q8A&<.'6q)PmWmIc#8B=H$qe?hB(9\GJJ0?rqi5@UEjaPk>02,Q,1GHXT@:31EK-f!h0?38MTfp'"
%:&p_liYnX\V[4b,j;rZXGcaXnP76EJ.!LMkl7k)kNlN3d_C?;j:3&eZM6$tb_JMH2+_u1hep]TZjr'r;b?m&kc>TM0&+=UTZA)!J
%mY3^1cgkM,m?iiZ!h'a:NM#V#Xnt"+pO4M65JpZp[$F>B<<jmgh@@!k2H'4&8C>VC0jogcg2WQQ]N&bt;,ktl2/l:C-^o`Gr,E*\
%+Y0qWfD;lq^iK7KH3BVN^_Y]=J[*NXNP!$IegMcAXrmf-,jj_G)UkE/s3GgAMLa"_dfT):X<*;BIj#_/<iS7Gpt&_O!7`<]&L"-i
%WCRjp-C[PI'cZ17pU@D[Vo&6@D;DsC^,@NW_afWd,kop&"sAU`bk$BkGVd'\c^83a=h_Z=pDcPS5iUA*d$NE-]k<A=>:rnf-H#S?
%>Cpk;b-Hh[Hq`l8Y^O\X^ZIUmqOCuk44^8t<W5f*97V!'X(Z29A3Z=fm-rB]F>jk1_H3cf=D1$Gq:C9jCu6;NLfH)mDf'HY6.F_Q
%dI$&aKp$d&Sr?^jnce&k[;(IC.HjNmTmqR*AbNH?Eq(hr<+`FU_1t2QXs+`/'R4eY0).Bf`iV^cg+j;,droCCM2&'Hfao"nA_5BF
%4XcYh*]uQT0n"[0EC93KI8s"dI<WW?k.Lu;4[RY=F<2c%N:tMRbIbEq160>Xp.LfhJ4cBtq@s&"n3FnIR9P*Q=l_+:d?hg<%O'Ad
%K75r\.2q[Ja%dZf,>G'#V'g/4kTZn%9N!A"!q99t5;m#C`C`Fm@9B!N9)gHNT,`6d_K)JV?^oFl?s$Ht#P`JDV^AV$,C_9<s/[Kn
%OC[#V0,N:NVpicIjPkQC?9UHa$PHg7F1@,"g9,Es@kO#Ldg/6onEO83`Q209VA1Z,O6]l>jfb*c,3N&Jg;LIk>U#*;eE5at2?<LY
%^Uhp.;bE'$M$2QkkDXj0RZsuErO$UGClV)_)Fh&E@`<VJj1hto]3m47i:Ll_:3h]'B]-sTmtnc*GPHk49s6^V"I%@bks6FiOG.7P
%-lQ_L?uQ(T].o'#(b$U!#Z=#fN(S"\]-(j]c-&'/I:(7_VT/u@$Jm>#.%)8%4+#%O@,"oc'QDqfj4M1]6Z#,)EChm86&%BO<SFWN
%JnFT.MotBm<jLOcU87&jMsD<$a#qXno:FA,O\M#.*CCRf9utKOc2Fdb&Lst>XZ(#[DSSe?I9NC2Q]li7/aH&M/SEVc>JqHM],\jp
%oWk7&+;_!Ba'BGJ=NdWsnE'3S7rPltfk1Efa(uNpOAmIi;V[%RW(HR9K7\HtH"9&o6jC2Z+qHop9l"8Pft.L6'F[FO;K$*D_QjcX
%'mU.QNYsEgL[?.=5e++q]*/3eE^I8GJDZ`f"j3k,2.'*u6`rXBO#8B+,2<>iFZ7('`NOLcRK*D(Q)o%C_c;*1''B/,d!t=L<3,=p
%WB*reHa11C[BrA79EmU*[p0P*9Se^giCf$dIKsGGg5T"Bl@,Q/705[3,dB:H"WX6jd2CW^KYLlTM.2luE<hT3qh)%f`47"*p11e0
%YPa%lZ%cqkWD@<<AT[`upqdO90R6uG9*!Y4j^O5hgQ6!G>1-](LYRlKQe!6s@:>sU@*sN(R-Ve5r8WA1s4SI,?Ps^TWiSa<i/S[W
%@Q*2UEGF!(AroBZ$lRH%">f]/.'OCj$VXqZ5la,XN^%)&2Y*q"apf0FhW"U)mPk8'I8Ro()[1RbpWfGHm+\-)Yl8bO\igUu_h=nc
%Cu8i8M:D]dB/eN]l.p^*An1oVg!Nk(N!'m7^hkn='e/!H$bF9Y5plXpTC"\+nAIi(BB*%1POG$LCl;*Umiu+M$q"__iG/6U+5iu"
%#WL31k'Bm&,4l`s'`)fH_egd"pZLsqdA'Tu&NNZ=PSN-qT`,Mb<7_=XOCcD@48Ul3^)"Haq0@`aXJ:>[Xk<HsSE.H+nSi<8E3Wd`
%j"F>l*R8=J*nTcU10aL!o5;#)&j:!698IVOHNt&&q[S+jVSJ,=8lWF9dTUGn<IJ"HE?[A)P:m<,Y*7ojA_R8[9)lgAg+>p`am4Uk
%CA&;1C\VI(qS2Ql>,Ap@6ZrG'/kcaCY?ORj)mHSR4B^)$9KUYX%RHu4qNUO8n1706rjW_ZG/bQkWsrN6k/;tP\1Mj.Z,?iR`U4?F
%([kC`<`k(RN807V-h56VH7-_O=)Ng+ZR_W1,hr]-5^@gu7^kcU.6,u&ZH0Wu,/>s$1&I9&$E!_#^=7'['jIT#H]0Tu`?9eK>R"::
%Lt$U)CKr/g2,)(jp'Wu<7K3l-G1"-6#;P<VrR6$p6eLl2O!tF6>c`e?"cTFg0jjL6ZU8,XF,m/:?:'m(/c<M[)!oW3YGaEY&8;li
%WNj-.Q#%'83%"U`@Ob$6294`h,Ci@eb=[q^Wt=sN'M@;s:\ETt.T?hPgDpCjO=LX;MprX'6%L)mr?W2jGbh#u#sar!"jlD_Qd>)_
%#hj#9[3t3pa6e&`&9SM2$1$e^7oGn38\"7\T&4A:1/K/d(q-U]$?;D1)pYqNE@WXLP`kRUFd\,=ALmMo`P\ir=u'GcB2S+-La)!I
%5jSA^;L&+D`"(_6Snum8a>=J`R@G"Ye)=j?:E*8t1M)4s30'e'$ncO&g+AZ*`shMe20M&T(1-VQjjK*1UOU,LX4r'm.smCH[?H0I
%bLp7^Q,]J[l[g4`"gE<3mC4mM>9FRQ!fM\n"GB;co8J*+O5F<FNf!K_]b<N4`tc^&.M)p"WZ^5ZMTfn2;jq4W*=)&S#VN6=%K'Xi
%^L's=mAM)rMbc8:"\DbaQqsp/BaQb/_UBA+TW#TASmVSh`H'ZD=JP/7M[9Kr_YYZ4DH(p?=*nma(UksF7>k>fPS\DU\O*t9Zuc!#
%@TBG<;jpH".5X"_8H\Ej\tQ/ag>h7o/<+6Cc&TpFJNfo(UOfVhZ2O@&=g3ZO*,&6ti="gCKX&N<+uR_UK&i1H`Br,>Vi!)4pLG-2
%\f#*\_$(?*ZW23&#\,<Y%djh88(Ep-U.]f>kI4*!dMe1Rdu6mXYTD=7>VPa(-f!'.T(M@lMGJ22[WM=#27_ik>/Xu8DA+HD\D:-V
%@d2sg<&=s"o_T+bcM)?lPF#OU!m;T"+Zbs"Q\aTK&Eia%<NPqX3b%gAd?&p:J1.m;AYQiW1]s;G,t6WNr\Tm:O+\O%LV0(>!\WEl
%6]Wi*mC5!G5Gn9qQdglo65oCc`e%2ZA[D=TUe\M2RYjNBF(Jn8qmM2QRQQ!Y9'T\'hZUg@:nD``ER.2?:,bpSeMg.9LA(%$[D3,B
%LmSSGG>Kkf;Km*Y]_i,:rbXO<DF9i7\!d>J:_A^W4tL[\pPe)BPQF9d-R*'P%UT;QA;Jo(,j9SF".aiF^3C-Gj:,'8&07%M,[rVF
%7*"-F"1oC<Iq$QWI=YKS0>*C>%#?B:,@eEIBcSDlGL\a3)]nR%C(H-MbD:WTb8h*74DB2^lc78(X;hgL`iDOgIRWOL+c7Vb"9P1j
%/p=p]-I[qQM^8>*fN+;l*&]f"+RR0/Qd[WnS3fEU'u3R2-88g;B@I\Xrs"n,IpZZcY`g;".oPqq2nnbNpM4Lmp8XkY)tdOnN'@#I
%L<:8=iO[X)L,;<`$`d:BTkF:QR7nZ;Llt')k8BM^O,A,BaRQpoqeI^YP^C%\`s)(ck6MgQIK&L=Js]WVqYYj&No_ELCDZDTlbge$
%i32:WTS35&^#NjOR1=Ih$:gVJ1[Od6bst*5kmfh_"E%U"4Y,ptV[NJd7-FS>[X6k5#aQqFA0;]6pi*\hV:?0r_<tSl/r\DC]<S]4
%NPl-ANaR#c9YhhMF/@d^.9N?/8F'<G1/D8)3h+WcfeX`_-m24<,=7sEX^^2Jg@CZj?Xo'mGh=T[>/9^o)T<1=W-tj+N1oHoQPVl)
%hI>/"d`P+-hGLZbM7hF\XQ(.#*]Kc!,D`0.*&2N,(uioNm1)\V'%*TFErPuB=lbq'Up-Q,6S:Ki2DqB:0W_folbhBTA"N^D6c!4D
%;qpTs/c-!fqFOO;@qCeu&XC4:k.MrSBjWu+\GYQuVP4rG'hg(b2G%&HZ\1qV1hfmaK@mHU=lb7<-"(NTbs?X\*R5s'[_b#,N]&!]
%J]WGTO#q<N+nh:ml`/NH;2ne3jnQ#db?\JPp4]HRl#!>A=l`tK/\lJaCZNq/75o*mCf?3<X%8AF4nQB<2<>nr'A.Dk?bo*]a9DY@
%$*`Aj$B"Q&INeSGj6AJKkEb",8A`29(rdS2:*<Ht08eKLX$KcS1MjXf,?L@NjV3h#Q7XJ00B4)5C18$t/I!gZ5jXjr7O"TD:?1-`
%&nlb1BG/BJJY8)8hLp]lDSZa>=u2$E=`u*]Lms]^I-IV1[InoEWEq2(KAO*4qZXs?p$b#IiR'dm/5W.44lA%(7`m8@DU'LW^.T9?
%%F^bLX;-?Z>_#E3'%D$iMSpe8N2K+_*9*Z^.:*F4OEK3W"2MQgf;[))[s!)^lB7n3#e)OXf-)8DWi[bhg)t+QC?1)ci,9@\+s2dD
%o!mX]U((KGGAE56cTqKc`F7\]GVWim'(Ljpqm\@NDt123?dmQJZDBnu/kkUM-0tY#Z&qaYI$e9lp1k>1Nbq4:&eRt-G#h/N$%$%A
%s"Rf?,5'Zl31+8u76J2m1s+:7'XU&E9-JoM>>TdsZL(Xm,3V,9gme*Jl5jt[J@jCiM5i_IjN@RYTp^"F/"(<u'UlOS+:9(!._\JO
%R20cE]RDH/Y_o`Z&/F.GE<6aPi,BNd`&;24kDm2*h$JBpEe'p9%a-FHU<ekg?4&'r7B?#tXQ.!N'aW)$q*WVs)0/-o*IZ>fRP?:r
%GLWjc+Kc&#c)KV-(<6DG`6OOU#/jD[$orT!5I$/=/E;g:GY*p9!C>n115!ZFcnngcIuUN\KCfun0R\ZRDe=r4,R#dJ.rZYQ-ocAt
%-+@rV#.M0@GSa+bqButq(*<+<oC6UIUX?RU2Lqs5jn/\Y'LsAf`@?p&0'#t1Lr1e=7.j'G.TBd)5I^EWEo[Aq\/ntA@uumPX4'L,
%qit^;>DgR:RT0rSE7N!%3R3FDK>O&T?atL,,.aC/Bjt\n"4tVtm6E]L^DkCgfLrpR^13E2:Z0d[.>=PB'54c[niQ8K'p!K\!@&rs
%GT"DB@h@f%[Ua*U-?L7er7X';f]*O;C0q_;rp?tMeIe8U]kP75U#e\W?nf2>p9X6<4^O,E;D8ul*_Ql%HX)LTi8llJ#pT,d9/C(s
%;f!cPfceteNl0%$SI]N75ANfoPE-S;=+V+enkH!*%LffS-q^@G'Mq_aE.H2D0]ifOr^_0_qkW(QNNK*$;DGEb!&@HTlTLR6gcD,q
%8poH9;":s_07+_J1%a<;bm\PI\(+hMm`G&d$]g?Aft3+W/B4t'*B7laM`3/^DWLa"I0:U'da?Oo!4*26Y2jM0>DJ4=4YV!WnM'S!
%1s%m+ihCsZ0NZKV(+ad#*8!J&ao7CW9J8O7/O?'u)CSQ*0b)R/Bl/<*9,PE5RK:Ve.r-3qDpTK7\h>a*luqD2Q\bV`5Ci]!hOE>1
%i!@`hN`#<e7!,d(F`d>%f*$ps7ebZ'LtGddqA>oV?V?sGRK,s1?V<FX@fE`>:p$[=dZ.Yu!JoaV8#XghUW>d()L<)@J.LE3>s7?.
%jkqWK?sWc(-"K'&R^tQcnqQaDa_:Ymo%r.ZaYpn>W!q(8-]5G-i">0=dZ*I7WK7"N<%Qo8]I.oe'Et\UTag/"!H,"3Z4U\Jcp0+'
%De&t/GRYCEWZ=M%-b7"c/\6fNT6Sa5;Pe&)a@-t3Eqo.LLOIT\cF=!]RpO;I'IDI&QN.RH%bQTh:(GPCs7c50]s]0+FmfD(+7@;P
%EfdgY]@fn6H'5?O+M\1$3"b./@5=,`"*6qd/1'f#&(aubbpL'JhOZOTJH4qJh9Dtbn#r`kgnfU<ab$"@7=\+:cdkJI=Enuoh7p(4
%1B=`UE2K[*d*g5f8&Q1jBnk0hZFU(7Vl?4:<`7K!S^,EW9le/s!,GSQSGT,nnQL)F1)h01Jf!]_#7W$!!NjnJgY^9HVV9Y@%p,g<
%Oc^Qg>)gn@MNEk7l_[1\p9h"GjBQ1mC^0agG\-:M5`4;`pKLk3/BkI_"\`:Y2'HFWR1,fO0?^9fehqZS`/10oRK^",84X"uHOFo'
%"I.!1"c/M`p9flni`=-2_<;&*2"N'6i+^_X5O4X5HZ(T86ie))>FI-]Ma&LRIKIR(M)uGJH<lcpb(Xf$1HH[7o-KRuC:n1rUYCB2
%:L\+oR(2mDWf4i:du?)U/U+6uXiVn+\fXdU@S]9#-HjlN>EVpll$7C[>^;db/Mu?1j/U[Y"=K>:M['pVDTQ-\#]c$9FRC?$!)>HT
%5`74TQ?@jPh^\pnSgO2Tg#>RSXRX""<&7+,'5D%-^?$&BSS=O9mppB:"!k<?/u#2B1F]>(bL<G:E=u8NR==F=jP5ik;j,U5>gr#q
%*EC3\X]lgiYDCka,.m:!>/#<mD#+p$C_*WmP8?PuZ]nI+VK]@Y!Gf5dK\DC#aJ;jNW@U71EHVO>[2pH!3KD3tk@sUg%oDR)gVS5O
%22>:!nmgYT%pk?j\aQk8!b'lMCc%=Pk07nXY@#O1#a"tM!?H;a$!ERQeX1T,@7iRpAsq^J[]M.C2$PJt.e%J64dT%Gm?Slu+K8X`
%.G5Q;7lb_D(;Jg#l;umm+H#^6T2P41c`>%GW=NAW+4..T=21fp;_WB*AE_Nb$L^EH(Q'*,OP8kC4^Sq/a=?!mVf&2YA[:_u[rXeM
%$].0'X_Ubfn(\,2pTDfM[3_UDS)_-J^N<n8aGeeJ]=K@Y>_h*cYT%@N7`L)GAt(VpJf%9=qr*r'rYXJPC2:Ea"7+<5rK*$a&KiF$
%-IbT`IB-QdIAj=c9C'^&WB3sB]B0a$k2FqB\lXf8"DTmibcm$H0Z(<meWu,X=UPMmR_8=0`74.Nn!uKHBU;i<m!Xj'`Ma#Gd-@dS
%moEr,fMkMXSf%%<*aC:[)qE1L3C8['ZEI?iM$B!e'Hk%D-,LHo1`tbroqQSnbYHncU!-i,D6k\AKj=,*1"@%[=Lf4\n>-jjF!*i]
%[(&eUjUa5\+ku.A\KFDtjGsB*'jcFl;L0CeP=:T(?$"lJgNokHc(3-ULc5EHjRP9$X@[!6Fmj=Tb+;l[p+b'q%07IcWa.*I&oEP,
%G7g,@&d9eTZoq]i$$\*G4L*'g`ro("\@"XRgIVS:7HYutTiK7T[n_6X"gi/2RIFpZh21d&>WU1ef$X)$KlrN72Q>Tf4BCN1.=&6/
%.urdkoieI1\_$2,>icraU(fWPn8>Bl.j./q.otJRU/f5a2YJL\GH`!N*bh`s<,6nZoNGLI&a[BC.DDK!(IcKddqB\rrTk%gXfh2P
%.5I#Y`i!Q@$j:GGHp>@sT%7R4C2IJA/=,C\3%mA7h6pIWXGA5tbYG_$k.*S>1$32U)HFp."B!i5;!j]p=gctill;hpFh8O-8MQF<
%F*6)!ZGBtH!jlmS-D/n;C"^]NSXWPkhM`;+*K-8T+AX`h:iT_,1u%E;V!o!8.FJKtY!l;S+S2nsO>onHl?$^GS2$=EV5Tl(#-l=n
%Cf'`O"?_h/#-\gR#N4EM1_NOb&nN4/HL$"JXf-ot`0lR1Bj%/Q&<>1h15"jO'fJie-CE2]-1&YLMF]%_?[#dY!tn*IVnHe[+#BG&
%WbfYB%Zih8K>3h$.WSK`[U,/DY'o\!EZ`C7W-Do\-V_a6j/7gh\[J4tPBEPKc-2K@=4c*kGs`AiVoU1Kg.V.1Bmr3@+A+s*!EPrg
%[B%\n88#21o*cpUg0Q'7X[XT@W6F+fCpc1L@mT9'LZ[2c!]\In96G$sms$W\?HD3@F)SO:#B"niQs]Z,],5IKL&nbGpm%Hg3;8pb
%gJ/%CNHggUYI/Z%jtKuF-QCFf&N%+$480UG%Cpjd61(q/P]je*g!2oGV^#VD5ce8GN`Y=!@iML-K<l3:mNAY<XI,fD8%VN[bo==P
%(n5j(b*UnTE5894I(_oNPmQ2e0R3B]Q(nQY\pNjbA?fVk)d=LLOV"kEl08iY@[]?jVTCa\o^2s[Lk`drI$d/1hc6O38%CPqn4?K?
%fXW_^)WJ7tg0<c0>a9D6Q[c%>.qpr&BW>qCD*)o`&'$8BD,%J+.n9A*LeJ&%`E;&21F_eCp6TnVlRgBr]oWbO@s*98/WpYSA4pO_
%CULRhjte/&o9X(YhOa]nd;2ndJD!I]=Z_Uj(A[IDhZEtW\b6,,F9u"S]_t.'02&W,KMe5oVQdt->#Sh@S#r!ul3<(!+4])f<",i!
%+/$mk>\\+al#q4).4t!1i^AZ2W$L4WQ*jlu)8fTdW/dLB=96[D]rd3?;1nO%GtTno7SqoH>C]8Og.%@QQ'SWTr1A0(a6%.d(X/M;
%\#HdC`+m[E4T*Lj#qIKi'pMY?gebED&h!>dTNp1kfu+R:`H(M4ZDjBkOnZ[eY3+::F7&2p#>BBg1S^[E7+RU!QDi)'`nS1Qg1gY%
%_Ke]X3n2^31%]'#QH*f!L4X$#n'I"[(!r9E=@^]nZ*(]^5\j)`9uajCZ:k_O6-$$7OpkKjKt03ijt94V1,*7Lk<nLnWKiU#_(Q#;
%-`H!7A'u-o0F_]9%tEFh0b%fZ1[2B[[qe??[I>^6l+"b<qsS&S0D(*0>11YCE7,"p47#QcUV111OB*,Vqcackb7aOlX6mRM>I\\i
%HR\+nZruJ%PU[;D)K-/C`?*aQ\iq(m\s)7a=Z,XP::kG)]?`lB>^jQM`3PlE`(CQ'eNtPRML,+Hi&P)D'jb0#frj_R!;D-#ADDWY
%5\4'-^=uiD#TkSEbOACXas9)/Ed>J_dGbXfN1mS]PC"e)b2pbkPP/0?RIe_T_C]`kLKKN/n`%lQb5B%VgLL[>O$39hQ@VbO=o1,Q
%"$3$@Bo/E=Z,Q=!3VEU$=,c92Jqo-#]7[c6n=6.NYRE>)G&'0@3hp1u(!UtjD(9^@ak\N`L[Id>"bZcbQXj`DcgQ6hnP'Oh):7eo
%o:&cA[jRab(Fr0cS)pkUBdDphJ:/u-CE=jh@\pSm*kgIb=W51joa.!l\U[(fagW\r'Ta?ckY:.;AkD1I:Zd#A1=kThDD/.Yh]B8R
%$3Ju46W,.c@6MiKCLT"q>P%"M^mGj;m-=IkXrFKGN/e""%EAK7^-/kTl"RK1/tq>L:!#QH,S[mPl4L'=#+/qUb>tn8gI\3[nZl_U
%-f6acN/Rik/P3j`cL1L!%e?LM2Y@o&\9<MX8m+Ph!@G0U4_#]70JU,FhW/Q\Mc.nKFpp6cH0$<CGuF=4CR8njA#J/<4@o>LW9da;
%9n?=!0.dR.4TqGN2kL^R%)ALhN&-BJ3b[kg(C_Ii>g,pF2QCR='=Op7c_[r],,9(BDpN`$]*QH#eJj8l:6Won[b=(M0?K<0b?!BB
%EgKrs<1hV'pP%dT3eP&r#]J=WX6]Bfj7SNMSupE#@+%&Zl?$(+p/7um1\gC;(BI.<2W'D48'qojlV+T&T#FV5aGt'"7Yt/T5NG"r
%gb>*eQ=5^%3q$p`5$%D05DDUibp'-qr"uqY>'rnT'`)NN4IBcf5d3'97;ba(mr^mVQcrZhr*d[#@;d$QV3=`d4.#LhG+1nOEF5Q0
%==Z+"a8M=HdW10f9N!%tkj9sK'6%1G0ikfh5fAG`Rf`]q)5(!$-X.[:7%8::#TQNUJ6)&F2U@r#)b[^Wfr;Yn+RW\/"KgJ95MiC-
%G6g1U!:24p1gq3)L8f4';]I^%5Tq9,B_.+I*p,673D]!2f4q/AlcAF"A*IDs^hTR5)[IRKEL@95R&`$"0Z&UsC=+##ajeJP\HWqV
%"))%FcLJkZ+u@p;S.h'5R7u8GD(T)_(aOWT@h>.kB25]'cT3hVDJLP:^X55!G&0eUR@eBQh,PYWn]1TK0doKe^K^'EYoAqic!1P+
%cM[pV]prr?;GmV&oma;!QC1-.]D356gkFF<3/D)1`*2fS.371]b.j<fnha-JCUl*bGbPk.O(O:o;C45HORM>(]:H['%(NH@_F.`7
%`1e''oX;/36?ZDSIX7?Re$X#BQ"dap`f+Xh,_/!*3GH+X5.74Bi_N\=`G^PU#(7]Zi8`*kYQ!+6d(-9<J[I(sRs4YP3#^FobWrQT
%kqAa@]tGQ&fTLhedGP&r?WPucZ<u5&5!FuEj_R[5gPKtOB/3(Qf'=0gb66q5f4lm15.d!A+W6u.Se$Ct<&,n9NTR%U_D:qoe1@Lj
%Q\$+F[&J03X+sHD,:3U:[-5RHMNu9BB[QGYK\WT`egPW27M!lV)BX=Y453Brn<h];99R@`k&Z)KVW+&MJR<HPC]W.bL!`#mV^"'V
%U,q]@BkZe0Y7m>?"e2b,JJmk"@EYX1esS?o4na$I71X#OS&R"s@%/J[DY(!O&*h/K_F*-1.Lm=a(fDerp=;MV''4Qd#o*!O9T*8&
%16)F<D$O6uC!Ukd(kpq`$EAh&@#"E]d2SghZRC'#Rk80`2!7'\:5qS\C_Um\Rj-)JS1Q\mY&BU$]R@E&P;G:.Nu\\&@\d>=oE)=h
%3b.E?o4*-&fSp&g+,^3;D@;$V`@6T,W7!jnF-nI2&U].P5\0dJ&qZ5!5C*%_<1D^O"nk]cU]Qc]-Vd4$PW``k#T(caQSt!RZ$`:J
%m'.&*`,Oe`baWAmPBWSkERq0;XX$,7->04'od[EiesGC\f_IS[Aq4SJND4?=$t,-%%$nBUkM!P'W=_S'gUu?%\_\=`P@ljf(,g?4
%7`Kfq5ZCfKralbf[B>`.j@D=c4g>1W_%U#s]E\%jd2]Ns/ZO`YaGZM::0$M$\5n?%AR&ejh:H[*M@h\Ig3]PgQJMA!85Y,a=2$JN
%P^FC@h:Z5Grl.E1gW8:*O-;@-XP/N>7bQiM#atq0So`<2rYO/PXGFF7VcA#0Sbn&I)Dqq/J@&IIN%orF+(4#kI8)![A2AU?)P&ff
%+\itG1c[(J2e_UUoU+gkB%^2=s#4j19=k2t]ZKCD0`H0B8qKde]VV\bDE&DqO#%6;F?QqaQ)`fr3S>sa6`/o4A>D2D7A4^:G/BTc
%jb!D4gK]^pK]ueCO_[]'rlWGYj"sVT;#-h0m/EfipY"$cHY.+=^>hX":bb#9Q.n"VZ*6Aei6tB*YUQ`Bf^@!UR1ogE<Z>iO]`$#m
%Np#=*Y7[B-hRn\'jfcP*!0L6]6;+nD`e#.niO`FTaQA3^e-7;\h$,mVfg;0K@YjjcE<C_BQOCYOi<`-:Pa*.`Ro!b4)k\r5V4+H:
%f^qgAp>rj[oY,Mu4IE&u45FL3b>ffZFL0b(bs`:u&TK+3dFAPk+e(t8n9$M3-ou)'fc2UI$+SN,f*Ll#<;M]UkZRc,CJ!l1Ps&ML
%BC3h6&ifha/5+OQfp]1_VfKY?oa/HhT(j1[ZKSTi;7.UE<VH'Le"W$\9iJVP5hJK)a@s6.3R&u3O)m@=bDc$F_ejL>H;ZlJJ+6iR
%=ica"VNF1(kE^E)\^J82%nP$-W#G&*iSgh26@bRc#V]=*<?`Vi@D!dX#o1\J@o^9b'opFuNGqqED2pq'.95'6kTq$AARG\I_XR($
%<Nb('5W$ZC/D@WS\5B((Wp5`5?7^1U%OD%R?-!'(kda;jmBbMo;\`QA&i0GVR'V#o8qp-;OoWs,+2&:iWlPU,)7/hmh)XSYr3&+n
%+HN!?>`b_8]/)^"CLf*Z3!E8]B62+s$.ol'@![J^1*A<fenNaeT9->l*DgIr?c8/Lk&t<YTUoGji#@<*C!8(+Bi3HhD_5ZJf9XP\
%>$bTQ!K'1/6]ZR$pU!DDM*pd"AEBlqM"q;_D%jZj>JGg.O<84gcUs=WYAlpuR0Q'LDj>*WB%hEJpoV-'C)pm-)@GO9AXCi5+,CAd
%`HDlq`6!E:d33Yma$`;=Y_U^[8u[Vg7(DP&48?=,6ZSF5<-"&pjqYe/^M4KBr.)0S+bY%_5^To"RpQj[>PX_mTBC)/I88f-$[lSL
%)uCRI`p9>l[;kf`]"Fn&,q#8N,R_S36)\&3gK#5a^3ojZ^5B1X\Gft@cqB%OZtor/OL_cT,nEHR(UlGaZ,eimR@OUX,0CsU?#sf-
%`<i%hD/c^5_%4-uU5HI-!&St=WdR+Hj^Q-u0URs]nn]fYpIm9\ErKJLOj4<;G28"T,V)bOO%f8'2n&@_C!2E?dQf+h=jF+2eg.kt
%dOk'#[bX)c%VN[V^Pg;u)1OGJ>a\.gM+_X=.=dA,Wn-/;qD]V@CcY?MkN/P0Mn#DShMna*1E3:q+PdlTg-Y9XMP.gr6^:hM;^A2J
%8.rtelu!R9q<%X6F#SbIefIBpY^dRuTjHAhc=-!++q3E!0;\3;:Eg2s$S)%eAI?^qQI=1K2d6o5q*#G3P:7WfpbP>_=30Kn.<`C?
%a[eJLWSW`(@qB7i^?$T-,2YtCn;KeLDBqE]j_S-5SqcRMbQQ#Bm`eaW[eQoJ="00foBU.DJrdo:b%@DL(RXh/j9?1mpU2_;Z\5(c
%E+>$p^#n^VI3FJ+q]`GV<'J)LiP7SA&I/l8So+M8c`G#9qZO:.>PgJG@XpEK-(4,SeH[@3)l+D.ZM"1a.(f-;,=DD1))3]70[D_k
%mcj8dRB@hi@Nou8BTmB8?S_jWZIPD($@p]:II)?*"mcmo<nn1X,u6F!nL-o+.!&Z+rFYqqb;l&\:VD;FJ:K>OR?2(86"f3SLDO0#
%;*0iXq3K]B<W>GD*g\9SP]iVQR*;]4:Nl6j%*;^pnEM[-9q(.l</WH"K\'LF:<OA2)_iRAfU?jso.`>ERS>`I;RET;WN\*cj(T?l
%r1:Fl?roWbl1-M0QDOJi9\S=+EWb;Tbo3IKV#nYE[]86191Zj'`\\WM$m\RE)U!(I@E%fq.]C$&+D\g-30*SP.a:kX66Mf[=lje3
%JPS;.,Au[tJ/&o_Df/Vq6%Ec/_plDE?]1Wp25K&/DW_-THn<LggquHI^Z`p#2OmOE7r625883d3g[n<7aI8Nj8-\V7<JpnRgioA>
%-[4rE)KVM^G4K];r9"ChiH!L3_14%k.1cEYYB&!)Ru9jb7+p_g3Q"PkSP.SV,+[ugm<tP$)4B_QI(r1sR>ce>9&5IU@.i<N^t7Z?
%72O%#9@^.s2Mg"n0<=Q+3ErT\;c)4SK3VHWZIiY+]#U4B2j^8T86ji9$bTXil\G+ZcYt`%JK!iMF4(:eL15Rif:#sQ2Totn(Q]9"
%njMkrR$iDhS+Y(DhH>$6iP\>Wf6fj6N]sl2TEib]0m."\^(B<$3Ob23H;^DQ"#;f!m:4NeBZ%(=QZBjgT!$N.I@YaW>5Z2Qpo7lq
%=<'S,`^21a.gRo7CB`eR`i7,lLaq/F`AWC.8^$0j=.4tO%SF8lDur'L(XY(icIBHI;ZJhAphl"+.DEA<06:l4E:a1C&D67@QHNb%
%`*j);X0Phm#jlN?:,4qif@bA"*"XESMne)/!(jU<SbmO>rjg0hKTXOf-iDJ?2gofKjP:V9mSZ*b]6+*;UVK@5+KO[uI=prN/llqg
%[P;VO4E%?*VU_,-96_n7[c9Ps'"$<p2KeOq*%f;t1`MV[TWQLVQVEZFo2a>C\_Vo`?#%KqX'in_FskDf"8B:DBOG[0BZF(3#qJ5&
%mM\"MonpN+YdX$j_QRetYNJh)?sdGG7FT&>Wp+MgUE]To0!j1/N*E;38iTS%J0s%2pd9<UD,IPHgY_mu_]=sm_S\(]@.U]EB0dYO
%;emtUG7eeJLN4QshQ0gc06Om@r=h*]o2ietZkuse\W;!<ff5s68U(=AA=:3q<TfVU5@'a4E?WhDMH](t6_&4!Y16X2W!G?3J/!:H
%mJ5O,CTZSujE2-L$0nN1*nmrN<0iVDM;_Ve[m^V;co,VS]Ad\qd9J3K`Lp\H^72^d3oIa-)Oh\J[&JLP"?3!a9f$E]%#Sn7ccLbS
%!%B,tY>;A/"_8ieg:CN*W(\PZdbW)E<PN^SRJc"`bkpZl+M=/sV0pPM#K[o*5%.I&]'fj^FW/N<maWHJ'Ya<ZTTB.&_Bg\;QtSbD
%[#U.OaKr!c%0*Yp-[R?'X:&YC5aJYn28mN^,^ihn=OK5W?qnR%.9"FNRHLgiihLJcTQIPKT%\<@ZGnHGjoO<:+s.1U0Y)#J%;+te
%itR?O16tUN='`Lb`Q3C)A]%*R-;.O'(<+0*&ALroa@>$T`"mJp(Z.gL@e:3/,o57HQlct<bg\7NRJO_C_,D/^NNOlgO\/e3pOoth
%CqY)!>G!J@+Uu3*L;a@[D1'U\E=Jq\e8Fd0:TJ\#4csMt?#AY\Fpua^U!N/+,i'<d48!,IC[.f':ZLfIP]ig,]5Ca&eLnH@-<3>%
%d,jPK_^jGUDhjc;l3k*D6=sLlW=pqn5N)_[[.LSf#CS8C>`i`jNW/(Mr1>KWYWWI#YYmYb"Qj4<A?bPQq\JYR;<Fu\2tHFGr"p=!
%kSsT4*c!iYnm-5$1)2>9h.f`V#D>5f(-VNQZYFJ;NAIWW[-/^26t_J@_^@r/_k:BUQ*WruJLku_/(s)/:PNO1V:ir4OJ88(@<g>V
%FbKs^j?^12.q`u]\[[1&[2)tC'elu&4'?Z(HIj9EYPQhMS.ogomQ>qq87tH*<m6$Bi"IFc,I<qif$7]=hOIOe2CT^P3X4(1<F0Vh
%476R7jTmSNK>'hQ*bi'9=8au?=O9D\@r$la`[)T\Fe6@d94)Ci*14kTO+N:&jQ9Y\gMs\Jl?Z.B2W8*6XPF%$,0;'gacj7@cs;k]
%"6V9t=JB;J`Mp2AgHgSsQT48cOk'c%jb\nq<$k8/3u`BQWlbgfiQ,hECn%F#iK>@FLtH9h4*S6[4k^_`3P$a>d5T5uY%'#^1O&?g
%EG((4Y0Fj>nH>r95[W[fRVpp2H)pY)33+ff^nCCDREVe3iORluJs-Z'oFWt+rO(3\?5L(D!fW;D$,MGZ3L$o27i#33!b9__b!"RU
%SqBmHR".bQs);3TILs)1Ih*G)]f\)>0/bJBVI<OnW;Y^/\/DH.g3S=s+h+@fN3d!Te85;4h=[G"k]k=mj8=(,o,]^Gr97:trp^L`
%IQBBMJ+;dls5u%bnRl7Ero[Yf!r5'+c,M%l-2_`kFtd%i`N(&\+o%mGCt3P*4(HkHK%#V+o\Y/mb?lg1@$haG?aAe+>u?OE?'a"\
%9[HX.S@;m^18:U2LZ&W4_AHq8cj*AX(-b"gNto>P:F.#leki*9@Kf^">*!P^Z^aY+)g\m:Bha4&Z!#p[88L^W5Aq9V.d8(^k"Ag;
%LW"[1)^,I'1!FnBSlkq]:J(VIE=?<+n@"YM(k9%<Srf9NTbmrW&o+/[(0JO7BJ["@*6:e;d)Qllp$24[8r1kn!_luO;f0F2%3EbV
%NlpKo*\$GVo:E1c62s"F6FlTGFn@uQ>lC*#PXnASk\(AnferDA6"ff[I9\&9BIDa\nILH;o&N.7Cu+jhZ\#P#>`)bJV'>BH"oKJ)
%^gk_Gbq,N[:aG/u_q]Y7R^a#o>(2o%?b[KAND:BT]oOaJVq*#?g[&]?lq66rL=1OSQEt;ap`ZNlknAHW'D=ul1ESb0TuAoI'RD$K
%ib5U]'7P%F]ha.XY:sIoa$FsZEeF(/62.ASrP2siIQm(t#*<IWRs!-,6cSq8`B@()mQq3nQ,oL0)dQKEEHb1(8[RRD;&JI,9Ci^4
%id0h<H_Sd#l6RkVIs0+:;6rafM0cQl,g6O/RC)"A2Rqc5k*F(I_&hn/3)T:qKJ`:^?Bis>0E0Dj>bUGKPkW?3pWoH*h./OmX)r/Y
%/tn!k1/$oW+'S[Pqj/lrlmbrc<VX9UpX2J5`2KY0ab(R]>Yo\6A$>a=8;PYg_I:Bf,jq:ReX"':TABKZYD.>30O.p:,Z0G/IC>Wi
%ff7T536XaI"/S40-0K8#,FU2D?]TP(;1FD?rm4[.P1oN732,SbQU+]If=T.<-m"*m-3Yj&D#WbJ,\Qtd:*07fdg)DPE'3Y)!=!O`
%9oXV;d"cGc/QtMUV?P)1OrcAo^4bTn>\9mk[mhoh7or(e.?4]R]EOG+m5Pu&B%e#rZbq*A9F/k($Sl2"'!#WMWi>,0f:gjl(;4,J
%W5%1E(RtJM+/3)cha2kF8hM.JQ*QbL"BEr_m\KT=RF1<<h:630,:pp2+(nqhHO"I7*D'o8+F^qsS$"I];Q_\H3`>:kR/e]*Ud8?A
%)QFCf2=r'!(>TTA$>;.A(fSjMArTBpToV8b8*j!-%Ct=6K>+:3DRlGOTjC,SYLPud6&g:!lVT8,kHD5IVV)u.P,NiVU"AA/(lge+
%PRdN\IRi!Y0b=j/RiAC/>Rhj<Z>j4Lk-q$UG'k3elLE`4$f2b5iWmpV[=j%rN^7qtA7TWJc_"3TX4loc:2i09GpDL><BM3JC6cQ_
%[ouN7<m>]kd)@LraDIF7T0:ggfi<BtS'?[OhCD06>p-V!rbhD"2BHhr\$bFE;g5bKE*2HdfE?\_@j*X'T$NL4Ollf_iE7T;$roO7
%$n16?.L9LA9h)0hj;==(HBT<@qcH!VnrWsi7h[.\1a8/Ko^HF\g@ckW-S-SD]l$%j/oT1$Y#7#heTlXc.JW1GBgdk?^aM.EN^u>&
%a8crn1]_i36n&(\Fc[,_E]JAZ[GIU=f1YSJKc\,WnQXlD)(IfW8k=in&*/Jq&ZQX2)K=W.$,T1W6MW9\LUlVAmqgGe-oX[2doU9j
%m0URs^o@Lt3M^L+\iY-M)g@<5],GhA07:,lEX!ILnP:ZFR<,u`c+51?Ad;WU%"BK/^6aW%b!:20bbg8P"C=50\i01-2dA()otVdS
%KT@HNc=fTos*8`8&^p)nQW\Z"c^>s@HhQ_q;bHfL^c^H82Qs\hDHIpQHJtV"WfGI0i/nVFr"h_3G3AL.c[Hi`\QuY9I4R1,EkW'A
%AF,cg<tV_A@cO-pC"LPVW*f=-JNY:g2MC(^<sE.1($W[47he`e8R1#r<X[Oc(B5tY/e";;2J1pZqZu;<[1TDtHnYP;*LS$t1a81a
%@]1RHOPoSM":&[j,F=!87R/R_2:Q*g-t1iCP&>=#Tb==@4rOD`1-t\K6n&((FVHiYg!I%Y.$i[g9'qpVZBWak:(:3BHp9MZZ#O=X
%ap!jkJO]nM+&.R0^Y!I8Mjrd]1ST#.^L=s67)]G1`I"q'@1;Qk'$eIu7rNG.rC3Shqh3>sh`omjOIX^S;#ZC<-q:P?h^>Iblp4jH
%PfuhB^6^hfhOFXckY5r"*KbX_@l-IGBS,<(7YL>><(HP_`:&VV<U/aM&##4sCC2IeC+f74DoRnnTNA[DF[YNf)EA]YHo/\#$q>p@
%?S&IT_+K&%`s)pbbATh>4m(ZXKI3I@'<4$d5jith[o'gZd09]+O!XjfN!SO[=C`fRm:Z)@X;[A(Rh)4Yjt/20YY-9>6Fp7S-oYIC
%,P>g%d/_&h'3ri=Lf")/<M^VE7Gg38K6QI"Q&a$$h["<WKt,`5>Ym1F[mqi*?<8?Dg/a7=!09g8SC*-hrl`-PG]E1_G-7Gb3jbd6
%8.0B]VR,9i)h<[H%TCCjp:[.T.+bGI<3OdJBRn$[-:Hj#$krgpkOmOc7-EX;f]'sG,"Du-[hI<jqIQ<.EoV]`WAf2Y!-i%+iI_`9
%r"mnG71Wu4bA(N"al?s>&L@V-[G4p,X@Dh+2Qi!(\H_r0hXJ>]'/Q!eM176m=F/<ZS,jZ3T6Dgg&GN[AX!YD:e9j%Kfk$BdcPVdb
%i1kVQA.Jms-@RWlPl>.+=?QY8@l"jL,d>?lcTPi0<=;u)`o^[XM"67)-]C?/4C^eEFWqh8&3cO*3MR1[r0OHU@eud6cY/I5C]s>J
%5ltBs6DTeJ&u^VkY'jfAqqc'CWn6cM1dJ0+RNQu7,*`+:c6u.jGF_'Y7mV-lg3k#=,3EbK$=&?8@uqVT)3JsWn*2b8$jJ\=2^+Fb
%U1[/ck<rL[oo,l^&ia)Waj#6!kM5pnieQ5RDVR#lotj3$lu$;e_<s2c,=;2ZX+TA'[t0.Xij<'hA.h\G"j^K^5Ys>.*<WS8e]+On
%po#9o*EXFD3kr[84?KdD[UE#K;ELO*1=!\S:EgS&#e$,RcR6i0QuD1gC4'1mFR'VrB\+D<e1W8G"d/En'sVlH3B\28<"LfYp-Ja_
%5fokH$hKhui([rk'9R=#@8JV%1dGLS'11q:Wa]fuHV%NsDn;'%g#juS!n>)c0?"],pBY*E`cVl-f2]bf?he;cagp.;MLSJ@P=Ld<
%Dg\mh;c94pXFAN`'X<!6p!bUgYNSu$>SVg-HSN3L\!P*#^SHf(7+,FA`%H6;X12sVNGEmI3NJ?W)@"9#N"lG>OW)h>Ug1#^W]0in
%J;X_K-o0f8cEjc9Yi\u-:K^,1D!8>)DN\FWf4#uJcoOjiUYL+W)6)5JEAYJ&RKjKOB/Cfss73NXM,XPkYO]`Z,Ym.M)?df<%,K?[
%RP[XO&\O!Ln$"if#9N+gI'CEI"FVN%i`Th<bJC@=gOui&2eD2]icZR3m<'3!R)DJd.Q4Gg8@s3CW8I*V"X[ic+VarcX+cop?aCWt
%n0ZXo;`a18'MW?`d:o/W9.4hM*Tb:fX[p.pd/]_I7h^Q:7YL>>bSsP"ABt9k0<S6cIe5eCRZ'G&VA*BHWX$3=X\,B#LlJ<l8@r2/
%#Q6]eNY].N_VKrCr/89d4G98j2fF//@>o>qp<LZVI-hlLm<,Vr9lA`F,5#^:d/`.#$2+cd(_Oo?0lJTp][*IU2[t,1)\]e84rKmh
%m[PJe(/]9EDfXlp,>t]W58rI)YT"+4#j&gk3K,Mf)nLF:DO?Ci;Q/_umff"[@mFs1hjZPojn=R\;_N5L5Z1&b6Kp.LL?ESmHL3Ii
%KYm]!6r]+`QTbC-^i`am#.\a"Lt$3K*"=TL0Yold"sZJ107$*_ol3!1H69-#KB)pX6XZM`g>,1b5V\>4,Q``k-oUK3O`imJ%/L-g
%(.cY_6R_qFAWRMXjA27PqY;/c3VNMR[^,4\=IhkGL>M"*<u[o\9n&i<_FG7bB/Cfss5JuX5%#R&VV5h`e9lp]&Ne]dD6&PaS!?bF
%+UQ@N4.nOCnL5b^YERONJ50pU$'I(_&^#T#*M31*^X(/GG^&+!"Q3n8=C:L_jE`cW-8r#d8@uEIh";$r/MNNF_1keaMor!cra6M&
%ese:*PZalM!n?&)qJmgVJ):>".Q=Mi8A-Wg7K\=)-CC=>Lf")/^$+=IP-%OVF0!"!bXqnLk>Dn"pZ7,o[lsUpd@8d50,eQ6pXVXF
%nA,0_)/TYu^ZZWkZ,80M-UBJ%DCa8m*mQ5=C7H<2?2t:QLgK/^I3VXn2B<5<5+:DMmRDm#?h=fRdb\0DS>_EJLoA(i'k^daFG%!W
%/R?bngphDnl?0r\%0.H;?nZ2G&Y]+=)mH=jhG]Ft-11Tjo2"q$pM>,<K^L3knpRVXji/7D8A1UG7K`:!1n%hI?plFC7<O.+^O!*-
%M`^IqU.=U^(su=NULH0JP7bKaN@Q5MXr]d,2gd<p`!dt\ia6N:n>9F][:t.dp@(3qpZ"X06cpc*FDg:lZGk+N5]475MUW"U%FF.^
%BS*q9%7Z$A?d'J.;IO9I/Z!`WkAu>U-:4BiSC6#12DK6MbIfRNNTZ9l]e296",)^^8Btm:./ua)5f0plm_*,8>U5OhYD]mbZ:k_`
%)p4+o\)&j\NI+0k?MJ2a>'i*Br&=m*6MW:sNN=sq[qRZL'p"?ajE#lS&@u9uYR].%+>o`L,3=R:eS?3C$ul!E/<p..B-8+9*I>`$
%Hr$*fM3hNn*D;^*cqn]r>^OI52sqQGH@LR])kb76d0/F'&Y]+=4_&9tP^Ukk0Ah2g_=0??e5tJk<*bin0o1h$7\p"RnpW04A:a6t
%L/@f+^/7<BGj?<.`KPq\/3X^ug[89r\MdE/".-/FLlK#9Ug<bo?^&9=JONo#D$\*FY7+70mXD1p)J'Ls:7F%tXR`&=/-agt.B,;,
%eCp-pcFneaYVni@$I'Iu:^GWcK(.0D;#ZBeZ!#4orEdk^Mrd:9Q2<Nc9R1i(BrLq/pO-N_)u#=_]C8,$g3U+kph3#Crr("7brn7]
%s8*>Ar'baTSXSYY&W3.21sI3i.&h_pHm5!-N_f`:YKV7Y6C*1450HEDipVF_Kn>tUl#-Vin-R]sU<*@%M^0Yd0">2":nb_pW@ZdZ
%>8bM?KreQo>u68=mC6V8)<`$U-HK=-U[68n3SS;W'\<lejO&B.143p"o^<BG@SVftCo;Z#_rYC.2enItf4L4e[ru(Qc<6WL-'$oS
%LRo)6.XriCUip3<M?M);0BQ-<bsiesKW5P5PLsM'Oq8nN^KQnPj'-J01A'ZO$"c>F^lZ.F:iZ4O@em0>TZ%p`UPjTbWpAlKAjU*A
%cHWM+A1Lmt;=I_^<I#@4mh^>q(YrTTQ+PtJM`0Ub:FEU^0>BoA#=Cf@KmI5a,^g/C2F-[b[l6oYf]`4:>mhAiO-n`o<XaY_[R:rn
%BV-n$fOqoF0\=5(aF(Yf;AN*S`ZIgUjmUIR?1(_&b6HcMXsYfiAi4Tnd];V$eaiT@btQ:AJ3'&uHh,rCD*9t<H&BbD+^=[alS+Cs
%hL-nqXffZKW1LI6Bk_uFM9=nQ98oW.Ro!]NLBcN$UZ7Q<A_fJ8bor-^_nMLjO3%+edYRhR^D2s"cR<<^Q-K^Z/p1W^EBJ"2J+MF0
%r:M03o[j-8rLa)R%mPO;a++'[T7Hn*>K#cj@n-ET:Oi2ts7F?]qXO<PIe?clp$;(]s7>"&rS^Q0iQ$H<ks+1*ru(ij$0/4cA_$*0
%&q+2@B)Z"7%d81QV\c";pYJTLc:9;Ale2XhgO@<Bc.<Wb/Qc((nSg*;n$lda1r$n94u@YS&cL#F4sp[ZB19r<fXtmXI`'BCAK9i%
%\O2@_UZ@C*U[V]H'Kj['\r-OO/8=NA_`Xn'JT7QoLOp&^Q*U(8Z_\E/A+QPMrP9B#DSV#f;tr=f\hhu/k"T-'$o=gL?U$SqRX=$J
%HeLFrk"jsr$lY.9h^3fS.0R$Dg2J*=C%p:k3p2WFFqm3dYJS<t2O*h5V]>`q.o*PE+Q"T/5#-Q[_.]?NP?u%blK+PJHb+uB@f52P
%k`MR6-#l2I7Y%mXT)g/bf`js'58_:;#(9#d;sQVAjDI,^`HE.]C[@umn:t.\@H(\ZY[]Ftb4D#EUf9.6Cd;(+[]Cm`dZ=A=ao(,`
%P2FOBFPA`I)nY<)K6.-_'n@1<%W_n0Bfi9+OAt?PP-#fD*"(.RK/2q0T*c'!;O&0i"^2;>RrlDk!(9ja0f065EP,gsii`p<p_&kO
%dBb:UR;h;<`2<3O+#uO`g8\biWq#uI%br"%nd-Kj(&3bb2="_N:Un!/DT#T9Lf[?S4_hBGbfadWU=AMiClVKB6#MQ[O/&Pr6Xrt'
%n:,`@!l96?N<jLTHWu8Bb.0=#+Y)D,6omj/^9:ar*#<?9o^9O_(IH(m3MD!SPF;+O3^dS-iHJAiEPol?hFY2eTJOHH6We!(JI`LF
%Me2+K5,_kfTeA^6WCi;61X/!nPG9.B>W^jYAQnHKi=gBTFlRF0:4dVs_26Z2bkmJcX/DYfM?AnQ!1b^*E:k(CEN6m(+R7TcCkf+a
%ltE;)]Qa.>6O/SMF36tBkIYT,:7:e?<nc!HC`o4r!\W2+cL;OjBt9q4<3Pm(Y;a-g\9^s4AuU?BGKc+b$D]jTMSKVG+8PV/@k??E
%Uo_W>[T!M)<l=g1`Bkgfqt/h0Fn3=$3oE.FRF/u[W;1rgh1S;c'Jes7A3[cdXRM%gQK3YqGc1c3,M.7,_/NT@SlfeM?8:_.pmRW.
%*g+[F&jjiurK1t5CXdgKOo@oFdn7EYI!+;&7BDb)dc,M;%rVksH<1?rD/L^qKA2KQHZ9T7p4GU`d8BKo^C><!*jl6ITD*rfZPp*_
%'"?NO#.?VcZP"cNEi[Z=<V]K5T.emP#'@_C87^?Z,/nB5;)R<03J@n,,LK;f?q,J7\MTV]IFk3@#.8uk9&=$E/<eId/b1_D]&KtV
%4/r\P5]0O5Z$P>j!PfonJ4E(^nm>?$p-F&O&,@PogO4#ZXWgHoo%p;m[t^2Jp3Y$n@cQ0uZjRuJX-,p[KTA$Eih$_l>f1ed0CflG
%B"0\LC\Oi"A`rt1N,$_"JW@eQNE1!0)30_Bmt!rs$'2Y.378k(ITcd1b\2Zk9\K).0U9X&l]WJ3NqWb#p#?%3pR7`?AoEnO<C*RO
%n>Q57,OL.SrK6I0Pu(];:=]U#)aV,Jh9(X<eQXgS3LH!d$hE9Q&]kG3+js&/e:#,pG/C$R8G;XI@-5&oo8-8+qdqDWdQ"EoeEmOk
%&PE1:(;@u=)l8;>&EtN(C=aRMoa;inLnm8m1Xq_M#Rj(SD6fI;'A@\Vm!0IAn`JV^8S0*Bb<gu2lm=IB1IQO"37=mF^g/m1%,)rJ
%cRV70n*JX6)ZtYpe`6R4"B-36WpO@dOr5VfEU5;3/:O8b5U3rnd@g;#"5SOdVhN0fET7?J^YKh:OLI\[BA@o_NUZn7Bk+Z('6/-H
%<FSr*:bReM2%..aQAiHL8FlB'c^$Z6KtQ(nBr]cS>s>H+ENTitidr91f'$1ojD0ho2LhCN:.R=_6q>cA0e*\Z5B$S^QuDoN8Je%<
%CdQ<X7r\3G<D)S[WU]MC8*hERD#QsWgMTtAGeWqD89lKU`U;)jf)'WXRA+0(FuOrldd+53deO%'T-:FS0'C4#7;BIo%!69;4(oEm
%lBda_Jk5b0@?C8AF7poNT$u+i$-gY9SNWS(*#cr*ZsU&<]Q^Lh#,OFAO(o!Y'iVuB3fs5d-ZD`rF.P&0J36E"F[Y8dgQ:9@D8"Dl
%/R:Hs+>;LO"A4N2C6)+Q.Md81*QWXmqN(;*<F9R)i#&5=Z/eCQ&0g>fN]tsRYOf+1fMuB?r$/l[*,.>+VHYhDg*=_cgO;:DeGF@o
%+q/VKI@qH^'R#g9j(;M-#;'_>fD9]J@I"/5M2mJ$YoQeZdsP4<8:Ebf-VUUYUaW,QdNmFFKrZ1L&+HA(kG@p*T6nZQ3Ud99iQ.&o
%o8GW.-9NcUO?n:?qKWV(Z)$5Gs*gIebDfqJ5M<;;;SlqII2kk__ekJPp4,C[d8;V;F]?VFrh)B8r-S_$3]^0F@tS")a]1IX\DF+s
%;\K/$kNhIr#Rnb'TU"`6QQph+/GQA0&H'3.O5naD(c3$laR>$.>;&]s*67eYmMI#SlsnjXN"X%JO7X&+2!ZXLY1mgqmb/o-cRU,f
%DRW-mpQ:rTe>n6Cr_6%TJohA.E8Rg@I2<`dIT/pY<6OB><%RgIH5-:)l@Tb(;^ne_JosqRBEN%UNP?j56A2lZ<,:`Mp.t$)0qA"?
%[G9`%M@#?D.:Z0q8:FnCA+$SJS0UV,2]cr$\hk:Fhc\'CIOj^7;A3?PX2qLH,/l\'NiEBrasCOo+,PG1ohEJ;lO;#`.!];GQH&IU
%1&rY6*-H])4AU5*Y;4#[0@EPk8)8b%m1M2<O(?!drbf'+e$/#Kl1(t)!?UjSCchKXp2Xqi35DZjhD**!k6*n^f!F8,S+*AI6:Up9
%m,pMT[8eG#_X3=W\YkUo'a\iND`nW,MU!L!@5j<W7u.kc%7es##NZXTW/j>2mg"*>FP4qa\PDMu#/j4+#/ElC?LMD(32*6lmg"Kh
%YTH9%\W%PNl^`.E:*HD38G;Z:E'g;0`jqg:\RS9plcCn,dN*ic,E5up,Q%7"JiAhNOr,Y1DIuj"po^,B7eMo-k<krM2]6_,WLA1f
%ERaW;eHgL%Y3UL6`96lg0Sg-m6DU"C3MU?*K5qV\%Y_uS-bTLOb!"hk)0XjBdaRF6\5dm=4'4C*J,"rO-o:2oO_2J*DB8dJm=\".
%OmK!2;"p!ST>OH#KguYh$`s%=a5Li/N?b_WU5]]=N@N?>r^N;Q-%q`_.QH_Ud;[TQ&+"N=OmM6o@I#i)P7FR2^t`.Lo]ASGn`;\-
%i&R^$FTATh_gW0\A]'OsGrQddlS3,#*f,8/)^%MO:S5X=L<MT?1H\E$$n2>JEtZ4Tk[REX+u5Ys!kg_eNLC:tkJL,C+SsUpOiQtW
%>_)"g[PX7mnk%SXTDb,:7(]>t]ZGQaN&YR\Vr#%'4X1Kk.:gpMaaRP&nB=J;c8R@l>FlcM?!H^)q^)d?5216&#(t"$%O/ksdRMc=
%`uSWf4qdh$$LlW8b@SMpLOu&I-@E9]Jb"(>m4;2]pYpI9',YE*+/.Jg,%C4k'Gq:@;pB!-jGZQ]nm>A:e5F.L:9n*1P==3&Q30eW
%rN(m[p\EZFUWg4p!mSCM)KZW5[7eN<5EbtmbBuLs=ZHGN*rkR.#4rG+@.L*SMc0;<?Hpgf!o@IB>NSJ_?N(/bKLbDD1?sp25Hf`?
%h<Wh8F^X&.F'Yt)&/mA9Pu*UPFM!*Vbch^(c12qnF;#_'lX>4g+3At<$%(](2tdWi&1mCu-`GmDJ9``UipKA)Z&dgCA69)!@[]N]
%-9N]CN'Vk;qKWh.;r-.$oRN<MEZ(TB3O!ePo<#C!;<2'!S&hf@,/l\?%B>8Fb2n1:W/j>2h^fd\cuNR8OXnDZ\nJ9:Z8XDF?H:Bi
%3<8N,4-;><W0p@>l4uKq2^*DDOmM90!*9tr\fn]cX\g/O.s;\9ADX`5&_F8B]>7c^fF%bgh!P]1M2nSb@T4C>Ibk;p.sRuj!&uhk
%5"iM,lpLAL)ooqI^t*:**uJOCI3?rhGgO]@n>KX^TKeV<]FpOVV.4nXla6:Ejg&.g&]%[c:D]BKGa0+H6)9i+@A@FeLQY-\,K[-,
%&1l,.CPr9G-ahZ=VhRXfcitg]+J`S\))99]k6>AE9R,'hf:kPmiDG(MqtU[&&"q3iPH4R!:X7IY;fuI-e>?AmfK-aLA\5(rK?3Q]
%+ODWGj$>K[;)`'Fg&oaKHbkS4khCnU^ls;4PEX^D?^r_:=GYHalK<H(R4sL,4$f[0n>Mf#3\$JC_-MI7qY<g(Cp/`&)R\h6HJi8Q
%qK%V"]q"$/^cL:p/>LF./r2=l*cuINO4jaJqBO\>qa(4o/a5G<jC9l<4otPr:S2;"@@i?dkNpaq_&tN"#E`IY[193^+s)s^*S!ZS
%T2u&L(Zp+GK(EjRe@=lt$E./ZG6AQ7a2/rTXFj(8j^#DMD5a#pW'?ID]Fsq(e$Q0/rH$6HkYk/1*'5_*A(CreTL,M/Pq^8f.j<>7
%Ggn=SP!M1g;1Bkg`Q^\/.]j`0/<r!;1ATXe[VD-R8*@4[9<]['aLHF#Ye5.1f_G._dOops%m7']n7Y0;r^CDV._F(\Qaqes:!Tcn
%8j.=3jD0:>gq6oBJ!:jQ7A/B:PO@/LbB2)aI'b#ZrdI<.Fua'K0dQJsER*$l3!_q:P45%$_lRf&dG6^D)0@UD=),598aLS1F;G,:
%4q#4$JtW,``Bhsg2fl)d)ORqBJ,Q*,56i8N=MQGOc_*@J+/?N"H]7I!g.urKB-?f3nCiFX1W_'AqTB7>G1N8j(2o[I9$4CG'[*D`
%9pUF-J=a]2[MjtEnW9m3lYrC)<:H`2<78UrRR"m+YCY<')g&Ub8gaJ7n_u1i)nb;PW3pj(EI][RU<F\;kOJ&![-0J4kg;!T>uN04
%7F@2[K?Sne*lTR)p=6[H=?jbP$3)I>P51prTn)m7d8:EuLSLaGkIn#pbgYR&5BXmB->3gNV1V4]XXgpkM?6JZ@1Y4+Iq]<O+I:Gu
%aFji[S6L&8?A!FbW$ttP,C@q+K14Q`N&Iq.N)j*1%sCB&hlj?C]VN+IVI%\W%eCP.W>P;L!Df"m<Phb![XjH&/nj)\97A637QUnY
%gVF$(mB(t[F.:bjKKCU7k>`3R'@ZsK2427BVf#(b[pN2&<+n3H_X\PMfNZeaJefW\R>g=s/g0EdTpfnK)_8MXSZ54Sd(4!3&BK`m
%Pk=,McR6Cb0aO)hQrlj#7X)Ob!F*o7B54'.KW'.#,#N3:Wf5MT:_q3!;8?[J&:a>(Yc_NIbuSl?WKPD9gr8ZYASpcHJUk7XOWL?p
%)Dk`KhWYBd4=qU7>r+.eQgHTcle\_:1g?8Ko-p0tki=8YP4@"b.rpd`@+j8PWl/qjeEG7V=4iQYMl]&HRt(`EWEY=)H-3b2AWbR<
%X)3<PXJqiVnhN9;T=5B32AP'.?eVVLQ`?jcO,JZ.m3I?A]O,+8b-Tlg<9p#E-#s'\2I57$::VW+lpT$*mTqa67gWV)LPcR(<-?#=
%AYGXWrI:5W(J":H[Bu7X]i!>a7p-Of!UsJpd]n7'DXgRj=MR`F$50=)5pBm6S<jE7$4e,sn"'57k:/M,<Kh("3.G-D`3_-Ue0Vb/
%^ek[N&uiJ?^/GfiH!\:6CuLU%\0.WIBFS'lb,en\NOl7K)(f>"ITqeGq<1H[BqZjMChkaT>)CCKFOV(MkK#&ee\NeZgX.]to?fD\
%"bUfghY/NRg3QI="<n620i9JNgJh%daB,+8_WSQ,kbaiG$UcmQ\^gH<Z$n:jqIr,Eg[el*Tdt@Ok;"nr0n[8=[NJXrma6g:D;ccr
%W'H9NC?K)]>c.K!gLHk"S8$+d7D^)@jLP?sjEX2LbRUrLI*oEXcMQine"J;iIJ(-"R?7dEkg5kX%RK)WG"3_GXJGRc=d;]Q#FRGV
%_Nnjsg95H@cO6m()<[,J*MUp&*aSEfRhoTFi&0uN/SE#>Ao;(fr&Ot$l32Il3p\#+dmN%jPB4%/."eq1gjY]-,DYY`:cE:*nm%F*
%YqrY;X=R`NWM'XYa_9BiFFcrg5.>XN8><E9T/p0r@KB]<*G&qgrNsns>&65\aGfp-2F9MT7r<CfIqicXl`n-V%P7lEC,;t"A#j;N
%qd@&#j0@^KpeP]fPTX^(i#cmPY\Ah"b.O),IdX-#jQ8N!;gMT^GfVJeb[UZ\dN*a@ct1eN@[#0=OI$?4f,NQeU1ohDS3(Qq16Lm:
%19_q7bm@*-nBfeqhALLpTu"MhP:q5DUI0B[A^oGreNmS,%N9]U<W,fZ049BC4!\1d*IV2?jmuohDMU=[0mZFtY(XOkq/2XKgN'B(
%>>h7rLE>34MT`>O7d)Ld?&L"qRHNu/VAqo4IGp1DYrJ!Ye=G4YA#B!q++S,d&\$g/5BO-(CpQ]S&DWR%V4%5i9#%./:GWt6$Z36&
%;,m9m1e7FX0bli^VL/^9:JGF#@%5t^kI#CH96:h]41,m>cBrU0f2o%>?EnUWF7<A<#'L_s)EPef\Q%q$.,<o^YmY`]?*u;N(T'"*
%ODD6blIBVQ1UJf!(%d$EnKk9K9;QZmI5D?*:=n?KCmdkOfJR@d_dQoML0Ub.YZ@ORM6TtR0]:A@`2rG8'kkqINsc6]N9sOkI8[k+
%B7hAZ)Kk]+;'#&I/e'sQL3s;CmbBi%N,&R/`UQUps&:mh\M3#Q#9ObdMNe$ZrB<\H!T>ipW16WeU\Y@GWk(fJ&+@JBQ\snqi+g"k
%HL7uTY1K[mn59ukY:l*IDYJR<ScYK`7AmdOF8,>25#kmb]SH5jhE/8l^H[$KRd[r,_+RcB36KP@p4!<1"[&iC:3g4/mct7.Wk(fJ
%&+@KM4GWt4H?V:mRE<GL=i!]XG&r<U/P?>CfV"ehq-$^Y#\6(f4gRt$AfM]!3p>3P0Fc%rppQmSBA]'J.H->Nq!+>5:[g23`trl)
%EX*WB-G5.8n;&tZ,8lr[i`o^nFa?-6"sRai3*59B]GQE$Grc:8kTjWV`VB`Q<Ut2jlN$K,9*t;]8B6kU8^+<*kO?^C6+nitMSHTp
%rf4lNU)?uG%K)"C=pG8*%e'YZ)B(YTaGVjXS[]0@e9s^?^mR2bkVQNq?-:e1^-mB1l7IO=rW;lT4U,8C][(usgRlr1Nhb(Dq[G_!
%HB)Nb[-nuAs,>fUeAfhu5A5lapRp8o[&8E.M5Dp22lt'4B8JSJTOY+G1I*>l_$RsOmFZ?+Y;sd&Zt#L?R^k/AlnEg>Vt;]<)?C*0
%`ZkbEs.\8s'7FOla9p,Nf18JToS]Hn6Vt$mU!Ar6Fe]Uj2=N;S;I'\/]k(W?Nh,[EraBki[):nTV>I^^R>sQ@c;gr5#S<&A=)/a.
%ET(%&`_;VGim*uNlofBg2[@ZD/"REeYI>f4(9=LGdtk`tY,73%j\`PJbY2ZJI7;GL@suOiZ7;A.:q&Ykk+hP!aog3T,Gf)j,K9a.
%[,G]dFH!qZ?gXFH+-uO)EbQs9<JT^.8ZYfV_C*&NbiXb8ifJBVK^`hA2WcO3I+o1"ok*Hb25JiMJn?!CqC&kYQ!g*:1]&/!pol=(
%FllE>MjD'OgO<6-BPZ5q9QAKJ]d4+^]=9du?(K1\GoL^(d?i`5I%.DhH"oQ+VT?>CW>BbFQ[1kn2\7$<4/qdS0d]:H:ZYab6PjuP
%gabR;W^nX<YVIPWH!)oKH"[K,]nMERZX/<G-9Bk;D@MsYM@PONmdpi<RW2N_VEQ0bJR5!gpR\9m1'aX[2Is_L)CTMsniI_hi&>nN
%`mtZ2",r/<F`]/cINK=!^r$3Us)=*mAc;J)-17(nq.Iu8[hT8UgR3DZGu:*::V_k351UC*VSEnP/$C(Y!%5H]-D]8@c/MT?8W;4,
%aaZ:mat_,$q>3/Fqmq-QiVQ?Bq9-*dPWuRu;U1krpm>(i@VJXo%-JX+o*),,-f#VKWa*_6FD[F1;FVr_p"*VfOt11fN)]?gc$mk`
%.Dt=n2c]&\Jb$!J\3FbcXVpqiNi'!f'ndCiE\=a=Z5sZb'AT.2H/b3`R%ofXhmSHq-.O3KTVF9N@l[OFf4;U7W41%*^9j]^1\*iS
%V]Z^ubW1?>$6kc6>eTBJ'57C>S0Ysl!Y7m13%4(nLSY1RdIR8ubn-)b&C\!/^_gdL2XiH<5pG?'a7`suf>=:6qBO_?,0^]e9Q1?S
%lRt<?im0oES;%AW9mA'g91/@h"OqJ0@iesAe26-17'B?RO3JH,k"Q?(a#O=[PC`G23f'jQNc@:WDPh,G7_g$i_i#MiosR)W:VM\@
%[[cYVd9[&X6>fl>*_jXiS.M#1.\r6^m5?40bIVO9p=ca-'a",bKPaXfL/ksp?ucQ1s*I_cZ#/(#ICFT9-pLY/\+3<NI1Q6%l-2g]
%.HfpO=PXTmF!l=nXG]e!aRtsc96:m`L7snWPnK*7%F?R0J-DF9rDTBelW1jLhfrm%r_pfn**]U`k9&n/4Lqie;>`]c8'B/g#DiC3
%-W8Lb'\.g<PH"jo9fUO0K9AABlid>O+M72Q*fC_\oWV!DO3+=Q`[*aN\l29.H.X[1g-"V9''OdlogS&=k8fRjB>N9jKS9dqE.]jm
%(Ff/2p$`C@,\'V69JffnCn]=tXo#A*o+o8@gX%<Y^"%[*(FZ5c%C*3im\d`&rak3Dao.]Q)V?9K8!#7,Nf'h8BXfM]js)OR:1iJI
%Q=q3(D@>]nO+EC0pc)h9j;pC1o,B*VG<iJio-.a\r=nJpb%3p[J3D(0);goKj(dMangZ`0>nC7TdRL0um:4h1l"]41,g*m(a\Hc"
%gTAS]^K?ai8Za(sm\en:V\\YYZ.&Z%amK)F*WKf#?,'B9_hp2Y/*K%A`PGDHJ[iDO`&Qe3:9L(]J;7]*rQ+8hd(M&hha5:H^rU$J
%8c.>b;8RQ0o$roXk2U-jmD68SSX_fO?BKW'_4:coU'H7iH^E]Dbj2goU>13,HHabU$pAl:Al#4SQJ3M.]VjJWq,m1]%9GK=?k3g_
%,6M&F_M-oMq%\S!J0V3Dn?^4Fq(<W7&0HZV3#.:3YX.0i4`&geg=1S=/Be,k_JU.9MY*?hbh3OKPmaJDDi`rNB1Da6+,EM9%gX%9
%ECikh9rpkpK&1!8euAND+\mWC'nGre1oM:q[<0SB\=,3d"#Q3^lN,g\5/_$<Dp4?#rn&ms&3LD^9nL&]Gi[/Gb@ZR:\Bl\j?3mFT
%2rTF'F#"*cp,fopc#fr)N/WX4D<hHk/3*NJC@e(Jfs;]Mf'8X#3s[4Y),iLYmEhs"3Mgj=Aa!"K8$6];`tSHWY(pp[hYH6sp<i:U
%QemdH5WB+#]F3`pio?S+NuoJ2L9UT.*>-QhiN@EQr%gCoeP!)@?[4XK"%fAia-B@?12g695IT\n4:R@>)m99qlAB5ZA[6NC#(9?n
%6Wr!R6Q[BA:f@==6@QjemZhn@epMgjoN:^E_W-O9q)IF.8rBc"HYX%qq:I8XoHD_Bkb!&6iCY^6Xn`U\UK5>$+82cDYdZ^*:OBAS
%T'Yf>hMTTPLKXk"H\YoX\:&hW:fDCcB[*r:Z*j!dDB,4cU!bI-q2S'BCCIdTYbS=P<CHl"WsDeT6"\B.YTCglh@?AC'jXZPUMF0U
%RH@]W)g&.=]d7:WbO2!H2<7@^&?WKCE7HdbX5IL13t<X)$80@:/70p[TN_R=HL8Q9o<'9B8I(Y@?c%*tp2iMHh!6?ocT)t)*+!Pb
%'_sF7(s;9(hZN1)BLf%a7o$/`MDn7Kkme-3_Pa\9qV<Bo/lOgKMU(+3n934`:ab)HCU&(7cPB7*8Vkbm_R%DKe6e*bI=B.2AQLn\
%iOtb296I?,.(E94Tss;HAn5DTkU"12.H+u`SEd;s5!QgAVm<@np[DKa=<3$Do`kt(o4kgZO8W5s*s7ROGY]LKKVO'>P6)"".R4WW
%PDN91"^Sr":1o.n]A6uS0nX7h9&(qK!<oX6oiM`;&W7J/It@da?,lPm95Qm]\1OAt^ah`BCB_Co3S">GH^D;o13(=O_T]],?&su`
%KE*[<8#6]Hg/8WkeGnt#U]i.!!nK`Kp]F,eRC0AlVlH\p@p>P++QY9b^:R%SSI9qW8kK?)i<Z]Dd+b6smdq&\%slW.+LO"8$-53Y
%T^OK-Ts2&oLZIl.S14[.+'n1nKPuq6>39l(+n@.&\NNV0")&4iH?8/V%6a^EE*q"L4$1X4X.l@fh"cJM\GP7FO*<iW>^X0lip.,!
%63N'k]Gi%/jl7?n?[o^=>$/rQ4!P[1j4t;SJ%S/*N_f7+XhOQ(j0+KHJ,N`tDu\t?Is?A8YJ9tp\)/7B2ui9WhuE+or:.CKqVcXJ
%r8fS\s"E:.TAP(nm`-Dh*W!Bt55sfqn,N0pJ,.P8rqO*$s73r)n:-#IU\;M_hu(aVrg.!kir9&'f`:@~>
%AI9_PrivateDataEnd
